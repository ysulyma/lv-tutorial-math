/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/Block.tsx":
/*!***********************!*\
  !*** ./lib/Block.tsx ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Block": () => (/* binding */ Block),
/* harmony export */   "Corollary": () => (/* binding */ Corollary),
/* harmony export */   "Definition": () => (/* binding */ Definition),
/* harmony export */   "Example": () => (/* binding */ Example),
/* harmony export */   "Exercise": () => (/* binding */ Exercise),
/* harmony export */   "Lemma": () => (/* binding */ Lemma),
/* harmony export */   "Proof": () => (/* binding */ Proof),
/* harmony export */   "Proposition": () => (/* binding */ Proposition),
/* harmony export */   "Remark": () => (/* binding */ Remark),
/* harmony export */   "Theorem": () => (/* binding */ Theorem)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

const block = (className) => function (props) {
    const { blockTitle, children } = props, attrs = __rest(props, ["blockTitle", "children"]);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("aside", Object.assign({ className: `block ${className}` }, attrs, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("header", { children: [blockTitle && (className === "block" ? "" : "("), blockTitle, blockTitle && (className === "block" ? "" : ")")] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", Object.assign({ className: "content" }, { children: children }))] })));
};
const Block = block("");
const Corollary = block("corollary");
const Definition = block("definition");
const Example = block("example");
const Exercise = block("exercise");
const Lemma = block("lemma");
const Remark = block("remark");
const Proof = block("proof");
const Proposition = block("proposition");
const Theorem = block("theorem");


/***/ }),

/***/ "./lib/FatFingers.tsx":
/*!****************************!*\
  !*** ./lib/FatFingers.tsx ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, ref) => {
    const { className, fatR, fatRef } = props, attrs = __rest(props, ["className", "fatR", "fatRef"]);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("circle", Object.assign({ ref: ref, className: className }, attrs)), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("circle", Object.assign({ className: className ? className + " fat-fingers" : "fat-fingers", ref: fatRef }, attrs, { r: fatR !== null && fatR !== void 0 ? fatR : attrs.r }))] }));
}));


/***/ }),

/***/ "./lib/GlowOrb.tsx":
/*!*************************!*\
  !*** ./lib/GlowOrb.tsx ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GlowOrb)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

function GlowOrb(props) {
    const { r1, r2, dur } = props, attrs = __rest(props, ["r1", "r2", "dur"]);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("circle", Object.assign({ r: r1, fill: "transparent", pointerEvents: "none" }, attrs, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("animate", { attributeName: "r", from: r1, to: r2, dur: dur, begin: "0s", repeatCount: "indefinite" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("animate", { attributeType: "CSS", attributeName: "opacity", from: "1", to: "0", dur: dur, begin: "0s", repeatCount: "indefinite" })] })));
}


/***/ }),

/***/ "./lib/Input.tsx":
/*!***********************!*\
  !*** ./lib/Input.tsx ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(liqvid__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var rangetouch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rangetouch */ "rangetouch");
/* harmony import */ var rangetouch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(rangetouch__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);




const { onClick } = liqvid__WEBPACK_IMPORTED_MODULE_1__.Utils.mobile;
const { combineRefs } = liqvid__WEBPACK_IMPORTED_MODULE_1__.Utils.react;
const NON_TEXT_TYPES = ["button", "checkbox", "file", "hidden", "image", "radio", "range", "reset", "submit"];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)((props, ref) => {
    const player = (0,liqvid__WEBPACK_IMPORTED_MODULE_1__.usePlayer)();
    const innerRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();
    const combinedRef = combineRefs(ref, innerRef);
    const onKeyPress = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((e) => {
        var _a;
        if (e.key === "Enter") {
            innerRef.current.blur();
        }
        (_a = props.onKeyPress) === null || _a === void 0 ? void 0 : _a.call(props, e);
    }, []);
    const focus = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => onClick((e) => {
        if (!NON_TEXT_TYPES.includes(props.type)) {
            e.currentTarget.focus();
        }
    }), []);
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {
        if (props.type === "range")
            new (rangetouch__WEBPACK_IMPORTED_MODULE_2___default())(innerRef.current);
    }, []);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("input", Object.assign({}, props, { onKeyPress }, focus, { ref: combinedRef, value: props.value })));
}));


/***/ }),

/***/ "./lib/Link.tsx":
/*!**********************!*\
  !*** ./lib/Link.tsx ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Link)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

function Link(props) {
    const { children } = props, attrs = __rest(props, ["children"]);
    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("a", Object.assign({ target: "_blank" }, attrs, { children: children }));
}


/***/ }),

/***/ "./lib/LoadingScreen.tsx":
/*!*******************************!*\
  !*** ./lib/LoadingScreen.tsx ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LoadingScreen": () => (/* binding */ LoadingScreen)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

function LoadingScreen() {
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", Object.assign({ className: "lv-loading-screen", "data-affords": "click" }, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: "lv-loading-spinner" }) })));
}


/***/ }),

/***/ "./lib/ThreeFiber.tsx":
/*!****************************!*\
  !*** ./lib/ThreeFiber.tsx ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "APIHelper": () => (/* binding */ APIHelper),
/* harmony export */   "R3FContext": () => (/* binding */ R3FContext),
/* harmony export */   "ThreeScene": () => (/* binding */ ThreeScene),
/* harmony export */   "intercept": () => (/* binding */ intercept),
/* harmony export */   "useApi": () => (/* binding */ useApi),
/* harmony export */   "useDraggable": () => (/* binding */ useDraggable)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var _liqvid_react_three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @liqvid/react-three */ "./node_modules/@liqvid/react-three/dist/index.mjs");
/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @react-three/fiber */ "./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(liqvid__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};





const R3FContext = (0,react__WEBPACK_IMPORTED_MODULE_2__.createContext)(undefined);
function useApi() {
    return (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(R3FContext);
}
function ThreeScene(props) {
    const { children } = props, attrs = __rest(props, ["children"]);
    const player = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(liqvid__WEBPACK_IMPORTED_MODULE_1__.Player.Context);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_react_three__WEBPACK_IMPORTED_MODULE_3__.Canvas, Object.assign({}, attrs, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(APIHelper, { children: children }) })));
}
function APIHelper(props) {
    const $three = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.useThree)();
    $three.gl.localClippingEnabled = true;
    const api = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(() => ({
        activeListener: null,
        controls: null,
        dragging: false,
        meshes: {},
        $three,
        screenToNDC(x, y) {
            const rect = $three.gl.domElement.getBoundingClientRect();
            return new THREE.Vector2((x - rect.left) / rect.width * 2 - 1, -(y - rect.top) / rect.height * 2 + 1);
        },
        screenToScene(x, y, plane) {
            const rect = $three.gl.domElement.getBoundingClientRect();
            const ndc = api.screenToNDC(x, y), mouse = new THREE.Vector3(ndc.x, ndc.y, 0);
            mouse.unproject($three.camera);
            const dir = mouse.sub($three.camera.position).normalize();
            const distance = -plane.distanceToPoint($three.camera.position) / Math.cos(dir.angleTo(plane.normal));
            return $three.camera.position.clone().add(dir.multiplyScalar(distance));
        }
    }), [$three]);
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {
        const { domElement } = $three.gl;
        domElement.addEventListener("pointermove", e => {
            if (api.activeListener)
                api.activeListener(e);
        });
        domElement.addEventListener("pointerup", e => {
            if (api.controls) {
                api.controls.enabled = true;
            }
            api.dragging = false;
            api.activeListener = null;
            domElement.classList.remove("dragging");
        });
    }, []);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(R3FContext.Provider, Object.assign({ value: api }, { children: props.children })));
}
function useDraggable(move, down, up) {
    const { gl: { domElement } } = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.useThree)();
    const state = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(R3FContext);
    const events = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(() => {
        return {
            onPointerOver: (e) => {
                if (e.intersections[0].object !== e.eventObject)
                    return;
                domElement.classList.add("draggable");
            },
            onPointerOut: (e) => {
                domElement.classList.remove("draggable");
            },
            onPointerDown: (e) => {
                if (e.intersections[0].object !== e.eventObject)
                    return;
                if (state.controls) {
                    state.controls.enabled = false;
                }
                state.dragging = true;
                state.activeListener = move;
                domElement.classList.add("dragging");
                down === null || down === void 0 ? void 0 : down(e);
            }
        };
    }, [move]);
    return events;
}
const intercept = {
    onPointerOver: () => { },
    onPointerDown: () => { },
    onPointerOut: () => { }
};


/***/ }),

/***/ "./lib/graphics.ts":
/*!*************************!*\
  !*** ./lib/graphics.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arrowOrient": () => (/* binding */ arrowOrient),
/* harmony export */   "curvePoint": () => (/* binding */ curvePoint),
/* harmony export */   "intersectSurfacesImplicit": () => (/* binding */ intersectSurfacesImplicit),
/* harmony export */   "marchingCubes": () => (/* binding */ marchingCubes),
/* harmony export */   "marchingSquares": () => (/* binding */ marchingSquares),
/* harmony export */   "solve22Matrix": () => (/* binding */ solve22Matrix)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);

function marchingSquares(xMin, xMax, yMin, yMax, zFunc, c, resolution) {
    const xStep = (xMax - xMin) / resolution;
    const yStep = (yMax - yMin) / resolution;
    const points = [];
    for (let x = xMin; x < xMax; x += xStep) {
        for (let y = yMin; y < yMax; y += yStep) {
            const z1 = zFunc(x, y);
            const z2 = zFunc(x + xStep, y);
            const z4 = zFunc(x + xStep, y + yStep);
            const z8 = zFunc(x, y + yStep);
            let n = 0;
            if (z1 > c)
                n += 1;
            if (z2 > c)
                n += 2;
            if (z4 > c)
                n += 4;
            if (z8 > c)
                n += 8;
            const bottomInterp = (c - z1) / (z2 - z1) * xStep;
            const topInterp = (c - z8) / (z4 - z8) * xStep;
            const leftInterp = (c - z1) / (z8 - z1) * yStep;
            const rightInterp = (c - z2) / (z4 - z2) * yStep;
            if (n == 1 || n == 14)
                points.push([x, y + leftInterp, c], [x + bottomInterp, y, c]);
            else if (n == 2 || n == 13)
                points.push([x + bottomInterp, y, c], [x + xStep, y + rightInterp, c]);
            else if (n == 4 || n == 11)
                points.push([x + topInterp, y + yStep, c], [x + xStep, y + rightInterp, c]);
            else if (n == 8 || n == 7)
                points.push([x, y + leftInterp, c], [x + topInterp, y + yStep, c]);
            else if (n == 3 || n == 12)
                points.push([x, y + leftInterp, c], [x + xStep, y + rightInterp, c]);
            else if (n == 6 || n == 9)
                points.push([x + bottomInterp, y, c], [x + topInterp, y + yStep, c]);
            else if (n == 5)
                points.push([x, y + leftInterp, c], [x + bottomInterp, y, c], [x + topInterp, y + yStep, c], [x + xStep, y + rightInterp, c]);
            else if (n == 10)
                points.push([x + bottomInterp, y, c], [x + xStep, y + rightInterp, c], [x, y + yStep / 2, c], [x, y + leftInterp, c], [x + topInterp, y + yStep, c]);
            else if (n == 0 || n == 15)
                points.push();
        }
    }
    return points;
}
const edgeTable = new Int32Array([
    0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
    0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
    0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
    0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
    0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c,
    0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
    0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac,
    0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
    0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c,
    0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
    0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc,
    0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
    0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c,
    0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
    0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc,
    0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
    0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
    0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
    0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
    0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
    0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
    0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
    0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
    0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460,
    0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
    0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0,
    0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
    0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230,
    0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
    0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190,
    0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
    0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0
]);
const triTable = new Int32Array([
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1,
    3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1,
    3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1,
    3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1,
    9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1,
    9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1,
    2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1,
    8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1,
    9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1,
    4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1,
    3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1,
    1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1,
    4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1,
    4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1,
    9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1,
    5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1,
    2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1,
    9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1,
    0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1,
    2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1,
    10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1,
    4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1,
    5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1,
    5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1,
    9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1,
    0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1,
    1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1,
    10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1,
    8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1,
    2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1,
    7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1,
    9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1,
    2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1,
    11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1,
    9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1,
    5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1,
    11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1,
    11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1,
    1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1,
    9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1,
    5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1,
    2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1,
    5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1,
    6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1,
    3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1,
    6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1,
    5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1,
    1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1,
    10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1,
    6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1,
    8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1,
    7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1,
    3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1,
    5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1,
    0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1,
    9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1,
    8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1,
    5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1,
    0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1,
    6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1,
    10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1,
    10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1,
    8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1,
    1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1,
    3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1,
    0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1,
    10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1,
    3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1,
    6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1,
    9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1,
    8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1,
    3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1,
    6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1,
    0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1,
    10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1,
    10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1,
    2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1,
    7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1,
    7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1,
    2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1,
    1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1,
    11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1,
    8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1,
    0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1,
    7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1,
    10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1,
    2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1,
    6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1,
    7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1,
    2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1,
    1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1,
    10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1,
    10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1,
    0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1,
    7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1,
    6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1,
    8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1,
    9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1,
    6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1,
    4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1,
    10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1,
    8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1,
    0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1,
    1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1,
    8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1,
    10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1,
    4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1,
    10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1,
    5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1,
    11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1,
    9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1,
    6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1,
    7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1,
    3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1,
    7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1,
    9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1,
    3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1,
    6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1,
    9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1,
    1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1,
    4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1,
    7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1,
    6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1,
    3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1,
    0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1,
    6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1,
    0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1,
    11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1,
    6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1,
    5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1,
    9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1,
    1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1,
    1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1,
    10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1,
    0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1,
    5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1,
    10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1,
    11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1,
    9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1,
    7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1,
    2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1,
    8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1,
    9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1,
    9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1,
    1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1,
    9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1,
    9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1,
    5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1,
    0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1,
    10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1,
    2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1,
    0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1,
    0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1,
    9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1,
    5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1,
    3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1,
    5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1,
    8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1,
    0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1,
    9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1,
    1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1,
    3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1,
    4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1,
    9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1,
    11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1,
    11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1,
    2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1,
    9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1,
    3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1,
    1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1,
    4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1,
    4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1,
    3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1,
    3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1,
    0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1,
    9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1,
    1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
]);
function marchingCubes(fn, axisMin, axisMax, size) {
    const points = [], values = [];
    const axisRange = axisMax - axisMin;
    for (let k = 0; k < size; k++)
        for (let j = 0; j < size; j++)
            for (let i = 0; i < size; i++) {
                const x = axisMin + axisRange * i / (size - 1), y = axisMin + axisRange * j / (size - 1), z = axisMin + axisRange * k / (size - 1);
                points.push(new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(x, y, z));
                const value = fn(x, y, z);
                values.push(value);
            }
    const size2 = size * size;
    const vlist = new Array(12);
    const vertices = [];
    const normals = [];
    const geometry = new three__WEBPACK_IMPORTED_MODULE_0__.BufferGeometry();
    const a = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
    const b = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
    const c = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
    let vertexIndex = 0;
    for (let z = 0; z < size - 1; z++)
        for (let y = 0; y < size - 1; y++)
            for (let x = 0; x < size - 1; x++) {
                const p = x + size * y + size2 * z, px = p + 1, py = p + size, pxy = py + 1, pz = p + size2, pxz = px + size2, pyz = py + size2, pxyz = pxy + size2;
                const value0 = values[p], value1 = values[px], value2 = values[py], value3 = values[pxy], value4 = values[pz], value5 = values[pxz], value6 = values[pyz], value7 = values[pxyz];
                const isolevel = 0;
                let cubeindex = 0;
                if (value0 < isolevel)
                    cubeindex |= 1;
                if (value1 < isolevel)
                    cubeindex |= 2;
                if (value2 < isolevel)
                    cubeindex |= 8;
                if (value3 < isolevel)
                    cubeindex |= 4;
                if (value4 < isolevel)
                    cubeindex |= 16;
                if (value5 < isolevel)
                    cubeindex |= 32;
                if (value6 < isolevel)
                    cubeindex |= 128;
                if (value7 < isolevel)
                    cubeindex |= 64;
                const bits = edgeTable[cubeindex];
                if (bits === 0)
                    continue;
                let mu = 0.5;
                if (bits & 1) {
                    mu = (isolevel - value0) / (value1 - value0);
                    vlist[0] = points[p].clone().lerp(points[px], mu);
                }
                if (bits & 2) {
                    mu = (isolevel - value1) / (value3 - value1);
                    vlist[1] = points[px].clone().lerp(points[pxy], mu);
                }
                if (bits & 4) {
                    mu = (isolevel - value2) / (value3 - value2);
                    vlist[2] = points[py].clone().lerp(points[pxy], mu);
                }
                if (bits & 8) {
                    mu = (isolevel - value0) / (value2 - value0);
                    vlist[3] = points[p].clone().lerp(points[py], mu);
                }
                if (bits & 16) {
                    mu = (isolevel - value4) / (value5 - value4);
                    vlist[4] = points[pz].clone().lerp(points[pxz], mu);
                }
                if (bits & 32) {
                    mu = (isolevel - value5) / (value7 - value5);
                    vlist[5] = points[pxz].clone().lerp(points[pxyz], mu);
                }
                if (bits & 64) {
                    mu = (isolevel - value6) / (value7 - value6);
                    vlist[6] = points[pyz].clone().lerp(points[pxyz], mu);
                }
                if (bits & 128) {
                    mu = (isolevel - value4) / (value6 - value4);
                    vlist[7] = points[pz].clone().lerp(points[pyz], mu);
                }
                if (bits & 256) {
                    mu = (isolevel - value0) / (value4 - value0);
                    vlist[8] = points[p].clone().lerp(points[pz], mu);
                }
                if (bits & 512) {
                    mu = (isolevel - value1) / (value5 - value1);
                    vlist[9] = points[px].clone().lerp(points[pxz], mu);
                }
                if (bits & 1024) {
                    mu = (isolevel - value3) / (value7 - value3);
                    vlist[10] = points[pxy].clone().lerp(points[pxyz], mu);
                }
                if (bits & 2048) {
                    mu = (isolevel - value2) / (value6 - value2);
                    vlist[11] = points[py].clone().lerp(points[pyz], mu);
                }
                let i = 0;
                cubeindex <<= 4;
                while (triTable[cubeindex + i] != -1) {
                    const index1 = triTable[cubeindex + i];
                    const index2 = triTable[cubeindex + i + 1];
                    const index3 = triTable[cubeindex + i + 2];
                    vertices.push(...vlist[index1].toArray());
                    vertices.push(...vlist[index2].toArray());
                    vertices.push(...vlist[index3].toArray());
                    vertexIndex += 3;
                    i += 3;
                }
            }
    geometry.setAttribute("position", new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute(new Float32Array(vertices), 3));
    geometry.computeVertexNormals();
    return geometry;
}
function intersectSurfacesImplicit(f, g, df, dg, q0, samples, step) {
    const points = [];
    let p = q0;
    while (points.length < samples) {
        const tangent = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().crossVectors(new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().fromArray(df(p.x, p.y, p.z)), new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().fromArray(dg(p.x, p.y, p.z))).normalize();
        points.push(curvePoint(f, g, df, dg, p.clone().add(tangent.multiplyScalar(step))));
        p = points[points.length - 1];
    }
    return points;
}
function curvePoint(f, g, df, dg, q0) {
    const epsilon = 0.1;
    let qk = q0, diff = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
    do {
        const dfqk = df(qk.x, qk.y, qk.z), dgqk = dg(qk.x, qk.y, qk.z), jacT = [dfqk, dgqk];
        const matrix = [[0, 0], [0, 0]];
        for (let i = 0; i < 2; ++i)
            for (let j = 0; j < 2; ++j)
                for (let k = 0; k < 3; ++k) {
                    matrix[i][j] += jacT[i][k] * jacT[j][k];
                }
        const [alpha, beta] = solve22Matrix(matrix, [
            -f(qk.x, qk.y, qk.z),
            -g(qk.x, qk.y, qk.z)
        ]);
        diff =
            new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().fromArray(dfqk).multiplyScalar(alpha).add(new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().fromArray(dgqk).multiplyScalar(beta));
        qk = qk.clone().add(diff);
    } while (diff.length() >= epsilon);
    return qk;
}
function solve22Matrix([[a, b], [c, d]], [y1, y2]) {
    return [
        (y1 * d - b * y2) / (a * d - b * c),
        (a * y2 - y1 * c) / (a * d - b * c)
    ];
}
function arrowOrient(pointX, pointY) {
    const direction = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().subVectors(pointY, pointX);
    const orientation = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();
    orientation.lookAt(pointX, pointY, new three__WEBPACK_IMPORTED_MODULE_0__.Object3D().up);
    orientation.multiply(new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1));
    const position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3((pointY.x + pointX.x) / 2, (pointY.y + pointX.y) / 2, (pointY.z + pointX.z) / 2);
    return [orientation, position];
}


/***/ }),

/***/ "./lib/svg-extrude.ts":
/*!****************************!*\
  !*** ./lib/svg-extrude.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ extrudeSvg)
/* harmony export */ });
/* harmony import */ var three_examples_jsm_loaders_SVGLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three/examples/jsm/loaders/SVGLoader */ "three");
/* harmony import */ var three_examples_jsm_loaders_SVGLoader__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three_examples_jsm_loaders_SVGLoader__WEBPACK_IMPORTED_MODULE_0__);

function extrudeSvg(path) {
    return new Promise((resolve, reject) => {
        const loader = new three_examples_jsm_loaders_SVGLoader__WEBPACK_IMPORTED_MODULE_0__.SVGLoader();
        loader.load(path, data => {
            const paths = data.paths;
            const group = new THREE.Group();
            group.scale.multiplyScalar(0.02);
            group.scale.y *= -1;
            for (const path of paths) {
                const fillColor = path.userData.style.fill;
                if (fillColor !== undefined && fillColor !== "none") {
                    const material = new THREE.MeshBasicMaterial({
                        color: new THREE.Color().setStyle(fillColor),
                        opacity: path.userData.style.fillOpacity,
                        transparent: path.userData.style.fillOpacity < 1,
                        side: THREE.DoubleSide,
                        depthWrite: false
                    });
                    const shapes = path.toShapes(true);
                    for (const shape of shapes) {
                        const geometry = new THREE.ExtrudeBufferGeometry(shape, { depth: 0.2, bevelEnabled: false });
                        const mesh = new THREE.Mesh(geometry, material);
                        group.add(mesh);
                    }
                }
                const strokeColor = path.userData.style.stroke;
                if (strokeColor !== undefined && strokeColor !== "none") {
                    const material = new THREE.MeshBasicMaterial({
                        color: new THREE.Color().setStyle(strokeColor),
                        opacity: path.userData.style.strokeOpacity,
                        transparent: path.userData.style.strokeOpacity < 1,
                        side: THREE.DoubleSide,
                        depthWrite: false
                    });
                    for (const subPath of path.subPaths) {
                        const geometry = three_examples_jsm_loaders_SVGLoader__WEBPACK_IMPORTED_MODULE_0__.SVGLoader.pointsToStroke(subPath.getPoints(), path.userData.style);
                        if (geometry) {
                            const mesh = new THREE.Mesh(geometry, material);
                            group.add(mesh);
                        }
                    }
                }
            }
            resolve(group);
        });
    });
}


/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DOMRectReadOnly": () => (/* binding */ DOMRectReadOnly)
/* harmony export */ });
/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/freeze */ "./node_modules/@juggle/resize-observer/lib/utils/freeze.js");

var DOMRectReadOnly = (function () {
    function DOMRectReadOnly(x, y, width, height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.top = this.y;
        this.left = this.x;
        this.bottom = this.top + this.height;
        this.right = this.left + this.width;
        return (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_0__.freeze)(this);
    }
    DOMRectReadOnly.prototype.toJSON = function () {
        var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;
        return { x: x, y: y, top: top, right: right, bottom: bottom, left: left, width: width, height: height };
    };
    DOMRectReadOnly.fromRect = function (rectangle) {
        return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
    };
    return DOMRectReadOnly;
}());



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObservation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObservation.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResizeObservation": () => (/* binding */ ResizeObservation)
/* harmony export */ });
/* harmony import */ var _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ResizeObserverBoxOptions */ "./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js");
/* harmony import */ var _algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./algorithms/calculateBoxSize */ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js");
/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/element */ "./node_modules/@juggle/resize-observer/lib/utils/element.js");



var skipNotifyOnElement = function (target) {
    return !(0,_utils_element__WEBPACK_IMPORTED_MODULE_2__.isSVG)(target)
        && !(0,_utils_element__WEBPACK_IMPORTED_MODULE_2__.isReplacedElement)(target)
        && getComputedStyle(target).display === 'inline';
};
var ResizeObservation = (function () {
    function ResizeObservation(target, observedBox) {
        this.target = target;
        this.observedBox = observedBox || _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.CONTENT_BOX;
        this.lastReportedSize = {
            inlineSize: 0,
            blockSize: 0
        };
    }
    ResizeObservation.prototype.isActive = function () {
        var size = (0,_algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_1__.calculateBoxSize)(this.target, this.observedBox, true);
        if (skipNotifyOnElement(this.target)) {
            this.lastReportedSize = size;
        }
        if (this.lastReportedSize.inlineSize !== size.inlineSize
            || this.lastReportedSize.blockSize !== size.blockSize) {
            return true;
        }
        return false;
    };
    return ResizeObservation;
}());



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserver.js":
/*!********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserver.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResizeObserver": () => (/* binding */ ResizeObserver)
/* harmony export */ });
/* harmony import */ var _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ResizeObserverController */ "./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js");
/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/element */ "./node_modules/@juggle/resize-observer/lib/utils/element.js");


var ResizeObserver = (function () {
    function ResizeObserver(callback) {
        if (arguments.length === 0) {
            throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
        }
        if (typeof callback !== 'function') {
            throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
        }
        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.connect(this, callback);
    }
    ResizeObserver.prototype.observe = function (target, options) {
        if (arguments.length === 0) {
            throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
        }
        if (!(0,_utils_element__WEBPACK_IMPORTED_MODULE_1__.isElement)(target)) {
            throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
        }
        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.observe(this, target, options);
    };
    ResizeObserver.prototype.unobserve = function (target) {
        if (arguments.length === 0) {
            throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
        }
        if (!(0,_utils_element__WEBPACK_IMPORTED_MODULE_1__.isElement)(target)) {
            throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
        }
        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.unobserve(this, target);
    };
    ResizeObserver.prototype.disconnect = function () {
        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.disconnect(this);
    };
    ResizeObserver.toString = function () {
        return 'function ResizeObserver () { [polyfill code] }';
    };
    return ResizeObserver;
}());



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResizeObserverBoxOptions": () => (/* binding */ ResizeObserverBoxOptions)
/* harmony export */ });
var ResizeObserverBoxOptions;
(function (ResizeObserverBoxOptions) {
    ResizeObserverBoxOptions["BORDER_BOX"] = "border-box";
    ResizeObserverBoxOptions["CONTENT_BOX"] = "content-box";
    ResizeObserverBoxOptions["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResizeObserverController": () => (/* binding */ ResizeObserverController)
/* harmony export */ });
/* harmony import */ var _utils_scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/scheduler */ "./node_modules/@juggle/resize-observer/lib/utils/scheduler.js");
/* harmony import */ var _ResizeObservation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ResizeObservation */ "./node_modules/@juggle/resize-observer/lib/ResizeObservation.js");
/* harmony import */ var _ResizeObserverDetail__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ResizeObserverDetail */ "./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js");
/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/resizeObservers */ "./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js");




var observerMap = new WeakMap();
var getObservationIndex = function (observationTargets, target) {
    for (var i = 0; i < observationTargets.length; i += 1) {
        if (observationTargets[i].target === target) {
            return i;
        }
    }
    return -1;
};
var ResizeObserverController = (function () {
    function ResizeObserverController() {
    }
    ResizeObserverController.connect = function (resizeObserver, callback) {
        var detail = new _ResizeObserverDetail__WEBPACK_IMPORTED_MODULE_2__.ResizeObserverDetail(resizeObserver, callback);
        observerMap.set(resizeObserver, detail);
    };
    ResizeObserverController.observe = function (resizeObserver, target, options) {
        var detail = observerMap.get(resizeObserver);
        var firstObservation = detail.observationTargets.length === 0;
        if (getObservationIndex(detail.observationTargets, target) < 0) {
            firstObservation && _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.push(detail);
            detail.observationTargets.push(new _ResizeObservation__WEBPACK_IMPORTED_MODULE_1__.ResizeObservation(target, options && options.box));
            (0,_utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.updateCount)(1);
            _utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.scheduler.schedule();
        }
    };
    ResizeObserverController.unobserve = function (resizeObserver, target) {
        var detail = observerMap.get(resizeObserver);
        var index = getObservationIndex(detail.observationTargets, target);
        var lastObservation = detail.observationTargets.length === 1;
        if (index >= 0) {
            lastObservation && _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.splice(_utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.indexOf(detail), 1);
            detail.observationTargets.splice(index, 1);
            (0,_utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.updateCount)(-1);
        }
    };
    ResizeObserverController.disconnect = function (resizeObserver) {
        var _this = this;
        var detail = observerMap.get(resizeObserver);
        detail.observationTargets.slice().forEach(function (ot) { return _this.unobserve(resizeObserver, ot.target); });
        detail.activeTargets.splice(0, detail.activeTargets.length);
    };
    return ResizeObserverController;
}());



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResizeObserverDetail": () => (/* binding */ ResizeObserverDetail)
/* harmony export */ });
var ResizeObserverDetail = (function () {
    function ResizeObserverDetail(resizeObserver, callback) {
        this.activeTargets = [];
        this.skippedTargets = [];
        this.observationTargets = [];
        this.observer = resizeObserver;
        this.callback = callback;
    }
    return ResizeObserverDetail;
}());



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResizeObserverEntry": () => (/* binding */ ResizeObserverEntry)
/* harmony export */ });
/* harmony import */ var _algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./algorithms/calculateBoxSize */ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js");
/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/freeze */ "./node_modules/@juggle/resize-observer/lib/utils/freeze.js");


var ResizeObserverEntry = (function () {
    function ResizeObserverEntry(target) {
        var boxes = (0,_algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_0__.calculateBoxSizes)(target);
        this.target = target;
        this.contentRect = boxes.contentRect;
        this.borderBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.borderBoxSize]);
        this.contentBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.contentBoxSize]);
        this.devicePixelContentBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.devicePixelContentBoxSize]);
    }
    return ResizeObserverEntry;
}());



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js":
/*!************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResizeObserverSize": () => (/* binding */ ResizeObserverSize)
/* harmony export */ });
/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/freeze */ "./node_modules/@juggle/resize-observer/lib/utils/freeze.js");

var ResizeObserverSize = (function () {
    function ResizeObserverSize(inlineSize, blockSize) {
        this.inlineSize = inlineSize;
        this.blockSize = blockSize;
        (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_0__.freeze)(this);
    }
    return ResizeObserverSize;
}());



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "broadcastActiveObservations": () => (/* binding */ broadcastActiveObservations)
/* harmony export */ });
/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ "./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js");
/* harmony import */ var _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverEntry */ "./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js");
/* harmony import */ var _calculateDepthForNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculateDepthForNode */ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js");
/* harmony import */ var _calculateBoxSize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./calculateBoxSize */ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js");




var broadcastActiveObservations = function () {
    var shallowestDepth = Infinity;
    var callbacks = [];
    _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.forEach(function processObserver(ro) {
        if (ro.activeTargets.length === 0) {
            return;
        }
        var entries = [];
        ro.activeTargets.forEach(function processTarget(ot) {
            var entry = new _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverEntry(ot.target);
            var targetDepth = (0,_calculateDepthForNode__WEBPACK_IMPORTED_MODULE_2__.calculateDepthForNode)(ot.target);
            entries.push(entry);
            ot.lastReportedSize = (0,_calculateBoxSize__WEBPACK_IMPORTED_MODULE_3__.calculateBoxSize)(ot.target, ot.observedBox);
            if (targetDepth < shallowestDepth) {
                shallowestDepth = targetDepth;
            }
        });
        callbacks.push(function resizeObserverCallback() {
            ro.callback.call(ro.observer, entries, ro.observer);
        });
        ro.activeTargets.splice(0, ro.activeTargets.length);
    });
    for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {
        var callback = callbacks_1[_i];
        callback();
    }
    return shallowestDepth;
};



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "calculateBoxSize": () => (/* binding */ calculateBoxSize),
/* harmony export */   "calculateBoxSizes": () => (/* binding */ calculateBoxSizes)
/* harmony export */ });
/* harmony import */ var _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ResizeObserverBoxOptions */ "./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js");
/* harmony import */ var _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverSize */ "./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js");
/* harmony import */ var _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../DOMRectReadOnly */ "./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js");
/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/element */ "./node_modules/@juggle/resize-observer/lib/utils/element.js");
/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/freeze */ "./node_modules/@juggle/resize-observer/lib/utils/freeze.js");
/* harmony import */ var _utils_global__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/global */ "./node_modules/@juggle/resize-observer/lib/utils/global.js");






var cache = new WeakMap();
var scrollRegexp = /auto|scroll/;
var verticalRegexp = /^tb|vertical/;
var IE = (/msie|trident/i).test(_utils_global__WEBPACK_IMPORTED_MODULE_5__.global.navigator && _utils_global__WEBPACK_IMPORTED_MODULE_5__.global.navigator.userAgent);
var parseDimension = function (pixel) { return parseFloat(pixel || '0'); };
var size = function (inlineSize, blockSize, switchSizes) {
    if (inlineSize === void 0) {
        inlineSize = 0;
    }
    if (blockSize === void 0) {
        blockSize = 0;
    }
    if (switchSizes === void 0) {
        switchSizes = false;
    }
    return new _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
};
var zeroBoxes = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_4__.freeze)({
    devicePixelContentBoxSize: size(),
    borderBoxSize: size(),
    contentBoxSize: size(),
    contentRect: new _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__.DOMRectReadOnly(0, 0, 0, 0)
});
var calculateBoxSizes = function (target, forceRecalculation) {
    if (forceRecalculation === void 0) {
        forceRecalculation = false;
    }
    if (cache.has(target) && !forceRecalculation) {
        return cache.get(target);
    }
    if ((0,_utils_element__WEBPACK_IMPORTED_MODULE_3__.isHidden)(target)) {
        cache.set(target, zeroBoxes);
        return zeroBoxes;
    }
    var cs = getComputedStyle(target);
    var svg = (0,_utils_element__WEBPACK_IMPORTED_MODULE_3__.isSVG)(target) && target.ownerSVGElement && target.getBBox();
    var removePadding = !IE && cs.boxSizing === 'border-box';
    var switchSizes = verticalRegexp.test(cs.writingMode || '');
    var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');
    var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');
    var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);
    var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);
    var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);
    var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);
    var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);
    var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);
    var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);
    var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);
    var horizontalPadding = paddingLeft + paddingRight;
    var verticalPadding = paddingTop + paddingBottom;
    var horizontalBorderArea = borderLeft + borderRight;
    var verticalBorderArea = borderTop + borderBottom;
    var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;
    var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;
    var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
    var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
    var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
    var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
    var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
    var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
    var boxes = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_4__.freeze)({
        devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
        borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),
        contentBoxSize: size(contentWidth, contentHeight, switchSizes),
        contentRect: new _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__.DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)
    });
    cache.set(target, boxes);
    return boxes;
};
var calculateBoxSize = function (target, observedBox, forceRecalculation) {
    var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;
    switch (observedBox) {
        case _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
            return devicePixelContentBoxSize;
        case _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.BORDER_BOX:
            return borderBoxSize;
        default:
            return contentBoxSize;
    }
};



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "calculateDepthForNode": () => (/* binding */ calculateDepthForNode)
/* harmony export */ });
/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/element */ "./node_modules/@juggle/resize-observer/lib/utils/element.js");

var calculateDepthForNode = function (node) {
    if ((0,_utils_element__WEBPACK_IMPORTED_MODULE_0__.isHidden)(node)) {
        return Infinity;
    }
    var depth = 0;
    var parent = node.parentNode;
    while (parent) {
        depth += 1;
        parent = parent.parentNode;
    }
    return depth;
};



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deliverResizeLoopError": () => (/* binding */ deliverResizeLoopError)
/* harmony export */ });
var msg = 'ResizeObserver loop completed with undelivered notifications.';
var deliverResizeLoopError = function () {
    var event;
    if (typeof ErrorEvent === 'function') {
        event = new ErrorEvent('error', {
            message: msg
        });
    }
    else {
        event = document.createEvent('Event');
        event.initEvent('error', false, false);
        event.message = msg;
    }
    window.dispatchEvent(event);
};



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gatherActiveObservationsAtDepth": () => (/* binding */ gatherActiveObservationsAtDepth)
/* harmony export */ });
/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ "./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js");
/* harmony import */ var _calculateDepthForNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calculateDepthForNode */ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js");


var gatherActiveObservationsAtDepth = function (depth) {
    _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.forEach(function processObserver(ro) {
        ro.activeTargets.splice(0, ro.activeTargets.length);
        ro.skippedTargets.splice(0, ro.skippedTargets.length);
        ro.observationTargets.forEach(function processTarget(ot) {
            if (ot.isActive()) {
                if ((0,_calculateDepthForNode__WEBPACK_IMPORTED_MODULE_1__.calculateDepthForNode)(ot.target) > depth) {
                    ro.activeTargets.push(ot);
                }
                else {
                    ro.skippedTargets.push(ot);
                }
            }
        });
    });
};



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hasActiveObservations": () => (/* binding */ hasActiveObservations)
/* harmony export */ });
/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ "./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js");

var hasActiveObservations = function () {
    return _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.some(function (ro) { return ro.activeTargets.length > 0; });
};



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hasSkippedObservations": () => (/* binding */ hasSkippedObservations)
/* harmony export */ });
/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ "./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js");

var hasSkippedObservations = function () {
    return _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.some(function (ro) { return ro.skippedTargets.length > 0; });
};



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResizeObserver": () => (/* reexport safe */ _ResizeObserver__WEBPACK_IMPORTED_MODULE_0__.ResizeObserver),
/* harmony export */   "ResizeObserverEntry": () => (/* reexport safe */ _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverEntry),
/* harmony export */   "ResizeObserverSize": () => (/* reexport safe */ _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_2__.ResizeObserverSize)
/* harmony export */ });
/* harmony import */ var _ResizeObserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ResizeObserver */ "./node_modules/@juggle/resize-observer/lib/ResizeObserver.js");
/* harmony import */ var _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverEntry */ "./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js");
/* harmony import */ var _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ResizeObserverSize */ "./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js");





/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/element.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/element.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isElement": () => (/* binding */ isElement),
/* harmony export */   "isHidden": () => (/* binding */ isHidden),
/* harmony export */   "isReplacedElement": () => (/* binding */ isReplacedElement),
/* harmony export */   "isSVG": () => (/* binding */ isSVG)
/* harmony export */ });
var isSVG = function (target) { return target instanceof SVGElement && 'getBBox' in target; };
var isHidden = function (target) {
    if (isSVG(target)) {
        var _a = target.getBBox(), width = _a.width, height = _a.height;
        return !width && !height;
    }
    var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;
    return !(offsetWidth || offsetHeight || target.getClientRects().length);
};
var isElement = function (obj) {
    var _a, _b;
    if (obj instanceof Element) {
        return true;
    }
    var scope = (_b = (_a = obj) === null || _a === void 0 ? void 0 : _a.ownerDocument) === null || _b === void 0 ? void 0 : _b.defaultView;
    return !!(scope && obj instanceof scope.Element);
};
var isReplacedElement = function (target) {
    switch (target.tagName) {
        case 'INPUT':
            if (target.type !== 'image') {
                break;
            }
        case 'VIDEO':
        case 'AUDIO':
        case 'EMBED':
        case 'OBJECT':
        case 'CANVAS':
        case 'IFRAME':
        case 'IMG':
            return true;
    }
    return false;
};



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/freeze.js":
/*!******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/freeze.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "freeze": () => (/* binding */ freeze)
/* harmony export */ });
var freeze = function (obj) { return Object.freeze(obj); };


/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/global.js":
/*!******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/global.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "global": () => (/* binding */ global)
/* harmony export */ });
var global = typeof window !== 'undefined' ? window : {};


/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/process.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/process.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "process": () => (/* binding */ process)
/* harmony export */ });
/* harmony import */ var _algorithms_hasActiveObservations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../algorithms/hasActiveObservations */ "./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js");
/* harmony import */ var _algorithms_hasSkippedObservations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../algorithms/hasSkippedObservations */ "./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js");
/* harmony import */ var _algorithms_deliverResizeLoopError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../algorithms/deliverResizeLoopError */ "./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js");
/* harmony import */ var _algorithms_broadcastActiveObservations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../algorithms/broadcastActiveObservations */ "./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js");
/* harmony import */ var _algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../algorithms/gatherActiveObservationsAtDepth */ "./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js");





var process = function () {
    var depth = 0;
    (0,_algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__.gatherActiveObservationsAtDepth)(depth);
    while ((0,_algorithms_hasActiveObservations__WEBPACK_IMPORTED_MODULE_0__.hasActiveObservations)()) {
        depth = (0,_algorithms_broadcastActiveObservations__WEBPACK_IMPORTED_MODULE_3__.broadcastActiveObservations)();
        (0,_algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__.gatherActiveObservationsAtDepth)(depth);
    }
    if ((0,_algorithms_hasSkippedObservations__WEBPACK_IMPORTED_MODULE_1__.hasSkippedObservations)()) {
        (0,_algorithms_deliverResizeLoopError__WEBPACK_IMPORTED_MODULE_2__.deliverResizeLoopError)();
    }
    return depth > 0;
};



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "queueMicroTask": () => (/* binding */ queueMicroTask)
/* harmony export */ });
var trigger;
var callbacks = [];
var notify = function () { return callbacks.splice(0).forEach(function (cb) { return cb(); }); };
var queueMicroTask = function (callback) {
    if (!trigger) {
        var toggle_1 = 0;
        var el_1 = document.createTextNode('');
        var config = { characterData: true };
        new MutationObserver(function () { return notify(); }).observe(el_1, config);
        trigger = function () { el_1.textContent = "" + (toggle_1 ? toggle_1-- : toggle_1++); };
    }
    callbacks.push(callback);
    trigger();
};



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "queueResizeObserver": () => (/* binding */ queueResizeObserver)
/* harmony export */ });
/* harmony import */ var _queueMicroTask__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queueMicroTask */ "./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js");

var queueResizeObserver = function (cb) {
    (0,_queueMicroTask__WEBPACK_IMPORTED_MODULE_0__.queueMicroTask)(function ResizeObserver() {
        requestAnimationFrame(cb);
    });
};



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resizeObservers": () => (/* binding */ resizeObservers)
/* harmony export */ });
var resizeObservers = [];



/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/scheduler.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/scheduler.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scheduler": () => (/* binding */ scheduler),
/* harmony export */   "updateCount": () => (/* binding */ updateCount)
/* harmony export */ });
/* harmony import */ var _process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./process */ "./node_modules/@juggle/resize-observer/lib/utils/process.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global */ "./node_modules/@juggle/resize-observer/lib/utils/global.js");
/* harmony import */ var _queueResizeObserver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./queueResizeObserver */ "./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js");



var watching = 0;
var isWatching = function () { return !!watching; };
var CATCH_PERIOD = 250;
var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
var events = [
    'resize',
    'load',
    'transitionend',
    'animationend',
    'animationstart',
    'animationiteration',
    'keyup',
    'keydown',
    'mouseup',
    'mousedown',
    'mouseover',
    'mouseout',
    'blur',
    'focus'
];
var time = function (timeout) {
    if (timeout === void 0) {
        timeout = 0;
    }
    return Date.now() + timeout;
};
var scheduled = false;
var Scheduler = (function () {
    function Scheduler() {
        var _this = this;
        this.stopped = true;
        this.listener = function () { return _this.schedule(); };
    }
    Scheduler.prototype.run = function (timeout) {
        var _this = this;
        if (timeout === void 0) {
            timeout = CATCH_PERIOD;
        }
        if (scheduled) {
            return;
        }
        scheduled = true;
        var until = time(timeout);
        (0,_queueResizeObserver__WEBPACK_IMPORTED_MODULE_2__.queueResizeObserver)(function () {
            var elementsHaveResized = false;
            try {
                elementsHaveResized = (0,_process__WEBPACK_IMPORTED_MODULE_0__.process)();
            }
            finally {
                scheduled = false;
                timeout = until - time();
                if (!isWatching()) {
                    return;
                }
                if (elementsHaveResized) {
                    _this.run(1000);
                }
                else if (timeout > 0) {
                    _this.run(timeout);
                }
                else {
                    _this.start();
                }
            }
        });
    };
    Scheduler.prototype.schedule = function () {
        this.stop();
        this.run();
    };
    Scheduler.prototype.observe = function () {
        var _this = this;
        var cb = function () { return _this.observer && _this.observer.observe(document.body, observerConfig); };
        document.body ? cb() : _global__WEBPACK_IMPORTED_MODULE_1__.global.addEventListener('DOMContentLoaded', cb);
    };
    Scheduler.prototype.start = function () {
        var _this = this;
        if (this.stopped) {
            this.stopped = false;
            this.observer = new MutationObserver(this.listener);
            this.observe();
            events.forEach(function (name) { return _global__WEBPACK_IMPORTED_MODULE_1__.global.addEventListener(name, _this.listener, true); });
        }
    };
    Scheduler.prototype.stop = function () {
        var _this = this;
        if (!this.stopped) {
            this.observer && this.observer.disconnect();
            events.forEach(function (name) { return _global__WEBPACK_IMPORTED_MODULE_1__.global.removeEventListener(name, _this.listener, true); });
            this.stopped = true;
        }
    };
    return Scheduler;
}());
var scheduler = new Scheduler();
var updateCount = function (n) {
    !watching && n > 0 && scheduler.start();
    watching += n;
    !watching && scheduler.stop();
};



/***/ }),

/***/ "./node_modules/@react-three/drei/core/useContextBridge.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-three/drei/core/useContextBridge.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useContextBridge": () => (/* binding */ useContextBridge)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

function useContextBridge(...contexts) {
    const cRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef([]);
    cRef.current = contexts.map(context => react__WEBPACK_IMPORTED_MODULE_0__.useContext(context));
    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({ children }) => contexts.reduceRight((acc, Context, i) => react__WEBPACK_IMPORTED_MODULE_0__.createElement(Context.Provider, {
        value: cRef.current[i],
        children: acc
    }), children), []);
}



/***/ }),

/***/ "./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Canvas": () => (/* binding */ Canvas),
/* harmony export */   "ReactThreeFiber": () => (/* binding */ threeTypes),
/* harmony export */   "_roots": () => (/* binding */ roots),
/* harmony export */   "act": () => (/* binding */ act),
/* harmony export */   "addAfterEffect": () => (/* binding */ addAfterEffect),
/* harmony export */   "addEffect": () => (/* binding */ addEffect),
/* harmony export */   "addTail": () => (/* binding */ addTail),
/* harmony export */   "advance": () => (/* binding */ advance),
/* harmony export */   "applyProps": () => (/* binding */ applyProps),
/* harmony export */   "context": () => (/* binding */ context),
/* harmony export */   "createPortal": () => (/* binding */ createPortal),
/* harmony export */   "dispose": () => (/* binding */ dispose),
/* harmony export */   "events": () => (/* binding */ createPointerEvents),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "invalidate": () => (/* binding */ invalidate),
/* harmony export */   "reconciler": () => (/* binding */ reconciler),
/* harmony export */   "render": () => (/* binding */ render),
/* harmony export */   "unmountComponentAtNode": () => (/* binding */ unmountComponentAtNode),
/* harmony export */   "useFrame": () => (/* binding */ useFrame),
/* harmony export */   "useGraph": () => (/* binding */ useGraph),
/* harmony export */   "useLoader": () => (/* binding */ useLoader),
/* harmony export */   "useStore": () => (/* binding */ useStore),
/* harmony export */   "useThree": () => (/* binding */ useThree)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zustand */ "./node_modules/zustand/esm/index.js");
/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-reconciler */ "./node_modules/react-reconciler/index.js");
/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_reconciler__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var scheduler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! scheduler */ "./node_modules/scheduler/index.js");
/* harmony import */ var use_asset__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! use-asset */ "./node_modules/use-asset/dist/index.js");
/* harmony import */ var react_merge_refs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-merge-refs */ "./node_modules/react-merge-refs/dist/react-merge-refs.esm.js");
/* harmony import */ var react_use_measure__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-use-measure */ "./node_modules/react-use-measure/dist/web.js");
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};








var threeTypes = Object.freeze({
    __proto__: null
});
const is = {
    obj: a => a === Object(a) && !is.arr(a) && typeof a !== 'function',
    fun: a => typeof a === 'function',
    str: a => typeof a === 'string',
    num: a => typeof a === 'number',
    und: a => a === void 0,
    arr: a => Array.isArray(a),
    equ(a, b) {
        if (typeof a !== typeof b || !!a !== !!b)
            return false;
        if (is.str(a) || is.num(a) || is.obj(a))
            return a === b;
        if (is.arr(a) && a == b)
            return true;
        let i;
        for (i in a)
            if (!(i in b))
                return false;
        for (i in b)
            if (a[i] !== b[i])
                return false;
        return is.und(i) ? a === b : true;
    }
};
function makeId(event) {
    return (event.eventObject || event.object).uuid + '/' + event.index + event.instanceId;
}
function releaseInternalPointerCapture(capturedMap, obj, captures, pointerId) {
    const captureData = captures.get(obj);
    if (captureData) {
        captures.delete(obj);
        if (captures.size === 0) {
            capturedMap.delete(pointerId);
            captureData.target.releasePointerCapture(pointerId);
        }
    }
}
function removeInteractivity(store, object) {
    const { internal } = store.getState();
    internal.interaction = internal.interaction.filter(o => o !== object);
    internal.initialHits = internal.initialHits.filter(o => o !== object);
    internal.hovered.forEach((value, key) => {
        if (value.eventObject === object || value.object === object) {
            internal.hovered.delete(key);
        }
    });
    internal.capturedMap.forEach((captures, pointerId) => {
        releaseInternalPointerCapture(internal.capturedMap, object, captures, pointerId);
    });
}
function createEvents(store) {
    const temp = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
    function prepareRay(event) {
        var _customOffsets$offset, _customOffsets$offset2, _customOffsets$width, _customOffsets$height;
        const state = store.getState();
        const { raycaster, mouse, camera, size } = state;
        const customOffsets = raycaster.computeOffsets == null ? void 0 : raycaster.computeOffsets(event, state);
        const offsetX = (_customOffsets$offset = customOffsets == null ? void 0 : customOffsets.offsetX) != null ? _customOffsets$offset : event.offsetX;
        const offsetY = (_customOffsets$offset2 = customOffsets == null ? void 0 : customOffsets.offsetY) != null ? _customOffsets$offset2 : event.offsetY;
        const width = (_customOffsets$width = customOffsets == null ? void 0 : customOffsets.width) != null ? _customOffsets$width : size.width;
        const height = (_customOffsets$height = customOffsets == null ? void 0 : customOffsets.height) != null ? _customOffsets$height : size.height;
        mouse.set(offsetX / width * 2 - 1, -(offsetY / height) * 2 + 1);
        raycaster.setFromCamera(mouse, camera);
    }
    function calculateDistance(event) {
        const { internal } = store.getState();
        const dx = event.offsetX - internal.initialClick[0];
        const dy = event.offsetY - internal.initialClick[1];
        return Math.round(Math.sqrt(dx * dx + dy * dy));
    }
    function filterPointerEvents(objects) {
        return objects.filter(obj => ['Move', 'Over', 'Enter', 'Out', 'Leave'].some(name => {
            var _r3f;
            return (_r3f = obj.__r3f) == null ? void 0 : _r3f.handlers['onPointer' + name];
        }));
    }
    function intersect(filter) {
        const state = store.getState();
        const { raycaster, internal } = state;
        if (!raycaster.enabled)
            return [];
        const seen = new Set();
        const intersections = [];
        const eventsObjects = filter ? filter(internal.interaction) : internal.interaction;
        let intersects = raycaster.intersectObjects(eventsObjects, true).filter(item => {
            const id = makeId(item);
            if (seen.has(id))
                return false;
            seen.add(id);
            return true;
        });
        if (raycaster.filter)
            intersects = raycaster.filter(intersects, state);
        for (const intersect of intersects) {
            let eventObject = intersect.object;
            while (eventObject) {
                var _r3f2;
                if ((_r3f2 = eventObject.__r3f) != null && _r3f2.eventCount)
                    intersections.push(Object.assign(Object.assign({}, intersect), { eventObject }));
                eventObject = eventObject.parent;
            }
        }
        return intersections;
    }
    function patchIntersects(intersections, event) {
        const { internal } = store.getState();
        if ('pointerId' in event && internal.capturedMap.has(event.pointerId)) {
            for (let captureData of internal.capturedMap.get(event.pointerId).values()) {
                intersections.push(captureData.intersection);
            }
        }
        return intersections;
    }
    function handleIntersects(intersections, event, delta, callback) {
        const { raycaster, mouse, camera, internal } = store.getState();
        if (intersections.length) {
            const unprojectedPoint = temp.set(mouse.x, mouse.y, 0).unproject(camera);
            const localState = {
                stopped: false
            };
            for (const hit of intersections) {
                const hasPointerCapture = id => {
                    var _internal$capturedMap, _internal$capturedMap2;
                    return (_internal$capturedMap = (_internal$capturedMap2 = internal.capturedMap.get(id)) == null ? void 0 : _internal$capturedMap2.has(hit.eventObject)) != null ? _internal$capturedMap : false;
                };
                const setPointerCapture = id => {
                    const captureData = {
                        intersection: hit,
                        target: event.target
                    };
                    if (internal.capturedMap.has(id)) {
                        internal.capturedMap.get(id).set(hit.eventObject, captureData);
                    }
                    else {
                        internal.capturedMap.set(id, new Map([[hit.eventObject, captureData]]));
                    }
                    event.target.setPointerCapture(id);
                };
                const releasePointerCapture = id => {
                    const captures = internal.capturedMap.get(id);
                    if (captures) {
                        releaseInternalPointerCapture(internal.capturedMap, hit.eventObject, captures, id);
                    }
                };
                let extractEventProps = {};
                for (let prop in event) {
                    let property = event[prop];
                    if (typeof property !== 'function')
                        extractEventProps[prop] = property;
                }
                let raycastEvent = Object.assign(Object.assign(Object.assign({}, hit), extractEventProps), { spaceX: mouse.x, spaceY: mouse.y, intersections, stopped: localState.stopped, delta,
                    unprojectedPoint, ray: raycaster.ray, camera: camera, stopPropagation: () => {
                        const capturesForPointer = 'pointerId' in event && internal.capturedMap.get(event.pointerId);
                        if (!capturesForPointer ||
                            capturesForPointer.has(hit.eventObject)) {
                            raycastEvent.stopped = localState.stopped = true;
                            if (internal.hovered.size && Array.from(internal.hovered.values()).find(i => i.eventObject === hit.eventObject)) {
                                const higher = intersections.slice(0, intersections.indexOf(hit));
                                cancelPointer([...higher, hit]);
                            }
                        }
                    }, target: {
                        hasPointerCapture,
                        setPointerCapture,
                        releasePointerCapture
                    }, currentTarget: {
                        hasPointerCapture,
                        setPointerCapture,
                        releasePointerCapture
                    }, sourceEvent: event, nativeEvent: event });
                callback(raycastEvent);
                if (localState.stopped === true)
                    break;
            }
        }
        return intersections;
    }
    function cancelPointer(hits) {
        const { internal } = store.getState();
        Array.from(internal.hovered.values()).forEach(hoveredObj => {
            if (!hits.length || !hits.find(hit => hit.object === hoveredObj.object && hit.index === hoveredObj.index && hit.instanceId === hoveredObj.instanceId)) {
                const eventObject = hoveredObj.eventObject;
                const instance = eventObject.__r3f;
                const handlers = instance == null ? void 0 : instance.handlers;
                internal.hovered.delete(makeId(hoveredObj));
                if (instance != null && instance.eventCount) {
                    const data = Object.assign(Object.assign({}, hoveredObj), { intersections: hits || [] });
                    handlers.onPointerOut == null ? void 0 : handlers.onPointerOut(data);
                    handlers.onPointerLeave == null ? void 0 : handlers.onPointerLeave(data);
                }
            }
        });
    }
    const handlePointer = name => {
        switch (name) {
            case 'onPointerLeave':
            case 'onPointerCancel':
                return () => cancelPointer([]);
            case 'onLostPointerCapture':
                return event => {
                    const { internal } = store.getState();
                    if ('pointerId' in event && !internal.capturedMap.has(event.pointerId)) {
                        internal.capturedMap.delete(event.pointerId);
                        cancelPointer([]);
                    }
                };
        }
        return event => {
            const { onPointerMissed, internal } = store.getState();
            prepareRay(event);
            internal.lastEvent.current = event;
            const isPointerMove = name === 'onPointerMove';
            const isClickEvent = name === 'onClick' || name === 'onContextMenu' || name === 'onDoubleClick';
            const filter = isPointerMove ? filterPointerEvents : undefined;
            const hits = patchIntersects(intersect(filter), event);
            const delta = isClickEvent ? calculateDistance(event) : 0;
            if (name === 'onPointerDown') {
                internal.initialClick = [event.offsetX, event.offsetY];
                internal.initialHits = hits.map(hit => hit.eventObject);
            }
            if (isClickEvent && !hits.length) {
                if (delta <= 2) {
                    pointerMissed(event, internal.interaction);
                    if (onPointerMissed)
                        onPointerMissed(event);
                }
            }
            if (isPointerMove)
                cancelPointer(hits);
            handleIntersects(hits, event, delta, data => {
                const eventObject = data.eventObject;
                const instance = eventObject.__r3f;
                const handlers = instance == null ? void 0 : instance.handlers;
                if (!(instance != null && instance.eventCount))
                    return;
                if (isPointerMove) {
                    if (handlers.onPointerOver || handlers.onPointerEnter || handlers.onPointerOut || handlers.onPointerLeave) {
                        const id = makeId(data);
                        const hoveredItem = internal.hovered.get(id);
                        if (!hoveredItem) {
                            internal.hovered.set(id, data);
                            handlers.onPointerOver == null ? void 0 : handlers.onPointerOver(data);
                            handlers.onPointerEnter == null ? void 0 : handlers.onPointerEnter(data);
                        }
                        else if (hoveredItem.stopped) {
                            data.stopPropagation();
                        }
                    }
                    handlers.onPointerMove == null ? void 0 : handlers.onPointerMove(data);
                }
                else {
                    const handler = handlers[name];
                    if (handler) {
                        if (!isClickEvent || internal.initialHits.includes(eventObject)) {
                            pointerMissed(event, internal.interaction.filter(object => !internal.initialHits.includes(object)));
                            handler(data);
                        }
                    }
                    else {
                        if (isClickEvent && internal.initialHits.includes(eventObject)) {
                            pointerMissed(event, internal.interaction.filter(object => !internal.initialHits.includes(object)));
                        }
                    }
                }
            });
        };
    };
    function pointerMissed(event, objects) {
        objects.forEach(object => {
            var _r3f3;
            return (_r3f3 = object.__r3f) == null ? void 0 : _r3f3.handlers.onPointerMissed == null ? void 0 : _r3f3.handlers.onPointerMissed(event);
        });
    }
    return {
        handlePointer
    };
}
const isDiffSet = def => def && !!def.memoized && !!def.changes;
const isStore = def => def && !!def.getState;
const getContainer = (container, child) => {
    var _container$__r3f$root, _container$__r3f;
    return {
        root: isStore(container) ? container : (_container$__r3f$root = (_container$__r3f = container.__r3f) == null ? void 0 : _container$__r3f.root) != null ? _container$__r3f$root : child.__r3f.root,
        container: isStore(container) ? container.getState().scene : container
    };
};
const DEFAULT = '__default';
const EMPTY = {};
let catalogue = {};
let extend = objects => void (catalogue = Object.assign(Object.assign({}, catalogue), objects));
function checkShallow(a, b) {
    if (is.arr(a) && is.equ(a, b))
        return true;
    if (a === b)
        return true;
    return false;
}
function prepare(object, state) {
    const instance = object;
    if (state != null && state.primitive || !instance.__r3f) {
        instance.__r3f = Object.assign({ root: null, memoizedProps: {}, eventCount: 0, handlers: {}, objects: [], parent: null }, state);
    }
    return object;
}
function createRenderer(roots) {
    function diffProps(instance, _a, _b, accumulative) {
        var { children: cN, key: kN, ref: rN } = _a, props = __rest(_a, ["children", "key", "ref"]);
        var _c = _b === void 0 ? {} : _b, cP = _c.children, kP = _c.key, rP = _c.ref, previous = __rest(_c, ["children", "key", "ref"]);
        if (accumulative === void 0) { accumulative = false; }
        var _instance$__r3f;
        const localState = (_instance$__r3f = instance == null ? void 0 : instance.__r3f) != null ? _instance$__r3f : {};
        const entries = Object.entries(props);
        const changes = [];
        if (accumulative) {
            const previousKeys = Object.keys(previous);
            for (let i = 0; i < previousKeys.length; i++)
                if (!props.hasOwnProperty(previousKeys[i]))
                    entries.unshift([previousKeys[i], DEFAULT + 'remove']);
        }
        entries.forEach(([key, value]) => {
            var _instance$__r3f2;
            if ((_instance$__r3f2 = instance.__r3f) != null && _instance$__r3f2.primitive && key === 'object')
                return;
            if (checkShallow(value, previous[key]))
                return;
            if (/^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/.test(key))
                return changes.push([key, value, true, []]);
            let entries = [];
            if (key.includes('-'))
                entries = key.split('-');
            changes.push([key, value, false, entries]);
        });
        const memoized = Object.assign({}, props);
        if (localState.memoizedProps && localState.memoizedProps.args)
            memoized.args = localState.memoizedProps.args;
        if (localState.memoizedProps && localState.memoizedProps.attach)
            memoized.attach = localState.memoizedProps.attach;
        return {
            accumulative,
            memoized,
            changes
        };
    }
    function applyProps(instance, data) {
        var _instance$__r3f3, _root$getState, _instance$__r3f4;
        const localState = (_instance$__r3f3 = instance == null ? void 0 : instance.__r3f) != null ? _instance$__r3f3 : {};
        const root = localState.root;
        const rootState = (_root$getState = root == null ? void 0 : root.getState == null ? void 0 : root.getState()) != null ? _root$getState : {};
        const { memoized, changes } = isDiffSet(data) ? data : diffProps(instance, data);
        const prevHandlers = localState.eventCount;
        if (instance.__r3f)
            instance.__r3f.memoizedProps = memoized;
        changes.forEach(([key, value, isEvent, keys]) => {
            var _rootState$gl;
            let currentInstance = instance;
            let targetProp = currentInstance[key];
            if (keys.length) {
                targetProp = keys.reduce((acc, key) => acc[key], instance);
                if (!(targetProp && targetProp.set)) {
                    const [name, ...reverseEntries] = keys.reverse();
                    currentInstance = reverseEntries.reverse().reduce((acc, key) => acc[key], instance);
                    key = name;
                }
            }
            if (value === DEFAULT + 'remove') {
                if (targetProp && targetProp.constructor) {
                    value = new targetProp.constructor(memoized.args);
                }
                else if (currentInstance.constructor) {
                    const defaultClassCall = new currentInstance.constructor(currentInstance.__r3f.memoizedProps.args);
                    value = defaultClassCall[targetProp];
                    if (defaultClassCall.dispose)
                        defaultClassCall.dispose();
                }
                else
                    value = 0;
            }
            const isLinear = (rootState == null ? void 0 : (_rootState$gl = rootState.gl) == null ? void 0 : _rootState$gl.outputEncoding) === three__WEBPACK_IMPORTED_MODULE_0__.LinearEncoding;
            if (isEvent) {
                if (value)
                    localState.handlers[key] = value;
                else
                    delete localState.handlers[key];
                localState.eventCount = Object.keys(localState.handlers).length;
            }
            else if (targetProp && targetProp.set && (targetProp.copy || targetProp instanceof three__WEBPACK_IMPORTED_MODULE_0__.Layers)) {
                if (Array.isArray(value)) {
                    if (targetProp.fromArray)
                        targetProp.fromArray(value);
                    else
                        targetProp.set(...value);
                }
                else if (targetProp.copy && value && value.constructor && targetProp.constructor.name === value.constructor.name)
                    targetProp.copy(value);
                else if (value !== undefined) {
                    const isColor = targetProp instanceof three__WEBPACK_IMPORTED_MODULE_0__.Color;
                    if (!isColor && targetProp.setScalar)
                        targetProp.setScalar(value);
                    else if (targetProp instanceof three__WEBPACK_IMPORTED_MODULE_0__.Layers && value instanceof three__WEBPACK_IMPORTED_MODULE_0__.Layers)
                        targetProp.mask = value.mask;
                    else
                        targetProp.set(value);
                    if (!isLinear && isColor)
                        targetProp.convertSRGBToLinear();
                }
            }
            else {
                currentInstance[key] = value;
                if (!isLinear && currentInstance[key] instanceof three__WEBPACK_IMPORTED_MODULE_0__.Texture)
                    currentInstance[key].encoding = three__WEBPACK_IMPORTED_MODULE_0__.sRGBEncoding;
            }
            invalidateInstance(instance);
        });
        if (localState.parent && rootState.internal && instance.raycast && prevHandlers !== localState.eventCount) {
            const index = rootState.internal.interaction.indexOf(instance);
            if (index > -1)
                rootState.internal.interaction.splice(index, 1);
            if (localState.eventCount)
                rootState.internal.interaction.push(instance);
        }
        if (changes.length && (_instance$__r3f4 = instance.__r3f) != null && _instance$__r3f4.parent)
            updateInstance(instance);
        return instance;
    }
    function invalidateInstance(instance) {
        var _instance$__r3f5, _instance$__r3f5$root;
        const state = (_instance$__r3f5 = instance.__r3f) == null ? void 0 : (_instance$__r3f5$root = _instance$__r3f5.root) == null ? void 0 : _instance$__r3f5$root.getState == null ? void 0 : _instance$__r3f5$root.getState();
        if (state && state.internal.frames === 0)
            state.invalidate();
    }
    function updateInstance(instance) {
        instance.onUpdate == null ? void 0 : instance.onUpdate(instance);
    }
    function createInstance(type, _a, root, hostContext, internalInstanceHandle) {
        var { args = [] } = _a, props = __rest(_a, ["args"]);
        let name = `${type[0].toUpperCase()}${type.slice(1)}`;
        let instance;
        if (!isStore(root) && internalInstanceHandle) {
            const fn = node => {
                if (!node.return)
                    return node.stateNode && node.stateNode.containerInfo;
                else
                    return fn(node.return);
            };
            root = fn(internalInstanceHandle);
        }
        if (!root || !isStore(root))
            throw `No valid root for ${name}!`;
        if (type === 'primitive') {
            if (props.object === undefined)
                throw `Primitives without 'object' are invalid!`;
            const object = props.object;
            instance = prepare(object, {
                root,
                primitive: true
            });
        }
        else {
            const target = catalogue[name] || three__WEBPACK_IMPORTED_MODULE_0__[name];
            if (!target)
                throw `${name} is not part of the THREE namespace! Did you forget to extend? See: https://github.com/pmndrs/react-three-fiber/blob/master/markdown/api.md#using-3rd-party-objects-declaratively`;
            if (!Array.isArray(args))
                throw 'The args prop must be an array!';
            instance = prepare(new target(...args), {
                root,
                memoizedProps: {
                    args: args.length === 0 ? null : args
                }
            });
        }
        if (!('attachFns' in props)) {
            if (name.endsWith('Geometry')) {
                props = Object.assign({ attach: 'geometry' }, props);
            }
            else if (name.endsWith('Material')) {
                props = Object.assign({ attach: 'material' }, props);
            }
        }
        applyProps(instance, props);
        return instance;
    }
    function appendChild(parentInstance, child) {
        let addedAsChild = false;
        if (child) {
            if (child.attachArray) {
                if (!is.arr(parentInstance[child.attachArray]))
                    parentInstance[child.attachArray] = [];
                parentInstance[child.attachArray].push(child);
            }
            else if (child.attachObject) {
                if (!is.obj(parentInstance[child.attachObject[0]]))
                    parentInstance[child.attachObject[0]] = {};
                parentInstance[child.attachObject[0]][child.attachObject[1]] = child;
            }
            else if (child.attach && !is.fun(child.attach)) {
                parentInstance[child.attach] = child;
            }
            else if (is.arr(child.attachFns)) {
                const [attachFn] = child.attachFns;
                if (is.str(attachFn) && is.fun(parentInstance[attachFn])) {
                    parentInstance[attachFn](child);
                }
                else if (is.fun(attachFn)) {
                    attachFn(child, parentInstance);
                }
            }
            else if (child.isObject3D && parentInstance.isObject3D) {
                parentInstance.add(child);
                addedAsChild = true;
            }
            if (!addedAsChild) {
                parentInstance.__r3f.objects.push(child);
            }
            if (!child.__r3f) {
                prepare(child, {});
            }
            child.__r3f.parent = parentInstance;
            updateInstance(child);
            invalidateInstance(child);
        }
    }
    function insertBefore(parentInstance, child, beforeChild) {
        let added = false;
        if (child) {
            if (child.attachArray) {
                const array = parentInstance[child.attachArray];
                if (!is.arr(array))
                    parentInstance[child.attachArray] = [];
                array.splice(array.indexOf(beforeChild), 0, child);
            }
            else if (child.attachObject || child.attach && !is.fun(child.attach)) {
                return appendChild(parentInstance, child);
            }
            else if (child.isObject3D && parentInstance.isObject3D) {
                child.parent = parentInstance;
                child.dispatchEvent({
                    type: 'added'
                });
                const restSiblings = parentInstance.children.filter(sibling => sibling !== child);
                const index = restSiblings.indexOf(beforeChild);
                parentInstance.children = [...restSiblings.slice(0, index), child, ...restSiblings.slice(index)];
                added = true;
            }
            if (!added) {
                parentInstance.__r3f.objects.push(child);
            }
            if (!child.__r3f) {
                prepare(child, {});
            }
            child.__r3f.parent = parentInstance;
            updateInstance(child);
            invalidateInstance(child);
        }
    }
    function removeRecursive(array, parent, dispose = false) {
        if (array)
            [...array].forEach(child => removeChild(parent, child, dispose));
    }
    function removeChild(parentInstance, child, dispose) {
        if (child) {
            var _parentInstance$__r3f, _child$__r3f2;
            if (child.__r3f) {
                child.__r3f.parent = null;
            }
            if ((_parentInstance$__r3f = parentInstance.__r3f) != null && _parentInstance$__r3f.objects) {
                parentInstance.__r3f.objects = parentInstance.__r3f.objects.filter(x => x !== child);
            }
            if (child.attachArray) {
                parentInstance[child.attachArray] = parentInstance[child.attachArray].filter(x => x !== child);
            }
            else if (child.attachObject) {
                delete parentInstance[child.attachObject[0]][child.attachObject[1]];
            }
            else if (child.attach && !is.fun(child.attach) && parentInstance[child.attach] === child) {
                parentInstance[child.attach] = null;
            }
            else if (is.arr(child.attachFns)) {
                const [, detachFn] = child.attachFns;
                if (is.str(detachFn) && is.fun(parentInstance[detachFn])) {
                    parentInstance[detachFn](child);
                }
                else if (is.fun(detachFn)) {
                    detachFn(child, parentInstance);
                }
            }
            else if (child.isObject3D && parentInstance.isObject3D) {
                var _child$__r3f;
                parentInstance.remove(child);
                if ((_child$__r3f = child.__r3f) != null && _child$__r3f.root) {
                    removeInteractivity(child.__r3f.root, child);
                }
            }
            const isPrimitive = (_child$__r3f2 = child.__r3f) == null ? void 0 : _child$__r3f2.primitive;
            const shouldDispose = dispose === undefined ? child.dispose !== null && !isPrimitive : dispose;
            if (!isPrimitive) {
                var _child$__r3f3;
                removeRecursive((_child$__r3f3 = child.__r3f) == null ? void 0 : _child$__r3f3.objects, child, shouldDispose);
                removeRecursive(child.children, child, shouldDispose);
            }
            if (child.__r3f) {
                delete child.__r3f.root;
                delete child.__r3f.objects;
                delete child.__r3f.handlers;
                delete child.__r3f.memoizedProps;
                if (!isPrimitive)
                    delete child.__r3f;
            }
            if (shouldDispose && child.dispose && child.type !== 'Scene') {
                (0,scheduler__WEBPACK_IMPORTED_MODULE_3__.unstable_runWithPriority)(scheduler__WEBPACK_IMPORTED_MODULE_3__.unstable_IdlePriority, () => {
                    try {
                        child.dispose();
                    }
                    catch (e) {
                    }
                });
            }
            invalidateInstance(parentInstance);
        }
    }
    function switchInstance(instance, type, newProps, fiber) {
        var _instance$__r3f6;
        const parent = (_instance$__r3f6 = instance.__r3f) == null ? void 0 : _instance$__r3f6.parent;
        if (!parent)
            return;
        const newInstance = createInstance(type, newProps, instance.__r3f.root);
        if (type !== 'primitive' && instance.children) {
            instance.children.forEach(child => appendChild(newInstance, child));
            instance.children = [];
        }
        instance.__r3f.objects.forEach(child => appendChild(newInstance, child));
        instance.__r3f.objects = [];
        removeChild(parent, instance);
        appendChild(parent, newInstance);
        if (newInstance.raycast && newInstance.__r3f.eventCount) {
            const rootState = newInstance.__r3f.root.getState();
            rootState.internal.interaction.push(newInstance);
        }
        [fiber, fiber.alternate].forEach(fiber => {
            if (fiber !== null) {
                fiber.stateNode = newInstance;
                if (fiber.ref) {
                    if (typeof fiber.ref === 'function')
                        fiber.ref(newInstance);
                    else
                        fiber.ref.current = newInstance;
                }
            }
        });
    }
    const reconciler = react_reconciler__WEBPACK_IMPORTED_MODULE_2___default()({
        now: scheduler__WEBPACK_IMPORTED_MODULE_3__.unstable_now,
        createInstance,
        removeChild,
        appendChild,
        appendInitialChild: appendChild,
        insertBefore,
        warnsIfNotActing: true,
        supportsMutation: true,
        isPrimaryRenderer: false,
        scheduleTimeout: is.fun(setTimeout) ? setTimeout : undefined,
        cancelTimeout: is.fun(clearTimeout) ? clearTimeout : undefined,
        setTimeout: is.fun(setTimeout) ? setTimeout : undefined,
        clearTimeout: is.fun(clearTimeout) ? clearTimeout : undefined,
        noTimeout: -1,
        appendChildToContainer: (parentInstance, child) => {
            const { container, root } = getContainer(parentInstance, child);
            container.__r3f.root = root;
            appendChild(container, child);
        },
        removeChildFromContainer: (parentInstance, child) => removeChild(getContainer(parentInstance, child).container, child),
        insertInContainerBefore: (parentInstance, child, beforeChild) => insertBefore(getContainer(parentInstance, child).container, child, beforeChild),
        prepareUpdate(instance, type, oldProps, newProps) {
            if (instance.__r3f.primitive && newProps.object && newProps.object !== instance)
                return [true];
            else {
                const { args: argsNew = [], children: cN } = newProps, restNew = __rest(newProps, ["args", "children"]);
                const { args: argsOld = [], children: cO } = oldProps, restOld = __rest(oldProps, ["args", "children"]);
                if (!Array.isArray(argsNew))
                    throw 'The args prop must be an array!';
                if (argsNew.some((value, index) => value !== argsOld[index]))
                    return [true];
                const diff = diffProps(instance, restNew, restOld, true);
                if (diff.changes.length)
                    return [false, diff];
                if (instance.attach && typeof instance.attach !== 'function') {
                    const localState = instance.__r3f;
                    const parent = localState.parent;
                    if (parent && parent[instance.attach] !== instance) {
                        appendChild(parent, instance);
                    }
                }
                return null;
            }
        },
        commitUpdate(instance, [reconstruct, diff], type, oldProps, newProps, fiber) {
            if (reconstruct)
                switchInstance(instance, type, newProps, fiber);
            else
                applyProps(instance, diff);
        },
        hideInstance(instance) {
            if (instance.isObject3D) {
                instance.visible = false;
                invalidateInstance(instance);
            }
        },
        unhideInstance(instance, props) {
            if (instance.isObject3D && props.visible == null || props.visible) {
                instance.visible = true;
                invalidateInstance(instance);
            }
        },
        hideTextInstance() {
            throw new Error('Text is not allowed in the R3F tree.');
        },
        getPublicInstance(instance) {
            return instance;
        },
        getRootHostContext(rootContainer) {
            return EMPTY;
        },
        getChildHostContext(parentHostContext) {
            return parentHostContext;
        },
        createTextInstance() { },
        finalizeInitialChildren(instance) {
            var _instance$__r3f7;
            const localState = (_instance$__r3f7 = instance == null ? void 0 : instance.__r3f) != null ? _instance$__r3f7 : {};
            return !!localState.handlers;
        },
        commitMount(instance) {
            var _instance$__r3f8;
            const localState = (_instance$__r3f8 = instance == null ? void 0 : instance.__r3f) != null ? _instance$__r3f8 : {};
            if (instance.raycast && localState.handlers && localState.eventCount)
                instance.__r3f.root.getState().internal.interaction.push(instance);
        },
        shouldDeprioritizeSubtree() {
            return false;
        },
        prepareForCommit() {
            return null;
        },
        preparePortalMount(containerInfo) {
            prepare(containerInfo);
        },
        resetAfterCommit() {
        },
        shouldSetTextContent() {
            return false;
        },
        clearContainer() {
            return false;
        }
    });
    return {
        reconciler,
        applyProps
    };
}
const isRenderer = def => !!(def != null && def.render);
const isOrthographicCamera = def => def && def.isOrthographicCamera;
function calculateDpr(dpr) {
    return Array.isArray(dpr) ? Math.min(Math.max(dpr[0], window.devicePixelRatio), dpr[1]) : dpr;
}
const context = react__WEBPACK_IMPORTED_MODULE_1__.createContext(null);
const createStore = (applyProps, invalidate, advance, props) => {
    const { gl, size, shadows = false, linear = false, flat = false, vr = false, orthographic = false, frameloop = 'always', dpr = 1, performance, clock = new three__WEBPACK_IMPORTED_MODULE_0__.Clock(), raycaster: raycastOptions, camera: cameraOptions, onPointerMissed } = props;
    if (shadows) {
        gl.shadowMap.enabled = true;
        if (typeof shadows === 'object')
            Object.assign(gl.shadowMap, shadows);
        else
            gl.shadowMap.type = three__WEBPACK_IMPORTED_MODULE_0__.PCFSoftShadowMap;
    }
    if (linear)
        gl.outputEncoding = three__WEBPACK_IMPORTED_MODULE_0__.LinearEncoding;
    if (flat)
        gl.toneMapping = three__WEBPACK_IMPORTED_MODULE_0__.NoToneMapping;
    if (frameloop === 'never') {
        clock.stop();
        clock.elapsedTime = 0;
    }
    const rootState = (0,zustand__WEBPACK_IMPORTED_MODULE_5__["default"])((set, get) => {
        const raycaster = new three__WEBPACK_IMPORTED_MODULE_0__.Raycaster();
        const _a = raycastOptions || {}, { params } = _a, options = __rest(_a, ["params"]);
        applyProps(raycaster, Object.assign(Object.assign({ enabled: true }, options), { params: Object.assign(Object.assign({}, raycaster.params), params) }));
        const isCamera = cameraOptions instanceof three__WEBPACK_IMPORTED_MODULE_0__.Camera;
        const camera = isCamera ? cameraOptions : orthographic ? new three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera(0, 0, 0, 0, 0.1, 1000) : new three__WEBPACK_IMPORTED_MODULE_0__.PerspectiveCamera(75, 0, 0.1, 1000);
        if (!isCamera) {
            camera.position.z = 5;
            if (cameraOptions)
                applyProps(camera, cameraOptions);
            if (!(cameraOptions != null && cameraOptions.rotation))
                camera.lookAt(0, 0, 0);
        }
        const initialDpr = calculateDpr(dpr);
        const position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
        const defaultTarget = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
        const tempTarget = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
        function getCurrentViewport(camera = get().camera, target = defaultTarget, size = get().size) {
            const { width, height } = size;
            const aspect = width / height;
            if (target instanceof three__WEBPACK_IMPORTED_MODULE_0__.Vector3)
                tempTarget.copy(target);
            else
                tempTarget.set(...target);
            const distance = camera.getWorldPosition(position).distanceTo(tempTarget);
            if (isOrthographicCamera(camera)) {
                return {
                    width: width / camera.zoom,
                    height: height / camera.zoom,
                    factor: 1,
                    distance,
                    aspect
                };
            }
            else {
                const fov = camera.fov * Math.PI / 180;
                const h = 2 * Math.tan(fov / 2) * distance;
                const w = h * (width / height);
                return {
                    width: w,
                    height: h,
                    factor: width / w,
                    distance,
                    aspect
                };
            }
        }
        let performanceTimeout = undefined;
        const setPerformanceCurrent = current => set(state => ({
            performance: Object.assign(Object.assign({}, state.performance), { current })
        }));
        return {
            gl,
            set,
            get,
            invalidate: () => invalidate(get()),
            advance: (timestamp, runGlobalEffects) => advance(timestamp, runGlobalEffects, get()),
            linear,
            flat,
            scene: prepare(new three__WEBPACK_IMPORTED_MODULE_0__.Scene()),
            camera,
            controls: null,
            raycaster,
            clock,
            mouse: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(),
            vr,
            frameloop,
            onPointerMissed,
            performance: Object.assign(Object.assign({ current: 1, min: 0.5, max: 1, debounce: 200 }, performance), { regress: () => {
                    const state = get();
                    if (performanceTimeout)
                        clearTimeout(performanceTimeout);
                    if (state.performance.current !== state.performance.min)
                        setPerformanceCurrent(state.performance.min);
                    performanceTimeout = setTimeout(() => setPerformanceCurrent(get().performance.max), state.performance.debounce);
                } }),
            size: {
                width: 0,
                height: 0
            },
            viewport: {
                initialDpr,
                dpr: initialDpr,
                width: 0,
                height: 0,
                aspect: 0,
                distance: 0,
                factor: 0,
                getCurrentViewport
            },
            setSize: (width, height) => {
                const size = {
                    width,
                    height
                };
                set(state => ({
                    size,
                    viewport: Object.assign(Object.assign({}, state.viewport), getCurrentViewport(camera, defaultTarget, size))
                }));
            },
            setDpr: dpr => set(state => ({
                viewport: Object.assign(Object.assign({}, state.viewport), { dpr: calculateDpr(dpr) })
            })),
            setFrameloop: (frameloop = 'always') => set(() => ({
                frameloop
            })),
            events: {
                connected: false
            },
            internal: {
                active: false,
                priority: 0,
                frames: 0,
                lastProps: props,
                lastEvent: react__WEBPACK_IMPORTED_MODULE_1__.createRef(),
                interaction: [],
                hovered: new Map(),
                subscribers: [],
                initialClick: [0, 0],
                initialHits: [],
                capturedMap: new Map(),
                subscribe: (ref, priority = 0) => {
                    set(({ internal }) => ({
                        internal: Object.assign(Object.assign({}, internal), { priority: internal.priority + (priority > 0 ? 1 : 0), subscribers: [...internal.subscribers, {
                                    ref,
                                    priority
                                }].sort((a, b) => a.priority - b.priority) })
                    }));
                    return () => {
                        set(({ internal }) => ({
                            internal: Object.assign(Object.assign({}, internal), { priority: internal.priority - (priority > 0 ? 1 : 0), subscribers: internal.subscribers.filter(s => s.ref !== ref) })
                        }));
                    };
                }
            }
        };
    });
    const state = rootState.getState();
    let oldSize = state.size;
    let oldDpr = state.viewport.dpr;
    rootState.subscribe(() => {
        const { camera, size, viewport, internal } = rootState.getState();
        if (size !== oldSize || viewport.dpr !== oldDpr) {
            if (!camera.manual && !(internal.lastProps.camera instanceof three__WEBPACK_IMPORTED_MODULE_0__.Camera)) {
                if (isOrthographicCamera(camera)) {
                    camera.left = size.width / -2;
                    camera.right = size.width / 2;
                    camera.top = size.height / 2;
                    camera.bottom = size.height / -2;
                }
                else {
                    camera.aspect = size.width / size.height;
                }
                camera.updateProjectionMatrix();
                camera.updateMatrixWorld();
            }
            gl.setPixelRatio(viewport.dpr);
            gl.setSize(size.width, size.height);
            oldSize = size;
            oldDpr = viewport.dpr;
        }
    });
    if (size)
        state.setSize(size.width, size.height);
    rootState.subscribe(state => invalidate(state));
    return rootState;
};
function createSubs(callback, subs) {
    const index = subs.length;
    subs.push(callback);
    return () => void subs.splice(index, 1);
}
let i;
let globalEffects = [];
let globalAfterEffects = [];
let globalTailEffects = [];
const addEffect = callback => createSubs(callback, globalEffects);
const addAfterEffect = callback => createSubs(callback, globalAfterEffects);
const addTail = callback => createSubs(callback, globalTailEffects);
function run(effects, timestamp) {
    for (i = 0; i < effects.length; i++)
        effects[i](timestamp);
}
function render$1(timestamp, state) {
    let delta = state.clock.getDelta();
    if (state.frameloop === 'never' && typeof timestamp === 'number') {
        delta = timestamp - state.clock.elapsedTime;
        state.clock.oldTime = state.clock.elapsedTime;
        state.clock.elapsedTime = timestamp;
    }
    for (i = 0; i < state.internal.subscribers.length; i++)
        state.internal.subscribers[i].ref.current(state, delta);
    if (!state.internal.priority && state.gl.render)
        state.gl.render(state.scene, state.camera);
    state.internal.frames = Math.max(0, state.internal.frames - 1);
    return state.frameloop === 'always' ? 1 : state.internal.frames;
}
function createLoop(roots) {
    let running = false;
    let repeat;
    function loop(timestamp) {
        running = true;
        repeat = 0;
        run(globalEffects, timestamp);
        roots.forEach(root => {
            const state = root.store.getState();
            if (state.internal.active && (state.frameloop === 'always' || state.internal.frames > 0))
                repeat += render$1(timestamp, state);
        });
        run(globalAfterEffects, timestamp);
        if (repeat > 0)
            return requestAnimationFrame(loop);
        else
            run(globalTailEffects, timestamp);
        running = false;
    }
    function invalidate(state) {
        if (!state)
            return roots.forEach(root => invalidate(root.store.getState()));
        if (state.vr || !state.internal.active || state.frameloop === 'never')
            return;
        state.internal.frames = Math.min(60, state.internal.frames + 1);
        if (!running) {
            running = true;
            requestAnimationFrame(loop);
        }
    }
    function advance(timestamp, runGlobalEffects = true, state) {
        if (runGlobalEffects)
            run(globalEffects, timestamp);
        if (!state)
            roots.forEach(root => render$1(timestamp, root.store.getState()));
        else
            render$1(timestamp, state);
        if (runGlobalEffects)
            run(globalAfterEffects, timestamp);
    }
    return {
        loop,
        invalidate,
        advance
    };
}
function createPointerEvents(store) {
    const { handlePointer } = createEvents(store);
    const names = {
        onClick: ['click', false],
        onContextMenu: ['contextmenu', false],
        onDoubleClick: ['dblclick', false],
        onWheel: ['wheel', true],
        onPointerDown: ['pointerdown', true],
        onPointerUp: ['pointerup', true],
        onPointerLeave: ['pointerleave', true],
        onPointerMove: ['pointermove', true],
        onPointerCancel: ['pointercancel', true],
        onLostPointerCapture: ['lostpointercapture', true]
    };
    return {
        connected: false,
        handlers: Object.keys(names).reduce((acc, key) => (Object.assign(Object.assign({}, acc), { [key]: handlePointer(key) })), {}),
        connect: target => {
            var _events$handlers;
            const { set, events } = store.getState();
            events.disconnect == null ? void 0 : events.disconnect();
            set(state => ({
                events: Object.assign(Object.assign({}, state.events), { connected: target })
            }));
            Object.entries((_events$handlers = events == null ? void 0 : events.handlers) != null ? _events$handlers : []).forEach(([name, event]) => {
                const [eventName, passive] = names[name];
                target.addEventListener(eventName, event, {
                    passive
                });
            });
        },
        disconnect: () => {
            const { set, events } = store.getState();
            if (events.connected) {
                var _events$handlers2;
                Object.entries((_events$handlers2 = events.handlers) != null ? _events$handlers2 : []).forEach(([name, event]) => {
                    if (events && events.connected instanceof HTMLElement) {
                        const [eventName] = names[name];
                        events.connected.removeEventListener(eventName, event);
                    }
                });
                set(state => ({
                    events: Object.assign(Object.assign({}, state.events), { connected: false })
                }));
            }
        }
    };
}
const useIsomorphicLayoutEffect = typeof window !== 'undefined' ? react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_1__.useEffect;
function Block({ set }) {
    useIsomorphicLayoutEffect(() => {
        set(new Promise(() => null));
        return () => set(false);
    }, []);
    return null;
}
class ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_1__.Component {
    constructor(...args) {
        super(...args);
        this.state = {
            error: false
        };
    }
    componentDidCatch(error) {
        this.props.set(error);
    }
    render() {
        return this.state.error ? null : this.props.children;
    }
}
ErrorBoundary.getDerivedStateFromError = () => ({
    error: true
});
const Canvas = react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function Canvas(_a, forwardedRef) {
    var { children, fallback, tabIndex, resize, id, style, className, events } = _a, props = __rest(_a, ["children", "fallback", "tabIndex", "resize", "id", "style", "className", "events"]);
    const [containerRef, { width, height }] = (0,react_use_measure__WEBPACK_IMPORTED_MODULE_6__["default"])(Object.assign({ scroll: true, debounce: {
            scroll: 50,
            resize: 0
        } }, resize));
    const canvasRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);
    const [block, setBlock] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);
    const [error, setError] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);
    if (block)
        throw block;
    if (error)
        throw error;
    useIsomorphicLayoutEffect(() => {
        if (width > 0 && height > 0) {
            render(react__WEBPACK_IMPORTED_MODULE_1__.createElement(ErrorBoundary, {
                set: setError
            }, react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Suspense, {
                fallback: react__WEBPACK_IMPORTED_MODULE_1__.createElement(Block, {
                    set: setBlock
                })
            }, children)), canvasRef.current, Object.assign(Object.assign({}, props), { size: {
                    width,
                    height
                }, events: events || createPointerEvents }));
        }
    }, [width, height, children]);
    useIsomorphicLayoutEffect(() => {
        const container = canvasRef.current;
        return () => unmountComponentAtNode(container);
    }, []);
    return react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", {
        ref: containerRef,
        id: id,
        className: className,
        tabIndex: tabIndex,
        style: Object.assign({ position: 'relative', width: '100%', height: '100%', overflow: 'hidden' }, style)
    }, react__WEBPACK_IMPORTED_MODULE_1__.createElement("canvas", {
        ref: (0,react_merge_refs__WEBPACK_IMPORTED_MODULE_4__["default"])([canvasRef, forwardedRef]),
        style: {
            display: 'block'
        }
    }, fallback));
});
function useStore() {
    const store = react__WEBPACK_IMPORTED_MODULE_1__.useContext(context);
    if (!store)
        throw `R3F hooks can only be used within the Canvas component!`;
    return store;
}
function useThree(selector = state => state, equalityFn) {
    return useStore()(selector, equalityFn);
}
function useFrame(callback, renderPriority = 0) {
    const subscribe = useStore().getState().internal.subscribe;
    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(callback);
    react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect(() => void (ref.current = callback), [callback]);
    react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect(() => subscribe(ref, renderPriority), [renderPriority, subscribe]);
    return null;
}
function buildGraph(object) {
    const data = {
        nodes: {},
        materials: {}
    };
    if (object) {
        object.traverse(obj => {
            if (obj.name) {
                data.nodes[obj.name] = obj;
            }
            if (obj.material && !data.materials[obj.material.name]) {
                data.materials[obj.material.name] = obj.material;
            }
        });
    }
    return data;
}
function useGraph(object) {
    return react__WEBPACK_IMPORTED_MODULE_1__.useMemo(() => buildGraph(object), [object]);
}
function loadingFn(extensions, onProgress) {
    return function (Proto, ...input) {
        const loader = new Proto();
        if (extensions)
            extensions(loader);
        return Promise.all(input.map(input => new Promise((res, reject) => loader.load(input, data => {
            if (data.scene)
                Object.assign(data, buildGraph(data.scene));
            res(data);
        }, onProgress, error => reject(`Could not load ${input}: ${error.message}`)))));
    };
}
function useLoader(Proto, input, extensions, onProgress) {
    const keys = Array.isArray(input) ? input : [input];
    const results = (0,use_asset__WEBPACK_IMPORTED_MODULE_7__.useAsset)(loadingFn(extensions, onProgress), Proto, ...keys);
    return Array.isArray(input) ? results : results[0];
}
useLoader.preload = function (Proto, input, extensions) {
    const keys = Array.isArray(input) ? input : [input];
    return use_asset__WEBPACK_IMPORTED_MODULE_7__.useAsset.preload(loadingFn(extensions), Proto, ...keys);
};
useLoader.clear = function (Proto, input) {
    const keys = Array.isArray(input) ? input : [input];
    return use_asset__WEBPACK_IMPORTED_MODULE_7__.useAsset.clear(Proto, ...keys);
};
const roots = new Map();
const modes = ['legacy', 'blocking', 'concurrent'];
const { invalidate, advance } = createLoop(roots);
const { reconciler, applyProps } = createRenderer();
const createRendererInstance = (gl, canvas) => {
    const customRenderer = typeof gl === 'function' ? gl(canvas) : gl;
    if (isRenderer(customRenderer))
        return customRenderer;
    const renderer = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderer(Object.assign({ powerPreference: 'high-performance', canvas: canvas, antialias: true, alpha: true }, gl));
    renderer.outputEncoding = three__WEBPACK_IMPORTED_MODULE_0__.sRGBEncoding;
    renderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_0__.ACESFilmicToneMapping;
    if (gl)
        applyProps(renderer, gl);
    return renderer;
};
function render(element, canvas, _a = {}) {
    var { gl, size, mode = modes[1], events, onCreated } = _a, props = __rest(_a, ["gl", "size", "mode", "events", "onCreated"]);
    var _store;
    if (!size) {
        var _canvas$parentElement, _canvas$parentElement2, _canvas$parentElement3, _canvas$parentElement4;
        size = {
            width: (_canvas$parentElement = (_canvas$parentElement2 = canvas.parentElement) == null ? void 0 : _canvas$parentElement2.clientWidth) != null ? _canvas$parentElement : 0,
            height: (_canvas$parentElement3 = (_canvas$parentElement4 = canvas.parentElement) == null ? void 0 : _canvas$parentElement4.clientHeight) != null ? _canvas$parentElement3 : 0
        };
    }
    let root = roots.get(canvas);
    let fiber = root == null ? void 0 : root.fiber;
    let store = root == null ? void 0 : root.store;
    let state = (_store = store) == null ? void 0 : _store.getState();
    if (fiber && state) {
        if (props.dpr !== undefined && !is.equ(state.viewport.dpr, calculateDpr(props.dpr)))
            state.setDpr(props.dpr);
        if (state.size.width !== size.width || state.size.height !== size.height)
            state.setSize(size.width, size.height);
        if (state.frameloop !== props.frameloop)
            state.setFrameloop(props.frameloop);
        const linearChanged = props.linear !== state.internal.lastProps.linear;
        if (linearChanged) {
            unmountComponentAtNode(canvas);
            fiber = undefined;
        }
    }
    if (!fiber) {
        const glRenderer = createRendererInstance(gl, canvas);
        if (props.vr) {
            glRenderer.xr.enabled = true;
            glRenderer.setAnimationLoop(timestamp => advance(timestamp, true));
        }
        store = createStore(applyProps, invalidate, advance, Object.assign({ gl: glRenderer, size }, props));
        const state = store.getState();
        fiber = reconciler.createContainer(store, modes.indexOf(mode), false, null);
        roots.set(canvas, {
            fiber,
            store
        });
        if (events)
            state.set({
                events: events(store)
            });
    }
    if (store && fiber) {
        reconciler.updateContainer(react__WEBPACK_IMPORTED_MODULE_1__.createElement(Provider, {
            store: store,
            element: element,
            onCreated: onCreated,
            target: canvas
        }), fiber, null, () => undefined);
        return store;
    }
    else {
        throw 'Error creating root!';
    }
}
function Provider({ store, element, onCreated, target }) {
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(() => {
        const state = store.getState();
        state.set(state => ({
            internal: Object.assign(Object.assign({}, state.internal), { active: true })
        }));
        state.events.connect == null ? void 0 : state.events.connect(target);
        if (onCreated)
            onCreated(state);
    }, []);
    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(context.Provider, {
        value: store
    }, element);
}
function unmountComponentAtNode(canvas, callback) {
    const root = roots.get(canvas);
    const fiber = root == null ? void 0 : root.fiber;
    if (fiber) {
        const state = root == null ? void 0 : root.store.getState();
        if (state)
            state.internal.active = false;
        reconciler.updateContainer(null, fiber, null, () => {
            if (state) {
                setTimeout(() => {
                    var _state$gl, _state$gl$renderLists, _state$gl2;
                    state.events.disconnect == null ? void 0 : state.events.disconnect();
                    (_state$gl = state.gl) == null ? void 0 : (_state$gl$renderLists = _state$gl.renderLists) == null ? void 0 : _state$gl$renderLists.dispose == null ? void 0 : _state$gl$renderLists.dispose();
                    (_state$gl2 = state.gl) == null ? void 0 : _state$gl2.forceContextLoss == null ? void 0 : _state$gl2.forceContextLoss();
                    dispose(state);
                    roots.delete(canvas);
                    if (callback)
                        callback(canvas);
                }, 500);
            }
        });
    }
}
function dispose(obj) {
    if (obj.dispose && obj.type !== 'Scene')
        obj.dispose();
    for (const p in obj) {
        var _dispose, _ref;
        (_dispose = (_ref = p).dispose) == null ? void 0 : _dispose.call(_ref);
        delete obj[p];
    }
}
const act = reconciler.act;
function createPortal(children, container) {
    return reconciler.createPortal(children, container, null, null);
}
reconciler.injectIntoDevTools({
    bundleType:  false ? 0 : 1,
    rendererPackageName: '@react-three/fiber',
    version: '17.0.2'
});



/***/ }),

/***/ "./node_modules/debounce/index.js":
/*!****************************************!*\
  !*** ./node_modules/debounce/index.js ***!
  \****************************************/
/***/ ((module) => {


function debounce(func, wait, immediate) {
    var timeout, args, context, timestamp, result;
    if (null == wait)
        wait = 100;
    function later() {
        var last = Date.now() - timestamp;
        if (last < wait && last >= 0) {
            timeout = setTimeout(later, wait - last);
        }
        else {
            timeout = null;
            if (!immediate) {
                result = func.apply(context, args);
                context = args = null;
            }
        }
    }
    ;
    var debounced = function () {
        context = this;
        args = arguments;
        timestamp = Date.now();
        var callNow = immediate && !timeout;
        if (!timeout)
            timeout = setTimeout(later, wait);
        if (callNow) {
            result = func.apply(context, args);
            context = args = null;
        }
        return result;
    };
    debounced.clear = function () {
        if (timeout) {
            clearTimeout(timeout);
            timeout = null;
        }
    };
    debounced.flush = function () {
        if (timeout) {
            result = func.apply(context, args);
            context = args = null;
            clearTimeout(timeout);
            timeout = null;
        }
    };
    return debounced;
}
;
debounce.debounce = debounce;
module.exports = debounce;


/***/ }),

/***/ "./node_modules/fast-deep-equal/index.js":
/*!***********************************************!*\
  !*** ./node_modules/fast-deep-equal/index.js ***!
  \***********************************************/
/***/ ((module) => {


module.exports = function equal(a, b) {
    if (a === b)
        return true;
    if (a && b && typeof a == 'object' && typeof b == 'object') {
        if (a.constructor !== b.constructor)
            return false;
        var length, i, keys;
        if (Array.isArray(a)) {
            length = a.length;
            if (length != b.length)
                return false;
            for (i = length; i-- !== 0;)
                if (!equal(a[i], b[i]))
                    return false;
            return true;
        }
        if (a.constructor === RegExp)
            return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf)
            return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString)
            return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length)
            return false;
        for (i = length; i-- !== 0;)
            if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
                return false;
        for (i = length; i-- !== 0;) {
            var key = keys[i];
            if (!equal(a[key], b[key]))
                return false;
        }
        return true;
    }
    return a !== a && b !== b;
};


/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/***/ ((module) => {


var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) {
        throw new TypeError('Object.assign cannot be called with null or undefined');
    }
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) {
            return false;
        }
        var test1 = new String('abc');
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') {
            return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
            test2['_' + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') {
            return false;
        }
        var test3 = {};
        'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join('') !==
            'abcdefghijklmnopqrst') {
            return false;
        }
        return true;
    }
    catch (err) {
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
                to[key] = from[key];
            }
        }
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
                if (propIsEnumerable.call(from, symbols[i])) {
                    to[symbols[i]] = from[symbols[i]];
                }
            }
        }
    }
    return to;
};


/***/ }),

/***/ "./node_modules/react-merge-refs/dist/react-merge-refs.esm.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-merge-refs/dist/react-merge-refs.esm.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function mergeRefs(refs) {
    return function (value) {
        refs.forEach(function (ref) {
            if (typeof ref === "function") {
                ref(value);
            }
            else if (ref != null) {
                ref.current = value;
            }
        });
    };
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mergeRefs);


/***/ }),

/***/ "./node_modules/react-reconciler/cjs/react-reconciler.development.js":
/*!***************************************************************************!*\
  !*** ./node_modules/react-reconciler/cjs/react-reconciler.development.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);

if (true) {
    module.exports = function $$$reconciler($$$hostConfig) {
        var exports = {};
        'use strict';
        var React = __webpack_require__(/*! react */ "react");
        var _assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");
        var Scheduler = __webpack_require__(/*! scheduler */ "./node_modules/scheduler/index.js");
        var tracing = __webpack_require__(/*! scheduler/tracing */ "./node_modules/scheduler/tracing.js");
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn(format) {
            {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    args[_key - 1] = arguments[_key];
                }
                printWarning('warn', format, args);
            }
        }
        function error(format) {
            {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                    args[_key2 - 1] = arguments[_key2];
                }
                printWarning('error', format, args);
            }
        }
        function printWarning(level, format, args) {
            {
                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame.getStackAddendum();
                if (stack !== '') {
                    format += '%s';
                    args = args.concat([stack]);
                }
                var argsWithFormat = args.map(function (item) {
                    return '' + item;
                });
                argsWithFormat.unshift('Warning: ' + format);
                Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var FundamentalComponent = 20;
        var ScopeComponent = 21;
        var Block = 22;
        var OffscreenComponent = 23;
        var LegacyHiddenComponent = 24;
        function get(key) {
            return key._reactInternals;
        }
        function set(key, value) {
            key._reactInternals = value;
        }
        var REACT_ELEMENT_TYPE = 0xeac7;
        var REACT_PORTAL_TYPE = 0xeaca;
        var REACT_FRAGMENT_TYPE = 0xeacb;
        var REACT_STRICT_MODE_TYPE = 0xeacc;
        var REACT_PROFILER_TYPE = 0xead2;
        var REACT_PROVIDER_TYPE = 0xeacd;
        var REACT_CONTEXT_TYPE = 0xeace;
        var REACT_FORWARD_REF_TYPE = 0xead0;
        var REACT_SUSPENSE_TYPE = 0xead1;
        var REACT_SUSPENSE_LIST_TYPE = 0xead8;
        var REACT_MEMO_TYPE = 0xead3;
        var REACT_LAZY_TYPE = 0xead4;
        var REACT_BLOCK_TYPE = 0xead9;
        var REACT_SERVER_BLOCK_TYPE = 0xeada;
        var REACT_FUNDAMENTAL_TYPE = 0xead5;
        var REACT_SCOPE_TYPE = 0xead7;
        var REACT_OPAQUE_ID_TYPE = 0xeae0;
        var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
        var REACT_OFFSCREEN_TYPE = 0xeae2;
        var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;
        if (typeof Symbol === 'function' && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor('react.element');
            REACT_PORTAL_TYPE = symbolFor('react.portal');
            REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
            REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
            REACT_PROFILER_TYPE = symbolFor('react.profiler');
            REACT_PROVIDER_TYPE = symbolFor('react.provider');
            REACT_CONTEXT_TYPE = symbolFor('react.context');
            REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
            REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
            REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
            REACT_MEMO_TYPE = symbolFor('react.memo');
            REACT_LAZY_TYPE = symbolFor('react.lazy');
            REACT_BLOCK_TYPE = symbolFor('react.block');
            REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
            REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
            REACT_SCOPE_TYPE = symbolFor('react.scope');
            REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
            REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
            REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = '@@iterator';
        function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== 'object') {
                return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === 'function') {
                return maybeIterator;
            }
            return null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || '';
            return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
            return type.displayName || 'Context';
        }
        function getComponentName(type) {
            if (type == null) {
                return null;
            }
            {
                if (typeof type.tag === 'number') {
                    error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
                }
            }
            if (typeof type === 'function') {
                return type.displayName || type.name || null;
            }
            if (typeof type === 'string') {
                return type;
            }
            switch (type) {
                case REACT_FRAGMENT_TYPE:
                    return 'Fragment';
                case REACT_PORTAL_TYPE:
                    return 'Portal';
                case REACT_PROFILER_TYPE:
                    return 'Profiler';
                case REACT_STRICT_MODE_TYPE:
                    return 'StrictMode';
                case REACT_SUSPENSE_TYPE:
                    return 'Suspense';
                case REACT_SUSPENSE_LIST_TYPE:
                    return 'SuspenseList';
            }
            if (typeof type === 'object') {
                switch (type.$$typeof) {
                    case REACT_CONTEXT_TYPE:
                        var context = type;
                        return getContextName(context) + '.Consumer';
                    case REACT_PROVIDER_TYPE:
                        var provider = type;
                        return getContextName(provider._context) + '.Provider';
                    case REACT_FORWARD_REF_TYPE:
                        return getWrappedName(type, type.render, 'ForwardRef');
                    case REACT_MEMO_TYPE:
                        return getComponentName(type.type);
                    case REACT_BLOCK_TYPE:
                        return getComponentName(type._render);
                    case REACT_LAZY_TYPE:
                        {
                            var lazyComponent = type;
                            var payload = lazyComponent._payload;
                            var init = lazyComponent._init;
                            try {
                                return getComponentName(init(payload));
                            }
                            catch (x) {
                                return null;
                            }
                        }
                }
            }
            return null;
        }
        var NoFlags = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var PlacementAndUpdate = 6;
        var Deletion = 8;
        var ContentReset = 16;
        var Callback = 32;
        var DidCapture = 64;
        var Ref = 128;
        var Snapshot = 256;
        var Passive = 512;
        var PassiveUnmountPendingDev = 8192;
        var Hydrating = 1024;
        var HydratingAndUpdate = 1028;
        var LifecycleEffectMask = 932;
        var HostEffectMask = 2047;
        var Incomplete = 2048;
        var ShouldCapture = 4096;
        var ForceUpdateForLegacySuspense = 16384;
        var enableProfilerTimer = true;
        var enableFundamentalAPI = false;
        var enableNewReconciler = false;
        var warnAboutStringRefs = false;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
                var nextNode = node;
                do {
                    node = nextNode;
                    if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                        nearestMounted = node.return;
                    }
                    nextNode = node.return;
                } while (nextNode);
            }
            else {
                while (node.return) {
                    node = node.return;
                }
            }
            if (node.tag === HostRoot) {
                return nearestMounted;
            }
            return null;
        }
        function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
            {
                var owner = ReactCurrentOwner.current;
                if (owner !== null && owner.tag === ClassComponent) {
                    var ownerFiber = owner;
                    var instance = ownerFiber.stateNode;
                    if (!instance._warnedAboutRefsInRender) {
                        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
                    }
                    instance._warnedAboutRefsInRender = true;
                }
            }
            var fiber = get(component);
            if (!fiber) {
                return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
                {
                    throw Error("Unable to find node on an unmounted component.");
                }
            }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
                var nearestMounted = getNearestMountedFiber(fiber);
                if (!(nearestMounted !== null)) {
                    {
                        throw Error("Unable to find node on an unmounted component.");
                    }
                }
                if (nearestMounted !== fiber) {
                    return null;
                }
                return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
                var parentA = a.return;
                if (parentA === null) {
                    break;
                }
                var parentB = parentA.alternate;
                if (parentB === null) {
                    var nextParent = parentA.return;
                    if (nextParent !== null) {
                        a = b = nextParent;
                        continue;
                    }
                    break;
                }
                if (parentA.child === parentB.child) {
                    var child = parentA.child;
                    while (child) {
                        if (child === a) {
                            assertIsMounted(parentA);
                            return fiber;
                        }
                        if (child === b) {
                            assertIsMounted(parentA);
                            return alternate;
                        }
                        child = child.sibling;
                    }
                    {
                        {
                            throw Error("Unable to find node on an unmounted component.");
                        }
                    }
                }
                if (a.return !== b.return) {
                    a = parentA;
                    b = parentB;
                }
                else {
                    var didFindChild = false;
                    var _child = parentA.child;
                    while (_child) {
                        if (_child === a) {
                            didFindChild = true;
                            a = parentA;
                            b = parentB;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentA;
                            a = parentB;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) {
                        _child = parentB.child;
                        while (_child) {
                            if (_child === a) {
                                didFindChild = true;
                                a = parentB;
                                b = parentA;
                                break;
                            }
                            if (_child === b) {
                                didFindChild = true;
                                b = parentB;
                                a = parentA;
                                break;
                            }
                            _child = _child.sibling;
                        }
                        if (!didFindChild) {
                            {
                                throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                            }
                        }
                    }
                }
                if (!(a.alternate === b)) {
                    {
                        throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                    }
                }
            }
            if (!(a.tag === HostRoot)) {
                {
                    throw Error("Unable to find node on an unmounted component.");
                }
            }
            if (a.stateNode.current === a) {
                return fiber;
            }
            return alternate;
        }
        function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
                return null;
            }
            var node = currentParent;
            while (true) {
                if (node.tag === HostComponent || node.tag === HostText) {
                    return node;
                }
                else if (node.child) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
                if (node === currentParent) {
                    return null;
                }
                while (!node.sibling) {
                    if (!node.return || node.return === currentParent) {
                        return null;
                    }
                    node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
            }
            return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
                return null;
            }
            var node = currentParent;
            while (true) {
                if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                    return node;
                }
                else if (node.child && node.tag !== HostPortal) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
                if (node === currentParent) {
                    return null;
                }
                while (!node.sibling) {
                    if (!node.return || node.return === currentParent) {
                        return null;
                    }
                    node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
            }
            return null;
        }
        function doesFiberContain(parentFiber, childFiber) {
            var node = childFiber;
            var parentFiberAlternate = parentFiber.alternate;
            while (node !== null) {
                if (node === parentFiber || node === parentFiberAlternate) {
                    return true;
                }
                node = node.return;
            }
            return false;
        }
        var getPublicInstance = $$$hostConfig.getPublicInstance;
        var getRootHostContext = $$$hostConfig.getRootHostContext;
        var getChildHostContext = $$$hostConfig.getChildHostContext;
        var prepareForCommit = $$$hostConfig.prepareForCommit;
        var resetAfterCommit = $$$hostConfig.resetAfterCommit;
        var createInstance = $$$hostConfig.createInstance;
        var appendInitialChild = $$$hostConfig.appendInitialChild;
        var finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;
        var prepareUpdate = $$$hostConfig.prepareUpdate;
        var shouldSetTextContent = $$$hostConfig.shouldSetTextContent;
        var createTextInstance = $$$hostConfig.createTextInstance;
        var scheduleTimeout = $$$hostConfig.scheduleTimeout;
        var cancelTimeout = $$$hostConfig.cancelTimeout;
        var noTimeout = $$$hostConfig.noTimeout;
        var now = $$$hostConfig.now;
        var isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;
        var warnsIfNotActing = $$$hostConfig.warnsIfNotActing;
        var supportsMutation = $$$hostConfig.supportsMutation;
        var supportsPersistence = $$$hostConfig.supportsPersistence;
        var supportsHydration = $$$hostConfig.supportsHydration;
        var getFundamentalComponentInstance = $$$hostConfig.getFundamentalComponentInstance;
        var mountFundamentalComponent = $$$hostConfig.mountFundamentalComponent;
        var shouldUpdateFundamentalComponent = $$$hostConfig.shouldUpdateFundamentalComponent;
        var getInstanceFromNode = $$$hostConfig.getInstanceFromNode;
        var isOpaqueHydratingObject = $$$hostConfig.isOpaqueHydratingObject;
        var makeOpaqueHydratingObject = $$$hostConfig.makeOpaqueHydratingObject;
        var makeClientId = $$$hostConfig.makeClientId;
        var makeClientIdInDEV = $$$hostConfig.makeClientIdInDEV;
        var beforeActiveInstanceBlur = $$$hostConfig.beforeActiveInstanceBlur;
        var afterActiveInstanceBlur = $$$hostConfig.afterActiveInstanceBlur;
        var preparePortalMount = $$$hostConfig.preparePortalMount;
        var prepareScopeUpdate = $$$hostConfig.preparePortalMount;
        var getInstanceFromScope = $$$hostConfig.getInstanceFromScope;
        var supportsTestSelectors = $$$hostConfig.supportsTestSelectors;
        var findFiberRoot = $$$hostConfig.findFiberRoot;
        var getBoundingRect = $$$hostConfig.getBoundingRect;
        var getTextContent = $$$hostConfig.getTextContent;
        var isHiddenSubtree = $$$hostConfig.isHiddenSubtree;
        var matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;
        var setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;
        var setupIntersectionObserver = $$$hostConfig.setupIntersectionObserver;
        var appendChild = $$$hostConfig.appendChild;
        var appendChildToContainer = $$$hostConfig.appendChildToContainer;
        var commitTextUpdate = $$$hostConfig.commitTextUpdate;
        var commitMount = $$$hostConfig.commitMount;
        var commitUpdate = $$$hostConfig.commitUpdate;
        var insertBefore = $$$hostConfig.insertBefore;
        var insertInContainerBefore = $$$hostConfig.insertInContainerBefore;
        var removeChild = $$$hostConfig.removeChild;
        var removeChildFromContainer = $$$hostConfig.removeChildFromContainer;
        var resetTextContent = $$$hostConfig.resetTextContent;
        var hideInstance = $$$hostConfig.hideInstance;
        var hideTextInstance = $$$hostConfig.hideTextInstance;
        var unhideInstance = $$$hostConfig.unhideInstance;
        var unhideTextInstance = $$$hostConfig.unhideTextInstance;
        var updateFundamentalComponent = $$$hostConfig.updateFundamentalComponent;
        var unmountFundamentalComponent = $$$hostConfig.unmountFundamentalComponent;
        var clearContainer = $$$hostConfig.clearContainer;
        var cloneInstance = $$$hostConfig.cloneInstance;
        var createContainerChildSet = $$$hostConfig.createContainerChildSet;
        var appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;
        var finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;
        var replaceContainerChildren = $$$hostConfig.replaceContainerChildren;
        var cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;
        var cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance;
        var cloneFundamentalInstance = $$$hostConfig.cloneInstance;
        var canHydrateInstance = $$$hostConfig.canHydrateInstance;
        var canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;
        var canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;
        var isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;
        var isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;
        var registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;
        var getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;
        var getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;
        var hydrateInstance = $$$hostConfig.hydrateInstance;
        var hydrateTextInstance = $$$hostConfig.hydrateTextInstance;
        var hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;
        var getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;
        var commitHydratedContainer = $$$hostConfig.commitHydratedContainer;
        var commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;
        var clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;
        var clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;
        var didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;
        var didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;
        var didNotHydrateContainerInstance = $$$hostConfig.didNotHydrateContainerInstance;
        var didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;
        var didNotFindHydratableContainerInstance = $$$hostConfig.didNotFindHydratableContainerInstance;
        var didNotFindHydratableContainerTextInstance = $$$hostConfig.didNotFindHydratableContainerTextInstance;
        var didNotFindHydratableContainerSuspenseInstance = $$$hostConfig.didNotFindHydratableContainerSuspenseInstance;
        var didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;
        var didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;
        var didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() { }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
            {
                if (disabledDepth === 0) {
                    prevLog = console.log;
                    prevInfo = console.info;
                    prevWarn = console.warn;
                    prevError = console.error;
                    prevGroup = console.group;
                    prevGroupCollapsed = console.groupCollapsed;
                    prevGroupEnd = console.groupEnd;
                    var props = {
                        configurable: true,
                        enumerable: true,
                        value: disabledLog,
                        writable: true
                    };
                    Object.defineProperties(console, {
                        info: props,
                        log: props,
                        warn: props,
                        error: props,
                        group: props,
                        groupCollapsed: props,
                        groupEnd: props
                    });
                }
                disabledDepth++;
            }
        }
        function reenableLogs() {
            {
                disabledDepth--;
                if (disabledDepth === 0) {
                    var props = {
                        configurable: true,
                        enumerable: true,
                        writable: true
                    };
                    Object.defineProperties(console, {
                        log: _assign({}, props, {
                            value: prevLog
                        }),
                        info: _assign({}, props, {
                            value: prevInfo
                        }),
                        warn: _assign({}, props, {
                            value: prevWarn
                        }),
                        error: _assign({}, props, {
                            value: prevError
                        }),
                        group: _assign({}, props, {
                            value: prevGroup
                        }),
                        groupCollapsed: _assign({}, props, {
                            value: prevGroupCollapsed
                        }),
                        groupEnd: _assign({}, props, {
                            value: prevGroupEnd
                        })
                    });
                }
                if (disabledDepth < 0) {
                    error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
                }
            }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
                if (prefix === undefined) {
                    try {
                        throw Error();
                    }
                    catch (x) {
                        var match = x.stack.trim().match(/\n( *(at )?)/);
                        prefix = match && match[1] || '';
                    }
                }
                return '\n' + prefix + name;
            }
        }
        var reentry = false;
        var componentFrameCache;
        {
            var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
                return '';
            }
            {
                var frame = componentFrameCache.get(fn);
                if (frame !== undefined) {
                    return frame;
                }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = undefined;
            var previousDispatcher;
            {
                previousDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = null;
                disableLogs();
            }
            try {
                if (construct) {
                    var Fake = function () {
                        throw Error();
                    };
                    Object.defineProperty(Fake.prototype, 'props', {
                        set: function () {
                            throw Error();
                        }
                    });
                    if (typeof Reflect === 'object' && Reflect.construct) {
                        try {
                            Reflect.construct(Fake, []);
                        }
                        catch (x) {
                            control = x;
                        }
                        Reflect.construct(fn, [], Fake);
                    }
                    else {
                        try {
                            Fake.call();
                        }
                        catch (x) {
                            control = x;
                        }
                        fn.call(Fake.prototype);
                    }
                }
                else {
                    try {
                        throw Error();
                    }
                    catch (x) {
                        control = x;
                    }
                    fn();
                }
            }
            catch (sample) {
                if (sample && control && typeof sample.stack === 'string') {
                    var sampleLines = sample.stack.split('\n');
                    var controlLines = control.stack.split('\n');
                    var s = sampleLines.length - 1;
                    var c = controlLines.length - 1;
                    while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                        c--;
                    }
                    for (; s >= 1 && c >= 0; s--, c--) {
                        if (sampleLines[s] !== controlLines[c]) {
                            if (s !== 1 || c !== 1) {
                                do {
                                    s--;
                                    c--;
                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                                        var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                                        {
                                            if (typeof fn === 'function') {
                                                componentFrameCache.set(fn, _frame);
                                            }
                                        }
                                        return _frame;
                                    }
                                } while (s >= 1 && c >= 0);
                            }
                            break;
                        }
                    }
                }
            }
            finally {
                reentry = false;
                {
                    ReactCurrentDispatcher.current = previousDispatcher;
                    reenableLogs();
                }
                Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : '';
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
            {
                if (typeof fn === 'function') {
                    componentFrameCache.set(fn, syntheticFrame);
                }
            }
            return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
            {
                return describeNativeComponentFrame(ctor, true);
            }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
                return describeNativeComponentFrame(fn, false);
            }
        }
        function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
                return '';
            }
            if (typeof type === 'function') {
                {
                    return describeNativeComponentFrame(type, shouldConstruct(type));
                }
            }
            if (typeof type === 'string') {
                return describeBuiltInComponentFrame(type);
            }
            switch (type) {
                case REACT_SUSPENSE_TYPE:
                    return describeBuiltInComponentFrame('Suspense');
                case REACT_SUSPENSE_LIST_TYPE:
                    return describeBuiltInComponentFrame('SuspenseList');
            }
            if (typeof type === 'object') {
                switch (type.$$typeof) {
                    case REACT_FORWARD_REF_TYPE:
                        return describeFunctionComponentFrame(type.render);
                    case REACT_MEMO_TYPE:
                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                    case REACT_BLOCK_TYPE:
                        return describeFunctionComponentFrame(type._render);
                    case REACT_LAZY_TYPE:
                        {
                            var lazyComponent = type;
                            var payload = lazyComponent._payload;
                            var init = lazyComponent._init;
                            try {
                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                            }
                            catch (x) { }
                        }
                }
            }
            return '';
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
            {
                if (element) {
                    var owner = element._owner;
                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                    ReactDebugCurrentFrame.setExtraStackFrame(stack);
                }
                else {
                    ReactDebugCurrentFrame.setExtraStackFrame(null);
                }
            }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
                var has = Function.call.bind(Object.prototype.hasOwnProperty);
                for (var typeSpecName in typeSpecs) {
                    if (has(typeSpecs, typeSpecName)) {
                        var error$1 = void 0;
                        try {
                            if (typeof typeSpecs[typeSpecName] !== 'function') {
                                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                                err.name = 'Invariant Violation';
                                throw err;
                            }
                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
                        }
                        catch (ex) {
                            error$1 = ex;
                        }
                        if (error$1 && !(error$1 instanceof Error)) {
                            setCurrentlyValidatingElement(element);
                            error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
                            setCurrentlyValidatingElement(null);
                        }
                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                            loggedTypeFailures[error$1.message] = true;
                            setCurrentlyValidatingElement(element);
                            error('Failed %s type: %s', location, error$1.message);
                            setCurrentlyValidatingElement(null);
                        }
                    }
                }
            }
        }
        var valueStack = [];
        var fiberStack;
        {
            fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
            return {
                current: defaultValue
            };
        }
        function pop(cursor, fiber) {
            if (index < 0) {
                {
                    error('Unexpected pop.');
                }
                return;
            }
            {
                if (fiber !== fiberStack[index]) {
                    error('Unexpected Fiber popped.');
                }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
                fiberStack[index] = null;
            }
            index--;
        }
        function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
                fiberStack[index] = fiber;
            }
            cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
            warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
            Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
            {
                if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                    return previousContext;
                }
                return contextStackCursor.current;
            }
        }
        function cacheContext(workInProgress, unmaskedContext, maskedContext) {
            {
                var instance = workInProgress.stateNode;
                instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
                instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
        }
        function getMaskedContext(workInProgress, unmaskedContext) {
            {
                var type = workInProgress.type;
                var contextTypes = type.contextTypes;
                if (!contextTypes) {
                    return emptyContextObject;
                }
                var instance = workInProgress.stateNode;
                if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                    return instance.__reactInternalMemoizedMaskedChildContext;
                }
                var context = {};
                for (var key in contextTypes) {
                    context[key] = unmaskedContext[key];
                }
                {
                    var name = getComponentName(type) || 'Unknown';
                    checkPropTypes(contextTypes, context, 'context', name);
                }
                if (instance) {
                    cacheContext(workInProgress, unmaskedContext, context);
                }
                return context;
            }
        }
        function hasContextChanged() {
            {
                return didPerformWorkStackCursor.current;
            }
        }
        function isContextProvider(type) {
            {
                var childContextTypes = type.childContextTypes;
                return childContextTypes !== null && childContextTypes !== undefined;
            }
        }
        function popContext(fiber) {
            {
                pop(didPerformWorkStackCursor, fiber);
                pop(contextStackCursor, fiber);
            }
        }
        function popTopLevelContextObject(fiber) {
            {
                pop(didPerformWorkStackCursor, fiber);
                pop(contextStackCursor, fiber);
            }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
            {
                if (!(contextStackCursor.current === emptyContextObject)) {
                    {
                        throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                    }
                }
                push(contextStackCursor, context, fiber);
                push(didPerformWorkStackCursor, didChange, fiber);
            }
        }
        function processChildContext(fiber, type, parentContext) {
            {
                var instance = fiber.stateNode;
                var childContextTypes = type.childContextTypes;
                if (typeof instance.getChildContext !== 'function') {
                    {
                        var componentName = getComponentName(type) || 'Unknown';
                        if (!warnedAboutMissingGetChildContext[componentName]) {
                            warnedAboutMissingGetChildContext[componentName] = true;
                            error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
                        }
                    }
                    return parentContext;
                }
                var childContext = instance.getChildContext();
                for (var contextKey in childContext) {
                    if (!(contextKey in childContextTypes)) {
                        {
                            throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
                        }
                    }
                }
                {
                    var name = getComponentName(type) || 'Unknown';
                    checkPropTypes(childContextTypes, childContext, 'child context', name);
                }
                return _assign({}, parentContext, childContext);
            }
        }
        function pushContextProvider(workInProgress) {
            {
                var instance = workInProgress.stateNode;
                var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
                previousContext = contextStackCursor.current;
                push(contextStackCursor, memoizedMergedChildContext, workInProgress);
                push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
                return true;
            }
        }
        function invalidateContextProvider(workInProgress, type, didChange) {
            {
                var instance = workInProgress.stateNode;
                if (!instance) {
                    {
                        throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                    }
                }
                if (didChange) {
                    var mergedContext = processChildContext(workInProgress, type, previousContext);
                    instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                    pop(didPerformWorkStackCursor, workInProgress);
                    pop(contextStackCursor, workInProgress);
                    push(contextStackCursor, mergedContext, workInProgress);
                    push(didPerformWorkStackCursor, didChange, workInProgress);
                }
                else {
                    pop(didPerformWorkStackCursor, workInProgress);
                    push(didPerformWorkStackCursor, didChange, workInProgress);
                }
            }
        }
        function findCurrentUnmaskedContext(fiber) {
            {
                if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                    {
                        throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                    }
                }
                var node = fiber;
                do {
                    switch (node.tag) {
                        case HostRoot:
                            return node.stateNode.context;
                        case ClassComponent:
                            {
                                var Component = node.type;
                                if (isContextProvider(Component)) {
                                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                                }
                                break;
                            }
                    }
                    node = node.return;
                } while (node !== null);
                {
                    {
                        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                }
            }
        }
        var LegacyRoot = 0;
        var BlockingRoot = 1;
        var ConcurrentRoot = 2;
        var rendererID = null;
        var injectedHook = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
        function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
                return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
                return true;
            }
            if (!hook.supportsFiber) {
                {
                    error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
                }
                return true;
            }
            try {
                rendererID = hook.inject(internals);
                injectedHook = hook;
            }
            catch (err) {
                {
                    error('React instrumentation encountered an error: %s.', err);
                }
            }
            return true;
        }
        function onScheduleRoot(root, children) {
            {
                if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
                    try {
                        injectedHook.onScheduleFiberRoot(rendererID, root, children);
                    }
                    catch (err) {
                        if (!hasLoggedError) {
                            hasLoggedError = true;
                            error('React instrumentation encountered an error: %s', err);
                        }
                    }
                }
            }
        }
        function onCommitRoot(root, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
                try {
                    var didError = (root.current.flags & DidCapture) === DidCapture;
                    if (enableProfilerTimer) {
                        injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
                    }
                    else {
                        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
                    }
                }
                catch (err) {
                    {
                        if (!hasLoggedError) {
                            hasLoggedError = true;
                            error('React instrumentation encountered an error: %s', err);
                        }
                    }
                }
            }
        }
        function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
                try {
                    injectedHook.onCommitFiberUnmount(rendererID, fiber);
                }
                catch (err) {
                    {
                        if (!hasLoggedError) {
                            hasLoggedError = true;
                            error('React instrumentation encountered an error: %s', err);
                        }
                    }
                }
            }
        }
        var Scheduler_now = Scheduler.unstable_now;
        {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
                {
                    throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
                }
            }
        }
        var ImmediatePriority = 99;
        var UserBlockingPriority = 98;
        var NormalPriority = 97;
        var LowPriority = 96;
        var IdlePriority = 95;
        var NoPriority = 90;
        var initialTimeMs = Scheduler_now();
        var SyncLanePriority = 15;
        var SyncBatchedLanePriority = 14;
        var InputDiscreteHydrationLanePriority = 13;
        var InputDiscreteLanePriority = 12;
        var InputContinuousHydrationLanePriority = 11;
        var InputContinuousLanePriority = 10;
        var DefaultHydrationLanePriority = 9;
        var DefaultLanePriority = 8;
        var TransitionHydrationPriority = 7;
        var TransitionPriority = 6;
        var RetryLanePriority = 5;
        var SelectiveHydrationLanePriority = 4;
        var IdleHydrationLanePriority = 3;
        var IdleLanePriority = 2;
        var OffscreenLanePriority = 1;
        var NoLanePriority = 0;
        var TotalLanes = 31;
        var NoLanes = 0;
        var NoLane = 0;
        var SyncLane = 1;
        var SyncBatchedLane = 2;
        var InputDiscreteHydrationLane = 4;
        var InputDiscreteLanes = 24;
        var InputContinuousHydrationLane = 32;
        var InputContinuousLanes = 192;
        var DefaultHydrationLane = 256;
        var DefaultLanes = 3584;
        var TransitionHydrationLane = 4096;
        var TransitionLanes = 4186112;
        var RetryLanes = 62914560;
        var SomeRetryLane = 33554432;
        var SelectiveHydrationLane = 67108864;
        var NonIdleLanes = 134217727;
        var IdleHydrationLane = 134217728;
        var IdleLanes = 805306368;
        var OffscreenLane = 1073741824;
        var NoTimestamp = -1;
        var currentUpdateLanePriority = NoLanePriority;
        function getCurrentUpdateLanePriority() {
            return currentUpdateLanePriority;
        }
        function setCurrentUpdateLanePriority(newLanePriority) {
            currentUpdateLanePriority = newLanePriority;
        }
        var return_highestLanePriority = DefaultLanePriority;
        function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
                return_highestLanePriority = SyncLanePriority;
                return SyncLane;
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
                return_highestLanePriority = SyncBatchedLanePriority;
                return SyncBatchedLane;
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
                return_highestLanePriority = InputDiscreteHydrationLanePriority;
                return InputDiscreteHydrationLane;
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes;
            if (inputDiscreteLanes !== NoLanes) {
                return_highestLanePriority = InputDiscreteLanePriority;
                return inputDiscreteLanes;
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
                return_highestLanePriority = InputContinuousHydrationLanePriority;
                return InputContinuousHydrationLane;
            }
            var inputContinuousLanes = InputContinuousLanes & lanes;
            if (inputContinuousLanes !== NoLanes) {
                return_highestLanePriority = InputContinuousLanePriority;
                return inputContinuousLanes;
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
                return_highestLanePriority = DefaultHydrationLanePriority;
                return DefaultHydrationLane;
            }
            var defaultLanes = DefaultLanes & lanes;
            if (defaultLanes !== NoLanes) {
                return_highestLanePriority = DefaultLanePriority;
                return defaultLanes;
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
                return_highestLanePriority = TransitionHydrationPriority;
                return TransitionHydrationLane;
            }
            var transitionLanes = TransitionLanes & lanes;
            if (transitionLanes !== NoLanes) {
                return_highestLanePriority = TransitionPriority;
                return transitionLanes;
            }
            var retryLanes = RetryLanes & lanes;
            if (retryLanes !== NoLanes) {
                return_highestLanePriority = RetryLanePriority;
                return retryLanes;
            }
            if (lanes & SelectiveHydrationLane) {
                return_highestLanePriority = SelectiveHydrationLanePriority;
                return SelectiveHydrationLane;
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
                return_highestLanePriority = IdleHydrationLanePriority;
                return IdleHydrationLane;
            }
            var idleLanes = IdleLanes & lanes;
            if (idleLanes !== NoLanes) {
                return_highestLanePriority = IdleLanePriority;
                return idleLanes;
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
                return_highestLanePriority = OffscreenLanePriority;
                return OffscreenLane;
            }
            {
                error('Should have found matching lanes. This is a bug in React.');
            }
            return_highestLanePriority = DefaultLanePriority;
            return lanes;
        }
        function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
                case ImmediatePriority:
                    return SyncLanePriority;
                case UserBlockingPriority:
                    return InputContinuousLanePriority;
                case NormalPriority:
                case LowPriority:
                    return DefaultLanePriority;
                case IdlePriority:
                    return IdleLanePriority;
                default:
                    return NoLanePriority;
            }
        }
        function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
                case SyncLanePriority:
                case SyncBatchedLanePriority:
                    return ImmediatePriority;
                case InputDiscreteHydrationLanePriority:
                case InputDiscreteLanePriority:
                case InputContinuousHydrationLanePriority:
                case InputContinuousLanePriority:
                    return UserBlockingPriority;
                case DefaultHydrationLanePriority:
                case DefaultLanePriority:
                case TransitionHydrationPriority:
                case TransitionPriority:
                case SelectiveHydrationLanePriority:
                case RetryLanePriority:
                    return NormalPriority;
                case IdleHydrationLanePriority:
                case IdleLanePriority:
                case OffscreenLanePriority:
                    return IdlePriority;
                case NoLanePriority:
                    return NoPriority;
                default:
                    {
                        {
                            throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                        }
                    }
            }
        }
        function getNextLanes(root, wipLanes) {
            var pendingLanes = root.pendingLanes;
            if (pendingLanes === NoLanes) {
                return_highestLanePriority = NoLanePriority;
                return NoLanes;
            }
            var nextLanes = NoLanes;
            var nextLanePriority = NoLanePriority;
            var expiredLanes = root.expiredLanes;
            var suspendedLanes = root.suspendedLanes;
            var pingedLanes = root.pingedLanes;
            if (expiredLanes !== NoLanes) {
                nextLanes = expiredLanes;
                nextLanePriority = return_highestLanePriority = SyncLanePriority;
            }
            else {
                var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
                if (nonIdlePendingLanes !== NoLanes) {
                    var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                    if (nonIdleUnblockedLanes !== NoLanes) {
                        nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                        nextLanePriority = return_highestLanePriority;
                    }
                    else {
                        var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                        if (nonIdlePingedLanes !== NoLanes) {
                            nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                            nextLanePriority = return_highestLanePriority;
                        }
                    }
                }
                else {
                    var unblockedLanes = pendingLanes & ~suspendedLanes;
                    if (unblockedLanes !== NoLanes) {
                        nextLanes = getHighestPriorityLanes(unblockedLanes);
                        nextLanePriority = return_highestLanePriority;
                    }
                    else {
                        if (pingedLanes !== NoLanes) {
                            nextLanes = getHighestPriorityLanes(pingedLanes);
                            nextLanePriority = return_highestLanePriority;
                        }
                    }
                }
            }
            if (nextLanes === NoLanes) {
                return NoLanes;
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
            if (wipLanes !== NoLanes && wipLanes !== nextLanes &&
                (wipLanes & suspendedLanes) === NoLanes) {
                getHighestPriorityLanes(wipLanes);
                var wipLanePriority = return_highestLanePriority;
                if (nextLanePriority <= wipLanePriority) {
                    return wipLanes;
                }
                else {
                    return_highestLanePriority = nextLanePriority;
                }
            }
            var entangledLanes = root.entangledLanes;
            if (entangledLanes !== NoLanes) {
                var entanglements = root.entanglements;
                var lanes = nextLanes & entangledLanes;
                while (lanes > 0) {
                    var index = pickArbitraryLaneIndex(lanes);
                    var lane = 1 << index;
                    nextLanes |= entanglements[index];
                    lanes &= ~lane;
                }
            }
            return nextLanes;
        }
        function getMostRecentEventTime(root, lanes) {
            var eventTimes = root.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                var eventTime = eventTimes[index];
                if (eventTime > mostRecentEventTime) {
                    mostRecentEventTime = eventTime;
                }
                lanes &= ~lane;
            }
            return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane);
            var priority = return_highestLanePriority;
            if (priority >= InputContinuousLanePriority) {
                return currentTime + 250;
            }
            else if (priority >= TransitionPriority) {
                return currentTime + 5000;
            }
            else {
                return NoTimestamp;
            }
        }
        function markStarvedLanesAsExpired(root, currentTime) {
            var pendingLanes = root.pendingLanes;
            var suspendedLanes = root.suspendedLanes;
            var pingedLanes = root.pingedLanes;
            var expirationTimes = root.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                var expirationTime = expirationTimes[index];
                if (expirationTime === NoTimestamp) {
                    if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                        expirationTimes[index] = computeExpirationTime(lane, currentTime);
                    }
                }
                else if (expirationTime <= currentTime) {
                    root.expiredLanes |= lane;
                }
                lanes &= ~lane;
            }
        }
        function getHighestPriorityPendingLanes(root) {
            return getHighestPriorityLanes(root.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root) {
            var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
                return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
                return OffscreenLane;
            }
            return NoLanes;
        }
        function returnNextLanesPriority() {
            return return_highestLanePriority;
        }
        function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
        }
        function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
                case NoLanePriority:
                    break;
                case SyncLanePriority:
                    return SyncLane;
                case SyncBatchedLanePriority:
                    return SyncBatchedLane;
                case InputDiscreteLanePriority:
                    {
                        var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                        if (_lane === NoLane) {
                            return findUpdateLane(InputContinuousLanePriority, wipLanes);
                        }
                        return _lane;
                    }
                case InputContinuousLanePriority:
                    {
                        var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                        if (_lane2 === NoLane) {
                            return findUpdateLane(DefaultLanePriority, wipLanes);
                        }
                        return _lane2;
                    }
                case DefaultLanePriority:
                    {
                        var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                        if (_lane3 === NoLane) {
                            _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                            if (_lane3 === NoLane) {
                                _lane3 = pickArbitraryLane(DefaultLanes);
                            }
                        }
                        return _lane3;
                    }
                case TransitionPriority:
                case RetryLanePriority:
                    break;
                case IdleLanePriority:
                    var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                    if (lane === NoLane) {
                        lane = pickArbitraryLane(IdleLanes);
                    }
                    return lane;
            }
            {
                {
                    throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
            }
        }
        function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
            if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
                if (lane === NoLane) {
                    lane = pickArbitraryLane(TransitionLanes);
                }
            }
            return lane;
        }
        function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
            if (lane === NoLane) {
                lane = pickArbitraryLane(RetryLanes);
            }
            return lane;
        }
        function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
        }
        function getLowestPriorityLane(lanes) {
            var index = 31 - clz32(lanes);
            return index < 0 ? NoLanes : 1 << index;
        }
        function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1;
        }
        function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
        }
        function isSubsetOfLanes(set, subset) {
            return (set & subset) === subset;
        }
        function mergeLanes(a, b) {
            return a | b;
        }
        function removeLanes(set, subset) {
            return set & ~subset;
        }
        function laneToLanes(lane) {
            return lane;
        }
        function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
        }
        function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
                laneMap.push(initial);
            }
            return laneMap;
        }
        function markRootUpdated(root, updateLane, eventTime) {
            root.pendingLanes |= updateLane;
            var higherPriorityLanes = updateLane - 1;
            root.suspendedLanes &= higherPriorityLanes;
            root.pingedLanes &= higherPriorityLanes;
            var eventTimes = root.eventTimes;
            var index = laneToIndex(updateLane);
            eventTimes[index] = eventTime;
        }
        function markRootSuspended(root, suspendedLanes) {
            root.suspendedLanes |= suspendedLanes;
            root.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                expirationTimes[index] = NoTimestamp;
                lanes &= ~lane;
            }
        }
        function markRootPinged(root, pingedLanes, eventTime) {
            root.pingedLanes |= root.suspendedLanes & pingedLanes;
        }
        function markRootExpired(root, expiredLanes) {
            root.expiredLanes |= expiredLanes & root.pendingLanes;
        }
        function markDiscreteUpdatesExpired(root) {
            root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
        }
        function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes;
        }
        function markRootMutableRead(root, updateLane) {
            root.mutableReadLanes |= updateLane & root.pendingLanes;
        }
        function markRootFinished(root, remainingLanes) {
            var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
            root.pendingLanes = remainingLanes;
            root.suspendedLanes = 0;
            root.pingedLanes = 0;
            root.expiredLanes &= remainingLanes;
            root.mutableReadLanes &= remainingLanes;
            root.entangledLanes &= remainingLanes;
            var entanglements = root.entanglements;
            var eventTimes = root.eventTimes;
            var expirationTimes = root.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                entanglements[index] = NoLanes;
                eventTimes[index] = NoTimestamp;
                expirationTimes[index] = NoTimestamp;
                lanes &= ~lane;
            }
        }
        function markRootEntangled(root, entangledLanes) {
            root.entangledLanes |= entangledLanes;
            var entanglements = root.entanglements;
            var lanes = entangledLanes;
            while (lanes > 0) {
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                entanglements[index] |= entangledLanes;
                lanes &= ~lane;
            }
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(lanes) {
            if (lanes === 0) {
                return 32;
            }
            return 31 - (log(lanes) / LN2 | 0) | 0;
        }
        var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
        {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
                {
                    throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
                }
            }
        }
        var fakeCallbackNode = {};
        var ImmediatePriority$1 = 99;
        var UserBlockingPriority$1 = 98;
        var NormalPriority$1 = 97;
        var LowPriority$1 = 96;
        var IdlePriority$1 = 95;
        var NoPriority$1 = 90;
        var shouldYield = Scheduler_shouldYield;
        var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () { };
        var syncQueue = null;
        var immediateQueueCallbackNode = null;
        var isFlushingSyncQueue = false;
        var initialTimeMs$1 = Scheduler_now$1();
        var now$1 = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function () {
            return Scheduler_now$1() - initialTimeMs$1;
        };
        function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
                case Scheduler_ImmediatePriority:
                    return ImmediatePriority$1;
                case Scheduler_UserBlockingPriority:
                    return UserBlockingPriority$1;
                case Scheduler_NormalPriority:
                    return NormalPriority$1;
                case Scheduler_LowPriority:
                    return LowPriority$1;
                case Scheduler_IdlePriority:
                    return IdlePriority$1;
                default:
                    {
                        {
                            throw Error("Unknown priority level.");
                        }
                    }
            }
        }
        function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
                case ImmediatePriority$1:
                    return Scheduler_ImmediatePriority;
                case UserBlockingPriority$1:
                    return Scheduler_UserBlockingPriority;
                case NormalPriority$1:
                    return Scheduler_NormalPriority;
                case LowPriority$1:
                    return Scheduler_LowPriority;
                case IdlePriority$1:
                    return Scheduler_IdlePriority;
                default:
                    {
                        {
                            throw Error("Unknown priority level.");
                        }
                    }
            }
        }
        function runWithPriority(reactPriorityLevel, fn) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn);
        }
        function scheduleCallback(reactPriorityLevel, callback, options) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options);
        }
        function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
                syncQueue = [callback];
                immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            }
            else {
                syncQueue.push(callback);
            }
            return fakeCallbackNode;
        }
        function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
                Scheduler_cancelCallback(callbackNode);
            }
        }
        function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
                var node = immediateQueueCallbackNode;
                immediateQueueCallbackNode = null;
                Scheduler_cancelCallback(node);
            }
            flushSyncCallbackQueueImpl();
        }
        function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
                isFlushingSyncQueue = true;
                var i = 0;
                {
                    try {
                        var _isSync2 = true;
                        var _queue = syncQueue;
                        runWithPriority(ImmediatePriority$1, function () {
                            for (; i < _queue.length; i++) {
                                var callback = _queue[i];
                                do {
                                    callback = callback(_isSync2);
                                } while (callback !== null);
                            }
                        });
                        syncQueue = null;
                    }
                    catch (error) {
                        if (syncQueue !== null) {
                            syncQueue = syncQueue.slice(i + 1);
                        }
                        Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                        throw error;
                    }
                    finally {
                        isFlushingSyncQueue = false;
                    }
                }
            }
        }
        var NoMode = 0;
        var StrictMode = 1;
        var BlockingMode = 2;
        var ConcurrentMode = 4;
        var ProfileMode = 8;
        var DebugTracingMode = 16;
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = 0;
        function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition;
        }
        function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === 'function' ? Object.is : is;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
                return true;
            }
            if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
                return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
                return false;
            }
            for (var i = 0; i < keysA.length; i++) {
                if (!hasOwnProperty.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
                    return false;
                }
            }
            return true;
        }
        function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
                case HostComponent:
                    return describeBuiltInComponentFrame(fiber.type);
                case LazyComponent:
                    return describeBuiltInComponentFrame('Lazy');
                case SuspenseComponent:
                    return describeBuiltInComponentFrame('Suspense');
                case SuspenseListComponent:
                    return describeBuiltInComponentFrame('SuspenseList');
                case FunctionComponent:
                case IndeterminateComponent:
                case SimpleMemoComponent:
                    return describeFunctionComponentFrame(fiber.type);
                case ForwardRef:
                    return describeFunctionComponentFrame(fiber.type.render);
                case Block:
                    return describeFunctionComponentFrame(fiber.type._render);
                case ClassComponent:
                    return describeClassComponentFrame(fiber.type);
                default:
                    return '';
            }
        }
        function getStackByFiberInDevAndProd(workInProgress) {
            try {
                var info = '';
                var node = workInProgress;
                do {
                    info += describeFiber(node);
                    node = node.return;
                } while (node);
                return info;
            }
            catch (x) {
                return '\nError generating stack: ' + x.message + '\n' + x.stack;
            }
        }
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
            {
                if (current === null) {
                    return null;
                }
                var owner = current._debugOwner;
                if (owner !== null && typeof owner !== 'undefined') {
                    return getComponentName(owner.type);
                }
            }
            return null;
        }
        function getCurrentFiberStackInDev() {
            {
                if (current === null) {
                    return '';
                }
                return getStackByFiberInDevAndProd(current);
            }
        }
        function resetCurrentFiber() {
            {
                ReactDebugCurrentFrame$1.getCurrentStack = null;
                current = null;
                isRendering = false;
            }
        }
        function setCurrentFiber(fiber) {
            {
                ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
                current = fiber;
                isRendering = false;
            }
        }
        function setIsRendering(rendering) {
            {
                isRendering = rendering;
            }
        }
        function getIsRendering() {
            {
                return isRendering;
            }
        }
        var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function (fiber, instance) { },
            flushPendingUnsafeLifecycleWarnings: function () { },
            recordLegacyContextWarning: function (fiber, instance) { },
            flushLegacyContextWarning: function () { },
            discardPendingWarnings: function () { }
        };
        {
            var findStrictRoot = function (fiber) {
                var maybeStrictRoot = null;
                var node = fiber;
                while (node !== null) {
                    if (node.mode & StrictMode) {
                        maybeStrictRoot = node;
                    }
                    node = node.return;
                }
                return maybeStrictRoot;
            };
            var setToSortedString = function (set) {
                var array = [];
                set.forEach(function (value) {
                    array.push(value);
                });
                return array.sort().join(', ');
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
                if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                    return;
                }
                if (typeof instance.componentWillMount === 'function' &&
                    instance.componentWillMount.__suppressDeprecationWarning !== true) {
                    pendingComponentWillMountWarnings.push(fiber);
                }
                if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
                    pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
                }
                if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                    pendingComponentWillReceivePropsWarnings.push(fiber);
                }
                if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                    pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
                }
                if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                    pendingComponentWillUpdateWarnings.push(fiber);
                }
                if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
                    pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
                }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
                var componentWillMountUniqueNames = new Set();
                if (pendingComponentWillMountWarnings.length > 0) {
                    pendingComponentWillMountWarnings.forEach(function (fiber) {
                        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                    });
                    pendingComponentWillMountWarnings = [];
                }
                var UNSAFE_componentWillMountUniqueNames = new Set();
                if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                    pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
                        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                    });
                    pendingUNSAFE_ComponentWillMountWarnings = [];
                }
                var componentWillReceivePropsUniqueNames = new Set();
                if (pendingComponentWillReceivePropsWarnings.length > 0) {
                    pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
                        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                    });
                    pendingComponentWillReceivePropsWarnings = [];
                }
                var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
                if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                    pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
                        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                    });
                    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                }
                var componentWillUpdateUniqueNames = new Set();
                if (pendingComponentWillUpdateWarnings.length > 0) {
                    pendingComponentWillUpdateWarnings.forEach(function (fiber) {
                        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                    });
                    pendingComponentWillUpdateWarnings = [];
                }
                var UNSAFE_componentWillUpdateUniqueNames = new Set();
                if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                    pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
                        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                    });
                    pendingUNSAFE_ComponentWillUpdateWarnings = [];
                }
                if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                    var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                    error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
                }
                if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                    var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                    error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
                }
                if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                    var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                    error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
                }
                if (componentWillMountUniqueNames.size > 0) {
                    var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                    warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
                }
                if (componentWillReceivePropsUniqueNames.size > 0) {
                    var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                    warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
                }
                if (componentWillUpdateUniqueNames.size > 0) {
                    var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                    warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
                }
            };
            var pendingLegacyContextWarning = new Map();
            var didWarnAboutLegacyContext = new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
                var strictRoot = findStrictRoot(fiber);
                if (strictRoot === null) {
                    error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
                    return;
                }
                if (didWarnAboutLegacyContext.has(fiber.type)) {
                    return;
                }
                var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
                if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
                    if (warningsForRoot === undefined) {
                        warningsForRoot = [];
                        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                    }
                    warningsForRoot.push(fiber);
                }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function () {
                pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
                    if (fiberArray.length === 0) {
                        return;
                    }
                    var firstFiber = fiberArray[0];
                    var uniqueNames = new Set();
                    fiberArray.forEach(function (fiber) {
                        uniqueNames.add(getComponentName(fiber.type) || 'Component');
                        didWarnAboutLegacyContext.add(fiber.type);
                    });
                    var sortedNames = setToSortedString(uniqueNames);
                    try {
                        setCurrentFiber(firstFiber);
                        error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
                    }
                    finally {
                        resetCurrentFiber();
                    }
                });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function () {
                pendingComponentWillMountWarnings = [];
                pendingUNSAFE_ComponentWillMountWarnings = [];
                pendingComponentWillReceivePropsWarnings = [];
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                pendingComponentWillUpdateWarnings = [];
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
                pendingLegacyContextWarning = new Map();
            };
        }
        function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
                var props = _assign({}, baseProps);
                var defaultProps = Component.defaultProps;
                for (var propName in defaultProps) {
                    if (props[propName] === undefined) {
                        props[propName] = defaultProps[propName];
                    }
                }
                return props;
            }
            return baseProps;
        }
        var MAX_SIGNED_31_BIT_INT = 1073741823;
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
            rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastContextWithAllBitsObserved = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
                isDisallowedContextReadInDEV = false;
            }
        }
        function enterDisallowedContextReadInDEV() {
            {
                isDisallowedContextReadInDEV = true;
            }
        }
        function exitDisallowedContextReadInDEV() {
            {
                isDisallowedContextReadInDEV = false;
            }
        }
        function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context;
            if (isPrimaryRenderer) {
                push(valueCursor, context._currentValue, providerFiber);
                context._currentValue = nextValue;
                {
                    if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
                    }
                    context._currentRenderer = rendererSigil;
                }
            }
            else {
                push(valueCursor, context._currentValue2, providerFiber);
                context._currentValue2 = nextValue;
                {
                    if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
                    }
                    context._currentRenderer2 = rendererSigil;
                }
            }
        }
        function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context = providerFiber.type._context;
            if (isPrimaryRenderer) {
                context._currentValue = currentValue;
            }
            else {
                context._currentValue2 = currentValue;
            }
        }
        function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
                return 0;
            }
            else {
                var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
                {
                    if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                        error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
                    }
                }
                return changedBits | 0;
            }
        }
        function scheduleWorkOnParentPath(parent, renderLanes) {
            var node = parent;
            while (node !== null) {
                var alternate = node.alternate;
                if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                    node.childLanes = mergeLanes(node.childLanes, renderLanes);
                    if (alternate !== null) {
                        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
                    }
                }
                else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
                    alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
                }
                else {
                    break;
                }
                node = node.return;
            }
        }
        function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
            var fiber = workInProgress.child;
            if (fiber !== null) {
                fiber.return = workInProgress;
            }
            while (fiber !== null) {
                var nextFiber = void 0;
                var list = fiber.dependencies;
                if (list !== null) {
                    nextFiber = fiber.child;
                    var dependency = list.firstContext;
                    while (dependency !== null) {
                        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                            if (fiber.tag === ClassComponent) {
                                var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                                update.tag = ForceUpdate;
                                enqueueUpdate(fiber, update);
                            }
                            fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                            var alternate = fiber.alternate;
                            if (alternate !== null) {
                                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                            }
                            scheduleWorkOnParentPath(fiber.return, renderLanes);
                            list.lanes = mergeLanes(list.lanes, renderLanes);
                            break;
                        }
                        dependency = dependency.next;
                    }
                }
                else if (fiber.tag === ContextProvider) {
                    nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
                }
                else {
                    nextFiber = fiber.child;
                }
                if (nextFiber !== null) {
                    nextFiber.return = fiber;
                }
                else {
                    nextFiber = fiber;
                    while (nextFiber !== null) {
                        if (nextFiber === workInProgress) {
                            nextFiber = null;
                            break;
                        }
                        var sibling = nextFiber.sibling;
                        if (sibling !== null) {
                            sibling.return = nextFiber.return;
                            nextFiber = sibling;
                            break;
                        }
                        nextFiber = nextFiber.return;
                    }
                }
                fiber = nextFiber;
            }
        }
        function prepareToReadContext(workInProgress, renderLanes) {
            currentlyRenderingFiber = workInProgress;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress.dependencies;
            if (dependencies !== null) {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                    if (includesSomeLane(dependencies.lanes, renderLanes)) {
                        markWorkInProgressReceivedUpdate();
                    }
                    dependencies.firstContext = null;
                }
            }
        }
        function readContext(context, observedBits) {
            {
                if (isDisallowedContextReadInDEV) {
                    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
                }
            }
            if (lastContextWithAllBitsObserved === context)
                ;
            else if (observedBits === false || observedBits === 0)
                ;
            else {
                var resolvedObservedBits;
                if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
                    lastContextWithAllBitsObserved = context;
                    resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
                }
                else {
                    resolvedObservedBits = observedBits;
                }
                var contextItem = {
                    context: context,
                    observedBits: resolvedObservedBits,
                    next: null
                };
                if (lastContextDependency === null) {
                    if (!(currentlyRenderingFiber !== null)) {
                        {
                            throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                        }
                    }
                    lastContextDependency = contextItem;
                    currentlyRenderingFiber.dependencies = {
                        lanes: NoLanes,
                        firstContext: contextItem,
                        responders: null
                    };
                }
                else {
                    lastContextDependency = lastContextDependency.next = contextItem;
                }
            }
            return isPrimaryRenderer ? context._currentValue : context._currentValue2;
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
            var queue = {
                baseState: fiber.memoizedState,
                firstBaseUpdate: null,
                lastBaseUpdate: null,
                shared: {
                    pending: null
                },
                effects: null
            };
            fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current, workInProgress) {
            var queue = workInProgress.updateQueue;
            var currentQueue = current.updateQueue;
            if (queue === currentQueue) {
                var clone = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: currentQueue.firstBaseUpdate,
                    lastBaseUpdate: currentQueue.lastBaseUpdate,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = clone;
            }
        }
        function createUpdate(eventTime, lane) {
            var update = {
                eventTime: eventTime,
                lane: lane,
                tag: UpdateState,
                payload: null,
                callback: null,
                next: null
            };
            return update;
        }
        function enqueueUpdate(fiber, update) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
                return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
                update.next = update;
            }
            else {
                update.next = pending.next;
                pending.next = update;
            }
            sharedQueue.pending = update;
            {
                if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                    error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
                    didWarnUpdateInsideUpdate = true;
                }
            }
        }
        function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
            var queue = workInProgress.updateQueue;
            var current = workInProgress.alternate;
            if (current !== null) {
                var currentQueue = current.updateQueue;
                if (queue === currentQueue) {
                    var newFirst = null;
                    var newLast = null;
                    var firstBaseUpdate = queue.firstBaseUpdate;
                    if (firstBaseUpdate !== null) {
                        var update = firstBaseUpdate;
                        do {
                            var clone = {
                                eventTime: update.eventTime,
                                lane: update.lane,
                                tag: update.tag,
                                payload: update.payload,
                                callback: update.callback,
                                next: null
                            };
                            if (newLast === null) {
                                newFirst = newLast = clone;
                            }
                            else {
                                newLast.next = clone;
                                newLast = clone;
                            }
                            update = update.next;
                        } while (update !== null);
                        if (newLast === null) {
                            newFirst = newLast = capturedUpdate;
                        }
                        else {
                            newLast.next = capturedUpdate;
                            newLast = capturedUpdate;
                        }
                    }
                    else {
                        newFirst = newLast = capturedUpdate;
                    }
                    queue = {
                        baseState: currentQueue.baseState,
                        firstBaseUpdate: newFirst,
                        lastBaseUpdate: newLast,
                        shared: currentQueue.shared,
                        effects: currentQueue.effects
                    };
                    workInProgress.updateQueue = queue;
                    return;
                }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
                queue.firstBaseUpdate = capturedUpdate;
            }
            else {
                lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
                case ReplaceState:
                    {
                        var payload = update.payload;
                        if (typeof payload === 'function') {
                            {
                                enterDisallowedContextReadInDEV();
                            }
                            var nextState = payload.call(instance, prevState, nextProps);
                            {
                                if (workInProgress.mode & StrictMode) {
                                    disableLogs();
                                    try {
                                        payload.call(instance, prevState, nextProps);
                                    }
                                    finally {
                                        reenableLogs();
                                    }
                                }
                                exitDisallowedContextReadInDEV();
                            }
                            return nextState;
                        }
                        return payload;
                    }
                case CaptureUpdate:
                    {
                        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
                    }
                case UpdateState:
                    {
                        var _payload = update.payload;
                        var partialState;
                        if (typeof _payload === 'function') {
                            {
                                enterDisallowedContextReadInDEV();
                            }
                            partialState = _payload.call(instance, prevState, nextProps);
                            {
                                if (workInProgress.mode & StrictMode) {
                                    disableLogs();
                                    try {
                                        _payload.call(instance, prevState, nextProps);
                                    }
                                    finally {
                                        reenableLogs();
                                    }
                                }
                                exitDisallowedContextReadInDEV();
                            }
                        }
                        else {
                            partialState = _payload;
                        }
                        if (partialState === null || partialState === undefined) {
                            return prevState;
                        }
                        return _assign({}, prevState, partialState);
                    }
                case ForceUpdate:
                    {
                        hasForceUpdate = true;
                        return prevState;
                    }
            }
            return prevState;
        }
        function processUpdateQueue(workInProgress, props, instance, renderLanes) {
            var queue = workInProgress.updateQueue;
            hasForceUpdate = false;
            {
                currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
                queue.shared.pending = null;
                var lastPendingUpdate = pendingQueue;
                var firstPendingUpdate = lastPendingUpdate.next;
                lastPendingUpdate.next = null;
                if (lastBaseUpdate === null) {
                    firstBaseUpdate = firstPendingUpdate;
                }
                else {
                    lastBaseUpdate.next = firstPendingUpdate;
                }
                lastBaseUpdate = lastPendingUpdate;
                var current = workInProgress.alternate;
                if (current !== null) {
                    var currentQueue = current.updateQueue;
                    var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                    if (currentLastBaseUpdate !== lastBaseUpdate) {
                        if (currentLastBaseUpdate === null) {
                            currentQueue.firstBaseUpdate = firstPendingUpdate;
                        }
                        else {
                            currentLastBaseUpdate.next = firstPendingUpdate;
                        }
                        currentQueue.lastBaseUpdate = lastPendingUpdate;
                    }
                }
            }
            if (firstBaseUpdate !== null) {
                var newState = queue.baseState;
                var newLanes = NoLanes;
                var newBaseState = null;
                var newFirstBaseUpdate = null;
                var newLastBaseUpdate = null;
                var update = firstBaseUpdate;
                do {
                    var updateLane = update.lane;
                    var updateEventTime = update.eventTime;
                    if (!isSubsetOfLanes(renderLanes, updateLane)) {
                        var clone = {
                            eventTime: updateEventTime,
                            lane: updateLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLastBaseUpdate === null) {
                            newFirstBaseUpdate = newLastBaseUpdate = clone;
                            newBaseState = newState;
                        }
                        else {
                            newLastBaseUpdate = newLastBaseUpdate.next = clone;
                        }
                        newLanes = mergeLanes(newLanes, updateLane);
                    }
                    else {
                        if (newLastBaseUpdate !== null) {
                            var _clone = {
                                eventTime: updateEventTime,
                                lane: NoLane,
                                tag: update.tag,
                                payload: update.payload,
                                callback: update.callback,
                                next: null
                            };
                            newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                        }
                        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                        var callback = update.callback;
                        if (callback !== null) {
                            workInProgress.flags |= Callback;
                            var effects = queue.effects;
                            if (effects === null) {
                                queue.effects = [update];
                            }
                            else {
                                effects.push(update);
                            }
                        }
                    }
                    update = update.next;
                    if (update === null) {
                        pendingQueue = queue.shared.pending;
                        if (pendingQueue === null) {
                            break;
                        }
                        else {
                            var _lastPendingUpdate = pendingQueue;
                            var _firstPendingUpdate = _lastPendingUpdate.next;
                            _lastPendingUpdate.next = null;
                            update = _firstPendingUpdate;
                            queue.lastBaseUpdate = _lastPendingUpdate;
                            queue.shared.pending = null;
                        }
                    }
                } while (true);
                if (newLastBaseUpdate === null) {
                    newBaseState = newState;
                }
                queue.baseState = newBaseState;
                queue.firstBaseUpdate = newFirstBaseUpdate;
                queue.lastBaseUpdate = newLastBaseUpdate;
                markSkippedUpdateLanes(newLanes);
                workInProgress.lanes = newLanes;
                workInProgress.memoizedState = newState;
            }
            {
                currentlyProcessingQueue = null;
            }
        }
        function callCallback(callback, context) {
            if (!(typeof callback === 'function')) {
                {
                    throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
                }
            }
            callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
                for (var i = 0; i < effects.length; i++) {
                    var effect = effects[i];
                    var callback = effect.callback;
                    if (callback !== null) {
                        effect.callback = null;
                        callCallback(callback, instance);
                    }
                }
            }
        }
        var fakeInternalInstance = {};
        var isArray = Array.isArray;
        var emptyRefsObject = new React.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
            didWarnAboutStateAssignmentForComponent = new Set();
            didWarnAboutUninitializedState = new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
            didWarnAboutDirectlyAssigningPropsToState = new Set();
            didWarnAboutUndefinedDerivedState = new Set();
            didWarnAboutContextTypeAndContextTypes = new Set();
            didWarnAboutInvalidateContextType = new Set();
            var didWarnOnInvalidCallback = new Set();
            warnOnInvalidCallback = function (callback, callerName) {
                if (callback === null || typeof callback === 'function') {
                    return;
                }
                var key = callerName + '_' + callback;
                if (!didWarnOnInvalidCallback.has(key)) {
                    didWarnOnInvalidCallback.add(key);
                    error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
                }
            };
            warnOnUndefinedDerivedState = function (type, partialState) {
                if (partialState === undefined) {
                    var componentName = getComponentName(type) || 'Component';
                    if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                        didWarnAboutUndefinedDerivedState.add(componentName);
                        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
                    }
                }
            };
            Object.defineProperty(fakeInternalInstance, '_processChildContext', {
                enumerable: false,
                value: function () {
                    {
                        {
                            throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                        }
                    }
                }
            });
            Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress.memoizedState;
            {
                if (workInProgress.mode & StrictMode) {
                    disableLogs();
                    try {
                        getDerivedStateFromProps(nextProps, prevState);
                    }
                    finally {
                        reenableLogs();
                    }
                }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
                warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
            workInProgress.memoizedState = memoizedState;
            if (workInProgress.lanes === NoLanes) {
                var updateQueue = workInProgress.updateQueue;
                updateQueue.baseState = memoizedState;
            }
        }
        var classComponentUpdater = {
            isMounted: isMounted,
            enqueueSetState: function (inst, payload, callback) {
                var fiber = get(inst);
                var eventTime = requestEventTime();
                var lane = requestUpdateLane(fiber);
                var update = createUpdate(eventTime, lane);
                update.payload = payload;
                if (callback !== undefined && callback !== null) {
                    {
                        warnOnInvalidCallback(callback, 'setState');
                    }
                    update.callback = callback;
                }
                enqueueUpdate(fiber, update);
                scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueReplaceState: function (inst, payload, callback) {
                var fiber = get(inst);
                var eventTime = requestEventTime();
                var lane = requestUpdateLane(fiber);
                var update = createUpdate(eventTime, lane);
                update.tag = ReplaceState;
                update.payload = payload;
                if (callback !== undefined && callback !== null) {
                    {
                        warnOnInvalidCallback(callback, 'replaceState');
                    }
                    update.callback = callback;
                }
                enqueueUpdate(fiber, update);
                scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueForceUpdate: function (inst, callback) {
                var fiber = get(inst);
                var eventTime = requestEventTime();
                var lane = requestUpdateLane(fiber);
                var update = createUpdate(eventTime, lane);
                update.tag = ForceUpdate;
                if (callback !== undefined && callback !== null) {
                    {
                        warnOnInvalidCallback(callback, 'forceUpdate');
                    }
                    update.callback = callback;
                }
                enqueueUpdate(fiber, update);
                scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
        };
        function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress.stateNode;
            if (typeof instance.shouldComponentUpdate === 'function') {
                {
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            instance.shouldComponentUpdate(newProps, newState, nextContext);
                        }
                        finally {
                            reenableLogs();
                        }
                    }
                }
                var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                {
                    if (shouldUpdate === undefined) {
                        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
                    }
                }
                return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
                return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
        }
        function checkClassInstance(workInProgress, ctor, newProps) {
            var instance = workInProgress.stateNode;
            {
                var name = getComponentName(ctor) || 'Component';
                var renderPresent = instance.render;
                if (!renderPresent) {
                    if (ctor.prototype && typeof ctor.prototype.render === 'function') {
                        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
                    }
                    else {
                        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
                    }
                }
                if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                    error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
                }
                if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                    error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
                }
                if (instance.propTypes) {
                    error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
                }
                if (instance.contextType) {
                    error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
                }
                {
                    if (instance.contextTypes) {
                        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
                    }
                    if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                        didWarnAboutContextTypeAndContextTypes.add(ctor);
                        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
                    }
                }
                if (typeof instance.componentShouldUpdate === 'function') {
                    error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
                }
                if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
                    error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
                }
                if (typeof instance.componentDidUnmount === 'function') {
                    error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
                }
                if (typeof instance.componentDidReceiveProps === 'function') {
                    error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
                }
                if (typeof instance.componentWillRecieveProps === 'function') {
                    error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
                }
                if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
                    error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
                }
                var hasMutatedProps = instance.props !== newProps;
                if (instance.props !== undefined && hasMutatedProps) {
                    error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
                }
                if (instance.defaultProps) {
                    error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
                }
                if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                    error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
                }
                if (typeof instance.getDerivedStateFromProps === 'function') {
                    error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
                }
                if (typeof instance.getDerivedStateFromError === 'function') {
                    error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
                }
                if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
                    error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
                }
                var _state = instance.state;
                if (_state && (typeof _state !== 'object' || isArray(_state))) {
                    error('%s.state: must be set to an object or null', name);
                }
                if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
                    error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
                }
            }
        }
        function adoptClassInstance(workInProgress, instance) {
            instance.updater = classComponentUpdater;
            workInProgress.stateNode = instance;
            set(instance, workInProgress);
            {
                instance._reactInternalInstance = fakeInternalInstance;
            }
        }
        function constructClassInstance(workInProgress, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
                if ('contextType' in ctor) {
                    var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;
                    if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                        didWarnAboutInvalidateContextType.add(ctor);
                        var addendum = '';
                        if (contextType === undefined) {
                            addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
                        }
                        else if (typeof contextType !== 'object') {
                            addendum = ' However, it is set to a ' + typeof contextType + '.';
                        }
                        else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                            addendum = ' Did you accidentally pass the Context.Provider instead?';
                        }
                        else if (contextType._context !== undefined) {
                            addendum = ' Did you accidentally pass the Context.Consumer instead?';
                        }
                        else {
                            addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                        }
                        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
                    }
                }
            }
            if (typeof contextType === 'object' && contextType !== null) {
                context = readContext(contextType);
            }
            else {
                unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                var contextTypes = ctor.contextTypes;
                isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
                context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
            }
            {
                if (workInProgress.mode & StrictMode) {
                    disableLogs();
                    try {
                        new ctor(props, context);
                    }
                    finally {
                        reenableLogs();
                    }
                }
            }
            var instance = new ctor(props, context);
            var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
            adoptClassInstance(workInProgress, instance);
            {
                if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
                    var componentName = getComponentName(ctor) || 'Component';
                    if (!didWarnAboutUninitializedState.has(componentName)) {
                        didWarnAboutUninitializedState.add(componentName);
                        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
                    }
                }
                if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
                    var foundWillMountName = null;
                    var foundWillReceivePropsName = null;
                    var foundWillUpdateName = null;
                    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                        foundWillMountName = 'componentWillMount';
                    }
                    else if (typeof instance.UNSAFE_componentWillMount === 'function') {
                        foundWillMountName = 'UNSAFE_componentWillMount';
                    }
                    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                        foundWillReceivePropsName = 'componentWillReceiveProps';
                    }
                    else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
                    }
                    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                        foundWillUpdateName = 'componentWillUpdate';
                    }
                    else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
                    }
                    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                        var _componentName = getComponentName(ctor) || 'Component';
                        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                            didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                            error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                        }
                    }
                }
            }
            if (isLegacyContextConsumer) {
                cacheContext(workInProgress, unmaskedContext, context);
            }
            return instance;
        }
        function callComponentWillMount(workInProgress, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === 'function') {
                instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === 'function') {
                instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
                {
                    error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
                }
                classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
        }
        function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === 'function') {
                instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
                {
                    var componentName = getComponentName(workInProgress.type) || 'Component';
                    if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                        didWarnAboutStateAssignmentForComponent.add(componentName);
                        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
                    }
                }
                classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
        }
        function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
            {
                checkClassInstance(workInProgress, ctor, newProps);
            }
            var instance = workInProgress.stateNode;
            instance.props = newProps;
            instance.state = workInProgress.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress);
            var contextType = ctor.contextType;
            if (typeof contextType === 'object' && contextType !== null) {
                instance.context = readContext(contextType);
            }
            else {
                var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                instance.context = getMaskedContext(workInProgress, unmaskedContext);
            }
            {
                if (instance.state === newProps) {
                    var componentName = getComponentName(ctor) || 'Component';
                    if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                        didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
                    }
                }
                if (workInProgress.mode & StrictMode) {
                    ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
                }
                {
                    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
                }
            }
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === 'function') {
                applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
                instance.state = workInProgress.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                callComponentWillMount(workInProgress, instance);
                processUpdateQueue(workInProgress, newProps, instance, renderLanes);
                instance.state = workInProgress.memoizedState;
            }
            if (typeof instance.componentDidMount === 'function') {
                workInProgress.flags |= Update;
            }
        }
        function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
            var instance = workInProgress.stateNode;
            var oldProps = workInProgress.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === 'object' && contextType !== null) {
                nextContext = readContext(contextType);
            }
            else {
                var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
                if (oldProps !== newProps || oldContext !== nextContext) {
                    callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
                }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            newState = workInProgress.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
                if (typeof instance.componentDidMount === 'function') {
                    workInProgress.flags |= Update;
                }
                return false;
            }
            if (typeof getDerivedStateFromProps === 'function') {
                applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
                newState = workInProgress.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
                if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                    if (typeof instance.componentWillMount === 'function') {
                        instance.componentWillMount();
                    }
                    if (typeof instance.UNSAFE_componentWillMount === 'function') {
                        instance.UNSAFE_componentWillMount();
                    }
                }
                if (typeof instance.componentDidMount === 'function') {
                    workInProgress.flags |= Update;
                }
            }
            else {
                if (typeof instance.componentDidMount === 'function') {
                    workInProgress.flags |= Update;
                }
                workInProgress.memoizedProps = newProps;
                workInProgress.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
        }
        function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
            var instance = workInProgress.stateNode;
            cloneUpdateQueue(current, workInProgress);
            var unresolvedOldProps = workInProgress.memoizedProps;
            var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === 'object' && contextType !== null) {
                nextContext = readContext(contextType);
            }
            else {
                var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
                if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                    callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
                }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            newState = workInProgress.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
                if (typeof instance.componentDidUpdate === 'function') {
                    if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                        workInProgress.flags |= Update;
                    }
                }
                if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                    if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                        workInProgress.flags |= Snapshot;
                    }
                }
                return false;
            }
            if (typeof getDerivedStateFromProps === 'function') {
                applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
                newState = workInProgress.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
                if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                    if (typeof instance.componentWillUpdate === 'function') {
                        instance.componentWillUpdate(newProps, newState, nextContext);
                    }
                    if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                    }
                }
                if (typeof instance.componentDidUpdate === 'function') {
                    workInProgress.flags |= Update;
                }
                if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                    workInProgress.flags |= Snapshot;
                }
            }
            else {
                if (typeof instance.componentDidUpdate === 'function') {
                    if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                        workInProgress.flags |= Update;
                    }
                }
                if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                    if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                        workInProgress.flags |= Snapshot;
                    }
                }
                workInProgress.memoizedProps = newProps;
                workInProgress.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function (child, returnFiber) { };
        {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function (child, returnFiber) {
                if (child === null || typeof child !== 'object') {
                    return;
                }
                if (!child._store || child._store.validated || child.key != null) {
                    return;
                }
                if (!(typeof child._store === 'object')) {
                    {
                        throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                    }
                }
                child._store.validated = true;
                var componentName = getComponentName(returnFiber.type) || 'Component';
                if (ownerHasKeyUseWarning[componentName]) {
                    return;
                }
                ownerHasKeyUseWarning[componentName] = true;
                error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
            };
        }
        var isArray$1 = Array.isArray;
        function coerceRef(returnFiber, current, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
                {
                    if ((returnFiber.mode & StrictMode || warnAboutStringRefs) &&
                        !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                        var componentName = getComponentName(returnFiber.type) || 'Component';
                        if (!didWarnAboutStringRefs[componentName]) {
                            {
                                error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                            }
                            didWarnAboutStringRefs[componentName] = true;
                        }
                    }
                }
                if (element._owner) {
                    var owner = element._owner;
                    var inst;
                    if (owner) {
                        var ownerFiber = owner;
                        if (!(ownerFiber.tag === ClassComponent)) {
                            {
                                throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                            }
                        }
                        inst = ownerFiber.stateNode;
                    }
                    if (!inst) {
                        {
                            throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                    var stringRef = '' + mixedRef;
                    if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
                        return current.ref;
                    }
                    var ref = function (value) {
                        var refs = inst.refs;
                        if (refs === emptyRefsObject) {
                            refs = inst.refs = {};
                        }
                        if (value === null) {
                            delete refs[stringRef];
                        }
                        else {
                            refs[stringRef] = value;
                        }
                    };
                    ref._stringRef = stringRef;
                    return ref;
                }
                else {
                    if (!(typeof mixedRef === 'string')) {
                        {
                            throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                        }
                    }
                    if (!element._owner) {
                        {
                            throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                        }
                    }
                }
            }
            return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== 'textarea') {
                {
                    {
                        throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead.");
                    }
                }
            }
        }
        function warnOnFunctionType(returnFiber) {
            {
                var componentName = getComponentName(returnFiber.type) || 'Component';
                if (ownerHasFunctionTypeWarning[componentName]) {
                    return;
                }
                ownerHasFunctionTypeWarning[componentName] = true;
                error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
            }
        }
        function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
                if (!shouldTrackSideEffects) {
                    return;
                }
                var last = returnFiber.lastEffect;
                if (last !== null) {
                    last.nextEffect = childToDelete;
                    returnFiber.lastEffect = childToDelete;
                }
                else {
                    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
                }
                childToDelete.nextEffect = null;
                childToDelete.flags = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
                if (!shouldTrackSideEffects) {
                    return null;
                }
                var childToDelete = currentFirstChild;
                while (childToDelete !== null) {
                    deleteChild(returnFiber, childToDelete);
                    childToDelete = childToDelete.sibling;
                }
                return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
                var existingChildren = new Map();
                var existingChild = currentFirstChild;
                while (existingChild !== null) {
                    if (existingChild.key !== null) {
                        existingChildren.set(existingChild.key, existingChild);
                    }
                    else {
                        existingChildren.set(existingChild.index, existingChild);
                    }
                    existingChild = existingChild.sibling;
                }
                return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
                var clone = createWorkInProgress(fiber, pendingProps);
                clone.index = 0;
                clone.sibling = null;
                return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
                newFiber.index = newIndex;
                if (!shouldTrackSideEffects) {
                    return lastPlacedIndex;
                }
                var current = newFiber.alternate;
                if (current !== null) {
                    var oldIndex = current.index;
                    if (oldIndex < lastPlacedIndex) {
                        newFiber.flags = Placement;
                        return lastPlacedIndex;
                    }
                    else {
                        return oldIndex;
                    }
                }
                else {
                    newFiber.flags = Placement;
                    return lastPlacedIndex;
                }
            }
            function placeSingleChild(newFiber) {
                if (shouldTrackSideEffects && newFiber.alternate === null) {
                    newFiber.flags = Placement;
                }
                return newFiber;
            }
            function updateTextNode(returnFiber, current, textContent, lanes) {
                if (current === null || current.tag !== HostText) {
                    var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                    created.return = returnFiber;
                    return created;
                }
                else {
                    var existing = useFiber(current, textContent);
                    existing.return = returnFiber;
                    return existing;
                }
            }
            function updateElement(returnFiber, current, element, lanes) {
                if (current !== null) {
                    if (current.elementType === element.type || (isCompatibleFamilyForHotReloading(current, element))) {
                        var existing = useFiber(current, element.props);
                        existing.ref = coerceRef(returnFiber, current, element);
                        existing.return = returnFiber;
                        {
                            existing._debugSource = element._source;
                            existing._debugOwner = element._owner;
                        }
                        return existing;
                    }
                }
                var created = createFiberFromElement(element, returnFiber.mode, lanes);
                created.ref = coerceRef(returnFiber, current, element);
                created.return = returnFiber;
                return created;
            }
            function updatePortal(returnFiber, current, portal, lanes) {
                if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
                    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                    created.return = returnFiber;
                    return created;
                }
                else {
                    var existing = useFiber(current, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                }
            }
            function updateFragment(returnFiber, current, fragment, lanes, key) {
                if (current === null || current.tag !== Fragment) {
                    var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                    created.return = returnFiber;
                    return created;
                }
                else {
                    var existing = useFiber(current, fragment);
                    existing.return = returnFiber;
                    return existing;
                }
            }
            function createChild(returnFiber, newChild, lanes) {
                if (typeof newChild === 'string' || typeof newChild === 'number') {
                    var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
                    created.return = returnFiber;
                    return created;
                }
                if (typeof newChild === 'object' && newChild !== null) {
                    switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                            {
                                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                                _created.ref = coerceRef(returnFiber, null, newChild);
                                _created.return = returnFiber;
                                return _created;
                            }
                        case REACT_PORTAL_TYPE:
                            {
                                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                                _created2.return = returnFiber;
                                return _created2;
                            }
                    }
                    if (isArray$1(newChild) || getIteratorFn(newChild)) {
                        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                        _created3.return = returnFiber;
                        return _created3;
                    }
                    throwOnInvalidObjectType(returnFiber, newChild);
                }
                {
                    if (typeof newChild === 'function') {
                        warnOnFunctionType(returnFiber);
                    }
                }
                return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
                var key = oldFiber !== null ? oldFiber.key : null;
                if (typeof newChild === 'string' || typeof newChild === 'number') {
                    if (key !== null) {
                        return null;
                    }
                    return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
                }
                if (typeof newChild === 'object' && newChild !== null) {
                    switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                            {
                                if (newChild.key === key) {
                                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                                        return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                                    }
                                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                                }
                                else {
                                    return null;
                                }
                            }
                        case REACT_PORTAL_TYPE:
                            {
                                if (newChild.key === key) {
                                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                                }
                                else {
                                    return null;
                                }
                            }
                    }
                    if (isArray$1(newChild) || getIteratorFn(newChild)) {
                        if (key !== null) {
                            return null;
                        }
                        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                    }
                    throwOnInvalidObjectType(returnFiber, newChild);
                }
                {
                    if (typeof newChild === 'function') {
                        warnOnFunctionType(returnFiber);
                    }
                }
                return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
                if (typeof newChild === 'string' || typeof newChild === 'number') {
                    var matchedFiber = existingChildren.get(newIdx) || null;
                    return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
                }
                if (typeof newChild === 'object' && newChild !== null) {
                    switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                            {
                                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                                if (newChild.type === REACT_FRAGMENT_TYPE) {
                                    return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                                }
                                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                            }
                        case REACT_PORTAL_TYPE:
                            {
                                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                            }
                    }
                    if (isArray$1(newChild) || getIteratorFn(newChild)) {
                        var _matchedFiber3 = existingChildren.get(newIdx) || null;
                        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                    }
                    throwOnInvalidObjectType(returnFiber, newChild);
                }
                {
                    if (typeof newChild === 'function') {
                        warnOnFunctionType(returnFiber);
                    }
                }
                return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
                {
                    if (typeof child !== 'object' || child === null) {
                        return knownKeys;
                    }
                    switch (child.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                        case REACT_PORTAL_TYPE:
                            warnForMissingKey(child, returnFiber);
                            var key = child.key;
                            if (typeof key !== 'string') {
                                break;
                            }
                            if (knownKeys === null) {
                                knownKeys = new Set();
                                knownKeys.add(key);
                                break;
                            }
                            if (!knownKeys.has(key)) {
                                knownKeys.add(key);
                                break;
                            }
                            error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
                            break;
                    }
                }
                return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
                {
                    var knownKeys = null;
                    for (var i = 0; i < newChildren.length; i++) {
                        var child = newChildren[i];
                        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                    }
                }
                var resultingFirstChild = null;
                var previousNewFiber = null;
                var oldFiber = currentFirstChild;
                var lastPlacedIndex = 0;
                var newIdx = 0;
                var nextOldFiber = null;
                for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                    if (oldFiber.index > newIdx) {
                        nextOldFiber = oldFiber;
                        oldFiber = null;
                    }
                    else {
                        nextOldFiber = oldFiber.sibling;
                    }
                    var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                    if (newFiber === null) {
                        if (oldFiber === null) {
                            oldFiber = nextOldFiber;
                        }
                        break;
                    }
                    if (shouldTrackSideEffects) {
                        if (oldFiber && newFiber.alternate === null) {
                            deleteChild(returnFiber, oldFiber);
                        }
                    }
                    lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) {
                        resultingFirstChild = newFiber;
                    }
                    else {
                        previousNewFiber.sibling = newFiber;
                    }
                    previousNewFiber = newFiber;
                    oldFiber = nextOldFiber;
                }
                if (newIdx === newChildren.length) {
                    deleteRemainingChildren(returnFiber, oldFiber);
                    return resultingFirstChild;
                }
                if (oldFiber === null) {
                    for (; newIdx < newChildren.length; newIdx++) {
                        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                        if (_newFiber === null) {
                            continue;
                        }
                        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                        if (previousNewFiber === null) {
                            resultingFirstChild = _newFiber;
                        }
                        else {
                            previousNewFiber.sibling = _newFiber;
                        }
                        previousNewFiber = _newFiber;
                    }
                    return resultingFirstChild;
                }
                var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
                for (; newIdx < newChildren.length; newIdx++) {
                    var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                    if (_newFiber2 !== null) {
                        if (shouldTrackSideEffects) {
                            if (_newFiber2.alternate !== null) {
                                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                            }
                        }
                        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                        if (previousNewFiber === null) {
                            resultingFirstChild = _newFiber2;
                        }
                        else {
                            previousNewFiber.sibling = _newFiber2;
                        }
                        previousNewFiber = _newFiber2;
                    }
                }
                if (shouldTrackSideEffects) {
                    existingChildren.forEach(function (child) {
                        return deleteChild(returnFiber, child);
                    });
                }
                return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
                var iteratorFn = getIteratorFn(newChildrenIterable);
                if (!(typeof iteratorFn === 'function')) {
                    {
                        throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                    }
                }
                {
                    if (typeof Symbol === 'function' &&
                        newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                        if (!didWarnAboutGenerators) {
                            error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
                        }
                        didWarnAboutGenerators = true;
                    }
                    if (newChildrenIterable.entries === iteratorFn) {
                        if (!didWarnAboutMaps) {
                            error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
                        }
                        didWarnAboutMaps = true;
                    }
                    var _newChildren = iteratorFn.call(newChildrenIterable);
                    if (_newChildren) {
                        var knownKeys = null;
                        var _step = _newChildren.next();
                        for (; !_step.done; _step = _newChildren.next()) {
                            var child = _step.value;
                            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                        }
                    }
                }
                var newChildren = iteratorFn.call(newChildrenIterable);
                if (!(newChildren != null)) {
                    {
                        throw Error("An iterable object provided no iterator.");
                    }
                }
                var resultingFirstChild = null;
                var previousNewFiber = null;
                var oldFiber = currentFirstChild;
                var lastPlacedIndex = 0;
                var newIdx = 0;
                var nextOldFiber = null;
                var step = newChildren.next();
                for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                    if (oldFiber.index > newIdx) {
                        nextOldFiber = oldFiber;
                        oldFiber = null;
                    }
                    else {
                        nextOldFiber = oldFiber.sibling;
                    }
                    var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                    if (newFiber === null) {
                        if (oldFiber === null) {
                            oldFiber = nextOldFiber;
                        }
                        break;
                    }
                    if (shouldTrackSideEffects) {
                        if (oldFiber && newFiber.alternate === null) {
                            deleteChild(returnFiber, oldFiber);
                        }
                    }
                    lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) {
                        resultingFirstChild = newFiber;
                    }
                    else {
                        previousNewFiber.sibling = newFiber;
                    }
                    previousNewFiber = newFiber;
                    oldFiber = nextOldFiber;
                }
                if (step.done) {
                    deleteRemainingChildren(returnFiber, oldFiber);
                    return resultingFirstChild;
                }
                if (oldFiber === null) {
                    for (; !step.done; newIdx++, step = newChildren.next()) {
                        var _newFiber3 = createChild(returnFiber, step.value, lanes);
                        if (_newFiber3 === null) {
                            continue;
                        }
                        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                        if (previousNewFiber === null) {
                            resultingFirstChild = _newFiber3;
                        }
                        else {
                            previousNewFiber.sibling = _newFiber3;
                        }
                        previousNewFiber = _newFiber3;
                    }
                    return resultingFirstChild;
                }
                var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
                for (; !step.done; newIdx++, step = newChildren.next()) {
                    var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                    if (_newFiber4 !== null) {
                        if (shouldTrackSideEffects) {
                            if (_newFiber4.alternate !== null) {
                                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                            }
                        }
                        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                        if (previousNewFiber === null) {
                            resultingFirstChild = _newFiber4;
                        }
                        else {
                            previousNewFiber.sibling = _newFiber4;
                        }
                        previousNewFiber = _newFiber4;
                    }
                }
                if (shouldTrackSideEffects) {
                    existingChildren.forEach(function (child) {
                        return deleteChild(returnFiber, child);
                    });
                }
                return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
                if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                    var existing = useFiber(currentFirstChild, textContent);
                    existing.return = returnFiber;
                    return existing;
                }
                deleteRemainingChildren(returnFiber, currentFirstChild);
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
                var key = element.key;
                var child = currentFirstChild;
                while (child !== null) {
                    if (child.key === key) {
                        switch (child.tag) {
                            case Fragment:
                                {
                                    if (element.type === REACT_FRAGMENT_TYPE) {
                                        deleteRemainingChildren(returnFiber, child.sibling);
                                        var existing = useFiber(child, element.props.children);
                                        existing.return = returnFiber;
                                        {
                                            existing._debugSource = element._source;
                                            existing._debugOwner = element._owner;
                                        }
                                        return existing;
                                    }
                                    break;
                                }
                            case Block:
                            default:
                                {
                                    if (child.elementType === element.type || (isCompatibleFamilyForHotReloading(child, element))) {
                                        deleteRemainingChildren(returnFiber, child.sibling);
                                        var _existing3 = useFiber(child, element.props);
                                        _existing3.ref = coerceRef(returnFiber, child, element);
                                        _existing3.return = returnFiber;
                                        {
                                            _existing3._debugSource = element._source;
                                            _existing3._debugOwner = element._owner;
                                        }
                                        return _existing3;
                                    }
                                    break;
                                }
                        }
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                    else {
                        deleteChild(returnFiber, child);
                    }
                    child = child.sibling;
                }
                if (element.type === REACT_FRAGMENT_TYPE) {
                    var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                    created.return = returnFiber;
                    return created;
                }
                else {
                    var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                    _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                    _created4.return = returnFiber;
                    return _created4;
                }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
                var key = portal.key;
                var child = currentFirstChild;
                while (child !== null) {
                    if (child.key === key) {
                        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                            deleteRemainingChildren(returnFiber, child.sibling);
                            var existing = useFiber(child, portal.children || []);
                            existing.return = returnFiber;
                            return existing;
                        }
                        else {
                            deleteRemainingChildren(returnFiber, child);
                            break;
                        }
                    }
                    else {
                        deleteChild(returnFiber, child);
                    }
                    child = child.sibling;
                }
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
                var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
                if (isUnkeyedTopLevelFragment) {
                    newChild = newChild.props.children;
                }
                var isObject = typeof newChild === 'object' && newChild !== null;
                if (isObject) {
                    switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                            return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                        case REACT_PORTAL_TYPE:
                            return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                    }
                }
                if (typeof newChild === 'string' || typeof newChild === 'number') {
                    return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
                }
                if (isArray$1(newChild)) {
                    return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                    return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (isObject) {
                    throwOnInvalidObjectType(returnFiber, newChild);
                }
                {
                    if (typeof newChild === 'function') {
                        warnOnFunctionType(returnFiber);
                    }
                }
                if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
                    switch (returnFiber.tag) {
                        case ClassComponent:
                            {
                                {
                                    var instance = returnFiber.stateNode;
                                    if (instance.render._isMockFunction) {
                                        break;
                                    }
                                }
                            }
                        case Block:
                        case FunctionComponent:
                        case ForwardRef:
                        case SimpleMemoComponent:
                            {
                                {
                                    {
                                        throw Error((getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                                    }
                                }
                            }
                    }
                }
                return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current, workInProgress) {
            if (!(current === null || workInProgress.child === current.child)) {
                {
                    throw Error("Resuming work not yet implemented.");
                }
            }
            if (workInProgress.child === null) {
                return;
            }
            var currentChild = workInProgress.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress.child = newChild;
            newChild.return = workInProgress;
            while (currentChild.sibling !== null) {
                currentChild = currentChild.sibling;
                newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
                newChild.return = workInProgress;
            }
            newChild.sibling = null;
        }
        function resetChildFibers(workInProgress, lanes) {
            var child = workInProgress.child;
            while (child !== null) {
                resetWorkInProgress(child, lanes);
                child = child.sibling;
            }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
            if (!(c !== NO_CONTEXT)) {
                {
                    throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
            }
            return c;
        }
        function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
        }
        function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type, rootInstance);
            if (context === nextContext) {
                return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
                return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
            var nextState = workInProgress.memoizedState;
            if (nextState !== null) {
                if (nextState.dehydrated !== null) {
                    return true;
                }
                return false;
            }
            var props = workInProgress.memoizedProps;
            if (props.fallback === undefined) {
                return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
                return true;
            }
            if (hasInvisibleParent) {
                return false;
            }
            return true;
        }
        function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
                if (node.tag === SuspenseComponent) {
                    var state = node.memoizedState;
                    if (state !== null) {
                        var dehydrated = state.dehydrated;
                        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                            return node;
                        }
                    }
                }
                else if (node.tag === SuspenseListComponent &&
                    node.memoizedProps.revealOrder !== undefined) {
                    var didSuspend = (node.flags & DidCapture) !== NoFlags;
                    if (didSuspend) {
                        return node;
                    }
                }
                else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
                if (node === row) {
                    return null;
                }
                while (node.sibling === null) {
                    if (node.return === null || node.return === row) {
                        return null;
                    }
                    node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
            }
            return null;
        }
        var NoFlags$1 = 0;
        var HasEffect = 1;
        var Layout = 2;
        var Passive$1 = 4;
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        function enterHydrationState(fiber) {
            if (!supportsHydration) {
                return false;
            }
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
        }
        function deleteHydratableInstance(returnFiber, instance) {
            {
                switch (returnFiber.tag) {
                    case HostRoot:
                        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                        break;
                    case HostComponent:
                        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                        break;
                }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.flags = Deletion;
            if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
            }
            else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            {
                switch (returnFiber.tag) {
                    case HostRoot:
                        {
                            var parentContainer = returnFiber.stateNode.containerInfo;
                            switch (fiber.tag) {
                                case HostComponent:
                                    var type = fiber.type;
                                    var props = fiber.pendingProps;
                                    didNotFindHydratableContainerInstance(parentContainer, type, props);
                                    break;
                                case HostText:
                                    var text = fiber.pendingProps;
                                    didNotFindHydratableContainerTextInstance(parentContainer, text);
                                    break;
                                case SuspenseComponent:
                                    didNotFindHydratableContainerSuspenseInstance(parentContainer);
                                    break;
                            }
                            break;
                        }
                    case HostComponent:
                        {
                            var parentType = returnFiber.type;
                            var parentProps = returnFiber.memoizedProps;
                            var parentInstance = returnFiber.stateNode;
                            switch (fiber.tag) {
                                case HostComponent:
                                    var _type = fiber.type;
                                    var _props = fiber.pendingProps;
                                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                                    break;
                                case HostText:
                                    var _text = fiber.pendingProps;
                                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                                    break;
                                case SuspenseComponent:
                                    didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
                                    break;
                            }
                            break;
                        }
                    default:
                        return;
                }
            }
        }
        function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
                case HostComponent:
                    {
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        var instance = canHydrateInstance(nextInstance, type, props);
                        if (instance !== null) {
                            fiber.stateNode = instance;
                            return true;
                        }
                        return false;
                    }
                case HostText:
                    {
                        var text = fiber.pendingProps;
                        var textInstance = canHydrateTextInstance(nextInstance, text);
                        if (textInstance !== null) {
                            fiber.stateNode = textInstance;
                            return true;
                        }
                        return false;
                    }
                case SuspenseComponent:
                    {
                        return false;
                    }
                default:
                    return false;
            }
        }
        function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
                return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
                nextInstance = getNextHydratableSibling(firstAttemptedInstance);
                if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                    insertNonHydratedInstance(hydrationParentFiber, fiber);
                    isHydrating = false;
                    hydrationParentFiber = fiber;
                    return;
                }
                deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            if (!supportsHydration) {
                {
                    {
                        throw Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
                    }
                }
            }
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
                return true;
            }
            return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
            if (!supportsHydration) {
                {
                    {
                        throw Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
                    }
                }
            }
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
                if (shouldUpdate) {
                    var returnFiber = hydrationParentFiber;
                    if (returnFiber !== null) {
                        switch (returnFiber.tag) {
                            case HostRoot:
                                {
                                    var parentContainer = returnFiber.stateNode.containerInfo;
                                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                                    break;
                                }
                            case HostComponent:
                                {
                                    var parentType = returnFiber.type;
                                    var parentProps = returnFiber.memoizedProps;
                                    var parentInstance = returnFiber.stateNode;
                                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                                    break;
                                }
                        }
                    }
                }
            }
            return shouldUpdate;
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
            if (!supportsHydration) {
                {
                    {
                        throw Error("Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
                    }
                }
            }
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
                {
                    throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
                }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
                parent = parent.return;
            }
            hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
            if (!supportsHydration) {
                return false;
            }
            if (fiber !== hydrationParentFiber) {
                return false;
            }
            if (!isHydrating) {
                popToNextHostParent(fiber);
                isHydrating = true;
                return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
                var nextInstance = nextHydratableInstance;
                while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
                nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            }
            else {
                nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
        }
        function resetHydrationState() {
            if (!supportsHydration) {
                return;
            }
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
        }
        function getIsHydrating() {
            return isHydrating;
        }
        var workInProgressSources = [];
        var rendererSigil$1;
        {
            rendererSigil$1 = {};
        }
        function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource);
        }
        function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
                var mutableSource = workInProgressSources[i];
                if (isPrimaryRenderer) {
                    mutableSource._workInProgressVersionPrimary = null;
                }
                else {
                    mutableSource._workInProgressVersionSecondary = null;
                }
            }
            workInProgressSources.length = 0;
        }
        function getWorkInProgressVersion(mutableSource) {
            if (isPrimaryRenderer) {
                return mutableSource._workInProgressVersionPrimary;
            }
            else {
                return mutableSource._workInProgressVersionSecondary;
            }
        }
        function setWorkInProgressVersion(mutableSource, version) {
            if (isPrimaryRenderer) {
                mutableSource._workInProgressVersionPrimary = version;
            }
            else {
                mutableSource._workInProgressVersionSecondary = version;
            }
            workInProgressSources.push(mutableSource);
        }
        function warnAboutMultipleRenderersDEV(mutableSource) {
            {
                if (isPrimaryRenderer) {
                    if (mutableSource._currentPrimaryRenderer == null) {
                        mutableSource._currentPrimaryRenderer = rendererSigil$1;
                    }
                    else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                        error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');
                    }
                }
                else {
                    if (mutableSource._currentSecondaryRenderer == null) {
                        mutableSource._currentSecondaryRenderer = rendererSigil$1;
                    }
                    else if (mutableSource._currentSecondaryRenderer !== rendererSigil$1) {
                        error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');
                    }
                }
            }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnAboutUseOpaqueIdentifier;
        {
            didWarnAboutUseOpaqueIdentifier = {};
            didWarnAboutMismatchedHooksForComponent = new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
            {
                var hookName = currentHookNameInDev;
                if (hookTypesDev === null) {
                    hookTypesDev = [hookName];
                }
                else {
                    hookTypesDev.push(hookName);
                }
            }
        }
        function updateHookTypesDev() {
            {
                var hookName = currentHookNameInDev;
                if (hookTypesDev !== null) {
                    hookTypesUpdateIndexDev++;
                    if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                        warnOnHookMismatchInDev(hookName);
                    }
                }
            }
        }
        function checkDepsAreArrayDev(deps) {
            {
                if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
                    error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
                }
            }
        }
        function warnOnHookMismatchInDev(currentHookName) {
            {
                var componentName = getComponentName(currentlyRenderingFiber$1.type);
                if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                    didWarnAboutMismatchedHooksForComponent.add(componentName);
                    if (hookTypesDev !== null) {
                        var table = '';
                        var secondColumnStart = 30;
                        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                            var oldHookName = hookTypesDev[i];
                            var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                            var row = i + 1 + ". " + oldHookName;
                            while (row.length < secondColumnStart) {
                                row += ' ';
                            }
                            row += newHookName + '\n';
                            table += row;
                        }
                        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
                    }
                }
            }
        }
        function throwInvalidHookError() {
            {
                {
                    throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
                }
            }
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
            {
                if (ignorePreviousDependencies) {
                    return false;
                }
            }
            if (prevDeps === null) {
                {
                    error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
                }
                return false;
            }
            {
                if (nextDeps.length !== prevDeps.length) {
                    error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
                }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
                if (objectIs(nextDeps[i], prevDeps[i])) {
                    continue;
                }
                return false;
            }
            return true;
        }
        function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress;
            {
                hookTypesDev = current !== null ? current._debugHookTypes : null;
                hookTypesUpdateIndexDev = -1;
                ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
            }
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null;
            workInProgress.lanes = NoLanes;
            {
                if (current !== null && current.memoizedState !== null) {
                    ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
                }
                else if (hookTypesDev !== null) {
                    ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
                }
                else {
                    ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
                }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
                var numberOfReRenders = 0;
                do {
                    didScheduleRenderPhaseUpdateDuringThisPass = false;
                    if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                        {
                            throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                        }
                    }
                    numberOfReRenders += 1;
                    {
                        ignorePreviousDependencies = false;
                    }
                    currentHook = null;
                    workInProgressHook = null;
                    workInProgress.updateQueue = null;
                    {
                        hookTypesUpdateIndexDev = -1;
                    }
                    ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                    children = Component(props, secondArg);
                } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
                workInProgress._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
                currentHookNameInDev = null;
                hookTypesDev = null;
                hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
                {
                    throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
                }
            }
            return children;
        }
        function bailoutHooks(current, workInProgress, lanes) {
            workInProgress.updateQueue = current.updateQueue;
            workInProgress.flags &= ~(Passive | Update);
            current.lanes = removeLanes(current.lanes, lanes);
        }
        function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
                var hook = currentlyRenderingFiber$1.memoizedState;
                while (hook !== null) {
                    var queue = hook.queue;
                    if (queue !== null) {
                        queue.pending = null;
                    }
                    hook = hook.next;
                }
                didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
                hookTypesDev = null;
                hookTypesUpdateIndexDev = -1;
                currentHookNameInDev = null;
                isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
        }
        function mountWorkInProgressHook() {
            var hook = {
                memoizedState: null,
                baseState: null,
                baseQueue: null,
                queue: null,
                next: null
            };
            if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            }
            else {
                workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
        }
        function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
                var current = currentlyRenderingFiber$1.alternate;
                if (current !== null) {
                    nextCurrentHook = current.memoizedState;
                }
                else {
                    nextCurrentHook = null;
                }
            }
            else {
                nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
                nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            }
            else {
                nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
                workInProgressHook = nextWorkInProgressHook;
                nextWorkInProgressHook = workInProgressHook.next;
                currentHook = nextCurrentHook;
            }
            else {
                if (!(nextCurrentHook !== null)) {
                    {
                        throw Error("Rendered more hooks than during the previous render.");
                    }
                }
                currentHook = nextCurrentHook;
                var newHook = {
                    memoizedState: currentHook.memoizedState,
                    baseState: currentHook.baseState,
                    baseQueue: currentHook.baseQueue,
                    queue: currentHook.queue,
                    next: null
                };
                if (workInProgressHook === null) {
                    currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
                }
                else {
                    workInProgressHook = workInProgressHook.next = newHook;
                }
            }
            return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
            return {
                lastEffect: null
            };
        }
        function basicStateReducer(state, action) {
            return typeof action === 'function' ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== undefined) {
                initialState = init(initialArg);
            }
            else {
                initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: reducer,
                lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
                {
                    throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
                }
            }
            queue.lastRenderedReducer = reducer;
            var current = currentHook;
            var baseQueue = current.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
                if (baseQueue !== null) {
                    var baseFirst = baseQueue.next;
                    var pendingFirst = pendingQueue.next;
                    baseQueue.next = pendingFirst;
                    pendingQueue.next = baseFirst;
                }
                {
                    if (current.baseQueue !== baseQueue) {
                        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
                    }
                }
                current.baseQueue = baseQueue = pendingQueue;
                queue.pending = null;
            }
            if (baseQueue !== null) {
                var first = baseQueue.next;
                var newState = current.baseState;
                var newBaseState = null;
                var newBaseQueueFirst = null;
                var newBaseQueueLast = null;
                var update = first;
                do {
                    var updateLane = update.lane;
                    if (!isSubsetOfLanes(renderLanes, updateLane)) {
                        var clone = {
                            lane: updateLane,
                            action: update.action,
                            eagerReducer: update.eagerReducer,
                            eagerState: update.eagerState,
                            next: null
                        };
                        if (newBaseQueueLast === null) {
                            newBaseQueueFirst = newBaseQueueLast = clone;
                            newBaseState = newState;
                        }
                        else {
                            newBaseQueueLast = newBaseQueueLast.next = clone;
                        }
                        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                        markSkippedUpdateLanes(updateLane);
                    }
                    else {
                        if (newBaseQueueLast !== null) {
                            var _clone = {
                                lane: NoLane,
                                action: update.action,
                                eagerReducer: update.eagerReducer,
                                eagerState: update.eagerState,
                                next: null
                            };
                            newBaseQueueLast = newBaseQueueLast.next = _clone;
                        }
                        if (update.eagerReducer === reducer) {
                            newState = update.eagerState;
                        }
                        else {
                            var action = update.action;
                            newState = reducer(newState, action);
                        }
                    }
                    update = update.next;
                } while (update !== null && update !== first);
                if (newBaseQueueLast === null) {
                    newBaseState = newState;
                }
                else {
                    newBaseQueueLast.next = newBaseQueueFirst;
                }
                if (!objectIs(newState, hook.memoizedState)) {
                    markWorkInProgressReceivedUpdate();
                }
                hook.memoizedState = newState;
                hook.baseState = newBaseState;
                hook.baseQueue = newBaseQueueLast;
                queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
                {
                    throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
                }
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
                queue.pending = null;
                var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                var update = firstRenderPhaseUpdate;
                do {
                    var action = update.action;
                    newState = reducer(newState, action);
                    update = update.next;
                } while (update !== firstRenderPhaseUpdate);
                if (!objectIs(newState, hook.memoizedState)) {
                    markWorkInProgressReceivedUpdate();
                }
                hook.memoizedState = newState;
                if (hook.baseQueue === null) {
                    hook.baseState = newState;
                }
                queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
        }
        function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
            {
                warnAboutMultipleRenderersDEV(source);
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var isSafeToReadFromSource = false;
            var currentRenderVersion = getWorkInProgressVersion(source);
            if (currentRenderVersion !== null) {
                isSafeToReadFromSource = currentRenderVersion === version;
            }
            else {
                isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes);
                if (isSafeToReadFromSource) {
                    setWorkInProgressVersion(source, version);
                }
            }
            if (isSafeToReadFromSource) {
                var snapshot = getSnapshot(source._source);
                {
                    if (typeof snapshot === 'function') {
                        error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
                    }
                }
                return snapshot;
            }
            else {
                markSourceAsDirty(source);
                {
                    {
                        throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                    }
                }
            }
        }
        function useMutableSource(hook, source, getSnapshot, subscribe) {
            var root = getWorkInProgressRoot();
            if (!(root !== null)) {
                {
                    throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
                }
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var dispatcher = ReactCurrentDispatcher$1.current;
            var _dispatcher$useState = dispatcher.useState(function () {
                return readFromUnsubcribedMutableSource(root, source, getSnapshot);
            }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
            var snapshot = currentSnapshot;
            var stateHook = workInProgressHook;
            var memoizedState = hook.memoizedState;
            var refs = memoizedState.refs;
            var prevGetSnapshot = refs.getSnapshot;
            var prevSource = memoizedState.source;
            var prevSubscribe = memoizedState.subscribe;
            var fiber = currentlyRenderingFiber$1;
            hook.memoizedState = {
                refs: refs,
                source: source,
                subscribe: subscribe
            };
            dispatcher.useEffect(function () {
                refs.getSnapshot = getSnapshot;
                refs.setSnapshot = setSnapshot;
                var maybeNewVersion = getVersion(source._source);
                if (!objectIs(version, maybeNewVersion)) {
                    var maybeNewSnapshot = getSnapshot(source._source);
                    {
                        if (typeof maybeNewSnapshot === 'function') {
                            error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
                        }
                    }
                    if (!objectIs(snapshot, maybeNewSnapshot)) {
                        setSnapshot(maybeNewSnapshot);
                        var lane = requestUpdateLane(fiber);
                        markRootMutableRead(root, lane);
                    }
                    markRootEntangled(root, root.mutableReadLanes);
                }
            }, [getSnapshot, source, subscribe]);
            dispatcher.useEffect(function () {
                var handleChange = function () {
                    var latestGetSnapshot = refs.getSnapshot;
                    var latestSetSnapshot = refs.setSnapshot;
                    try {
                        latestSetSnapshot(latestGetSnapshot(source._source));
                        var lane = requestUpdateLane(fiber);
                        markRootMutableRead(root, lane);
                    }
                    catch (error) {
                        latestSetSnapshot(function () {
                            throw error;
                        });
                    }
                };
                var unsubscribe = subscribe(source._source, handleChange);
                {
                    if (typeof unsubscribe !== 'function') {
                        error('Mutable source subscribe function must return an unsubscribe function.');
                    }
                }
                return unsubscribe;
            }, [source, subscribe]);
            if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
                var newQueue = {
                    pending: null,
                    dispatch: null,
                    lastRenderedReducer: basicStateReducer,
                    lastRenderedState: snapshot
                };
                newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
                stateHook.queue = newQueue;
                stateHook.baseQueue = null;
                snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
                stateHook.memoizedState = stateHook.baseState = snapshot;
            }
            return snapshot;
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = {
                refs: {
                    getSnapshot: getSnapshot,
                    setSnapshot: null
                },
                source: source,
                subscribe: subscribe
            };
            return useMutableSource(hook, source, getSnapshot, subscribe);
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
            var hook = updateWorkInProgressHook();
            return useMutableSource(hook, source, getSnapshot, subscribe);
        }
        function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === 'function') {
                initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
            return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
            var effect = {
                tag: tag,
                create: create,
                destroy: destroy,
                deps: deps,
                next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
                componentUpdateQueue = createFunctionComponentUpdateQueue();
                currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
                componentUpdateQueue.lastEffect = effect.next = effect;
            }
            else {
                var lastEffect = componentUpdateQueue.lastEffect;
                if (lastEffect === null) {
                    componentUpdateQueue.lastEffect = effect.next = effect;
                }
                else {
                    var firstEffect = lastEffect.next;
                    lastEffect.next = effect;
                    effect.next = firstEffect;
                    componentUpdateQueue.lastEffect = effect;
                }
            }
            return effect;
        }
        function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
                current: initialValue
            };
            {
                Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
        }
        function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === undefined ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === undefined ? null : deps;
            var destroy = undefined;
            if (currentHook !== null) {
                var prevEffect = currentHook.memoizedState;
                destroy = prevEffect.destroy;
                if (nextDeps !== null) {
                    var prevDeps = prevEffect.deps;
                    if (areHookInputsEqual(nextDeps, prevDeps)) {
                        pushEffect(hookFlags, create, destroy, nextDeps);
                        return;
                    }
                }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
            {
                if ('undefined' !== typeof jest) {
                    warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
                }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function updateEffect(create, deps) {
            {
                if ('undefined' !== typeof jest) {
                    warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
                }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function mountLayoutEffect(create, deps) {
            return mountEffectImpl(Update, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
            if (typeof ref === 'function') {
                var refCallback = ref;
                var _inst = create();
                refCallback(_inst);
                return function () {
                    refCallback(null);
                };
            }
            else if (ref !== null && ref !== undefined) {
                var refObject = ref;
                {
                    if (!refObject.hasOwnProperty('current')) {
                        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
                    }
                }
                var _inst2 = create();
                refObject.current = _inst2;
                return function () {
                    refObject.current = null;
                };
            }
        }
        function mountImperativeHandle(ref, create, deps) {
            {
                if (typeof create !== 'function') {
                    error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
                }
            }
            var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
            {
                if (typeof create !== 'function') {
                    error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
                }
            }
            var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === undefined ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
        }
        function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === undefined ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
                if (nextDeps !== null) {
                    var prevDeps = prevState[1];
                    if (areHookInputsEqual(nextDeps, prevDeps)) {
                        return prevState[0];
                    }
                }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
        }
        function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === undefined ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
        }
        function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === undefined ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
                if (nextDeps !== null) {
                    var prevDeps = prevState[1];
                    if (areHookInputsEqual(nextDeps, prevDeps)) {
                        return prevState[0];
                    }
                }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
        }
        function mountDeferredValue(value) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function () {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                    setValue(value);
                }
                finally {
                    ReactCurrentBatchConfig$1.transition = prevTransition;
                }
            }, [value]);
            return prevValue;
        }
        function updateDeferredValue(value) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function () {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                    setValue(value);
                }
                finally {
                    ReactCurrentBatchConfig$1.transition = prevTransition;
                }
            }, [value]);
            return prevValue;
        }
        function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function () {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                    setValue(value);
                }
                finally {
                    ReactCurrentBatchConfig$1.transition = prevTransition;
                }
            }, [value]);
            return prevValue;
        }
        function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            {
                runWithPriority(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function () {
                    setPending(true);
                });
                runWithPriority(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function () {
                    var prevTransition = ReactCurrentBatchConfig$1.transition;
                    ReactCurrentBatchConfig$1.transition = 1;
                    try {
                        setPending(false);
                        callback();
                    }
                    finally {
                        ReactCurrentBatchConfig$1.transition = prevTransition;
                    }
                });
            }
        }
        function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = startTransition.bind(null, setPending);
            mountRef(start);
            return [start, isPending];
        }
        function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
        }
        function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
                return isUpdatingOpaqueValueInRenderPhase;
            }
        }
        function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
                var name = getComponentName(fiber.type) || 'Unknown';
                if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                    error('The object passed back from useOpaqueIdentifier is meant to be ' + 'passed through to attributes only. Do not read the ' + 'value directly.');
                    didWarnAboutUseOpaqueIdentifier[name] = true;
                }
            }
        }
        function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
            if (getIsHydrating()) {
                var didUpgrade = false;
                var fiber = currentlyRenderingFiber$1;
                var readValue = function () {
                    if (!didUpgrade) {
                        didUpgrade = true;
                        {
                            isUpdatingOpaqueValueInRenderPhase = true;
                            setId(makeId());
                            isUpdatingOpaqueValueInRenderPhase = false;
                            warnOnOpaqueIdentifierAccessInDEV(fiber);
                        }
                    }
                    {
                        {
                            throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                        }
                    }
                };
                var id = makeOpaqueHydratingObject(readValue);
                var setId = mountState(id)[1];
                if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                    currentlyRenderingFiber$1.flags |= Update | Passive;
                    pushEffect(HasEffect | Passive$1, function () {
                        setId(makeId());
                    }, undefined, null);
                }
                return id;
            }
            else {
                var _id = makeId();
                mountState(_id);
                return _id;
            }
        }
        function updateOpaqueIdentifier() {
            var id = updateState()[0];
            return id;
        }
        function rerenderOpaqueIdentifier() {
            var id = rerenderState()[0];
            return id;
        }
        function dispatchAction(fiber, queue, action) {
            {
                if (typeof arguments[3] === 'function') {
                    error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
                }
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = {
                lane: lane,
                action: action,
                eagerReducer: null,
                eagerState: null,
                next: null
            };
            var pending = queue.pending;
            if (pending === null) {
                update.next = update;
            }
            else {
                update.next = pending.next;
                pending.next = update;
            }
            queue.pending = update;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
                didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            }
            else {
                if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                    var lastRenderedReducer = queue.lastRenderedReducer;
                    if (lastRenderedReducer !== null) {
                        var prevDispatcher;
                        {
                            prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                        }
                        try {
                            var currentState = queue.lastRenderedState;
                            var eagerState = lastRenderedReducer(currentState, action);
                            update.eagerReducer = lastRenderedReducer;
                            update.eagerState = eagerState;
                            if (objectIs(eagerState, currentState)) {
                                return;
                            }
                        }
                        catch (error) {
                        }
                        finally {
                            {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        }
                    }
                }
                {
                    if ('undefined' !== typeof jest) {
                        warnIfNotScopedWithMatchingAct(fiber);
                        warnIfNotCurrentlyActingUpdatesInDev(fiber);
                    }
                }
                scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
        }
        var ContextOnlyDispatcher = {
            readContext: readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
            var warnInvalidContextAccess = function () {
                error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
            };
            var warnInvalidHookAccess = function () {
                error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
            };
            HooksDispatcherOnMountInDEV = {
                readContext: function (context, observedBits) {
                    return readContext(context, observedBits);
                },
                useCallback: function (callback, deps) {
                    currentHookNameInDev = 'useCallback';
                    mountHookTypesDev();
                    checkDepsAreArrayDev(deps);
                    return mountCallback(callback, deps);
                },
                useContext: function (context, observedBits) {
                    currentHookNameInDev = 'useContext';
                    mountHookTypesDev();
                    return readContext(context, observedBits);
                },
                useEffect: function (create, deps) {
                    currentHookNameInDev = 'useEffect';
                    mountHookTypesDev();
                    checkDepsAreArrayDev(deps);
                    return mountEffect(create, deps);
                },
                useImperativeHandle: function (ref, create, deps) {
                    currentHookNameInDev = 'useImperativeHandle';
                    mountHookTypesDev();
                    checkDepsAreArrayDev(deps);
                    return mountImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function (create, deps) {
                    currentHookNameInDev = 'useLayoutEffect';
                    mountHookTypesDev();
                    checkDepsAreArrayDev(deps);
                    return mountLayoutEffect(create, deps);
                },
                useMemo: function (create, deps) {
                    currentHookNameInDev = 'useMemo';
                    mountHookTypesDev();
                    checkDepsAreArrayDev(deps);
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                    try {
                        return mountMemo(create, deps);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useReducer: function (reducer, initialArg, init) {
                    currentHookNameInDev = 'useReducer';
                    mountHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                    try {
                        return mountReducer(reducer, initialArg, init);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useRef: function (initialValue) {
                    currentHookNameInDev = 'useRef';
                    mountHookTypesDev();
                    return mountRef(initialValue);
                },
                useState: function (initialState) {
                    currentHookNameInDev = 'useState';
                    mountHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                    try {
                        return mountState(initialState);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useDebugValue: function (value, formatterFn) {
                    currentHookNameInDev = 'useDebugValue';
                    mountHookTypesDev();
                    return mountDebugValue();
                },
                useDeferredValue: function (value) {
                    currentHookNameInDev = 'useDeferredValue';
                    mountHookTypesDev();
                    return mountDeferredValue(value);
                },
                useTransition: function () {
                    currentHookNameInDev = 'useTransition';
                    mountHookTypesDev();
                    return mountTransition();
                },
                useMutableSource: function (source, getSnapshot, subscribe) {
                    currentHookNameInDev = 'useMutableSource';
                    mountHookTypesDev();
                    return mountMutableSource(source, getSnapshot, subscribe);
                },
                useOpaqueIdentifier: function () {
                    currentHookNameInDev = 'useOpaqueIdentifier';
                    mountHookTypesDev();
                    return mountOpaqueIdentifier();
                },
                unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
                readContext: function (context, observedBits) {
                    return readContext(context, observedBits);
                },
                useCallback: function (callback, deps) {
                    currentHookNameInDev = 'useCallback';
                    updateHookTypesDev();
                    return mountCallback(callback, deps);
                },
                useContext: function (context, observedBits) {
                    currentHookNameInDev = 'useContext';
                    updateHookTypesDev();
                    return readContext(context, observedBits);
                },
                useEffect: function (create, deps) {
                    currentHookNameInDev = 'useEffect';
                    updateHookTypesDev();
                    return mountEffect(create, deps);
                },
                useImperativeHandle: function (ref, create, deps) {
                    currentHookNameInDev = 'useImperativeHandle';
                    updateHookTypesDev();
                    return mountImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function (create, deps) {
                    currentHookNameInDev = 'useLayoutEffect';
                    updateHookTypesDev();
                    return mountLayoutEffect(create, deps);
                },
                useMemo: function (create, deps) {
                    currentHookNameInDev = 'useMemo';
                    updateHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                    try {
                        return mountMemo(create, deps);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useReducer: function (reducer, initialArg, init) {
                    currentHookNameInDev = 'useReducer';
                    updateHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                    try {
                        return mountReducer(reducer, initialArg, init);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useRef: function (initialValue) {
                    currentHookNameInDev = 'useRef';
                    updateHookTypesDev();
                    return mountRef(initialValue);
                },
                useState: function (initialState) {
                    currentHookNameInDev = 'useState';
                    updateHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                    try {
                        return mountState(initialState);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useDebugValue: function (value, formatterFn) {
                    currentHookNameInDev = 'useDebugValue';
                    updateHookTypesDev();
                    return mountDebugValue();
                },
                useDeferredValue: function (value) {
                    currentHookNameInDev = 'useDeferredValue';
                    updateHookTypesDev();
                    return mountDeferredValue(value);
                },
                useTransition: function () {
                    currentHookNameInDev = 'useTransition';
                    updateHookTypesDev();
                    return mountTransition();
                },
                useMutableSource: function (source, getSnapshot, subscribe) {
                    currentHookNameInDev = 'useMutableSource';
                    updateHookTypesDev();
                    return mountMutableSource(source, getSnapshot, subscribe);
                },
                useOpaqueIdentifier: function () {
                    currentHookNameInDev = 'useOpaqueIdentifier';
                    updateHookTypesDev();
                    return mountOpaqueIdentifier();
                },
                unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
                readContext: function (context, observedBits) {
                    return readContext(context, observedBits);
                },
                useCallback: function (callback, deps) {
                    currentHookNameInDev = 'useCallback';
                    updateHookTypesDev();
                    return updateCallback(callback, deps);
                },
                useContext: function (context, observedBits) {
                    currentHookNameInDev = 'useContext';
                    updateHookTypesDev();
                    return readContext(context, observedBits);
                },
                useEffect: function (create, deps) {
                    currentHookNameInDev = 'useEffect';
                    updateHookTypesDev();
                    return updateEffect(create, deps);
                },
                useImperativeHandle: function (ref, create, deps) {
                    currentHookNameInDev = 'useImperativeHandle';
                    updateHookTypesDev();
                    return updateImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function (create, deps) {
                    currentHookNameInDev = 'useLayoutEffect';
                    updateHookTypesDev();
                    return updateLayoutEffect(create, deps);
                },
                useMemo: function (create, deps) {
                    currentHookNameInDev = 'useMemo';
                    updateHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        return updateMemo(create, deps);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useReducer: function (reducer, initialArg, init) {
                    currentHookNameInDev = 'useReducer';
                    updateHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        return updateReducer(reducer, initialArg, init);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useRef: function (initialValue) {
                    currentHookNameInDev = 'useRef';
                    updateHookTypesDev();
                    return updateRef();
                },
                useState: function (initialState) {
                    currentHookNameInDev = 'useState';
                    updateHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        return updateState(initialState);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useDebugValue: function (value, formatterFn) {
                    currentHookNameInDev = 'useDebugValue';
                    updateHookTypesDev();
                    return updateDebugValue();
                },
                useDeferredValue: function (value) {
                    currentHookNameInDev = 'useDeferredValue';
                    updateHookTypesDev();
                    return updateDeferredValue(value);
                },
                useTransition: function () {
                    currentHookNameInDev = 'useTransition';
                    updateHookTypesDev();
                    return updateTransition();
                },
                useMutableSource: function (source, getSnapshot, subscribe) {
                    currentHookNameInDev = 'useMutableSource';
                    updateHookTypesDev();
                    return updateMutableSource(source, getSnapshot, subscribe);
                },
                useOpaqueIdentifier: function () {
                    currentHookNameInDev = 'useOpaqueIdentifier';
                    updateHookTypesDev();
                    return updateOpaqueIdentifier();
                },
                unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
                readContext: function (context, observedBits) {
                    return readContext(context, observedBits);
                },
                useCallback: function (callback, deps) {
                    currentHookNameInDev = 'useCallback';
                    updateHookTypesDev();
                    return updateCallback(callback, deps);
                },
                useContext: function (context, observedBits) {
                    currentHookNameInDev = 'useContext';
                    updateHookTypesDev();
                    return readContext(context, observedBits);
                },
                useEffect: function (create, deps) {
                    currentHookNameInDev = 'useEffect';
                    updateHookTypesDev();
                    return updateEffect(create, deps);
                },
                useImperativeHandle: function (ref, create, deps) {
                    currentHookNameInDev = 'useImperativeHandle';
                    updateHookTypesDev();
                    return updateImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function (create, deps) {
                    currentHookNameInDev = 'useLayoutEffect';
                    updateHookTypesDev();
                    return updateLayoutEffect(create, deps);
                },
                useMemo: function (create, deps) {
                    currentHookNameInDev = 'useMemo';
                    updateHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                    try {
                        return updateMemo(create, deps);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useReducer: function (reducer, initialArg, init) {
                    currentHookNameInDev = 'useReducer';
                    updateHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                    try {
                        return rerenderReducer(reducer, initialArg, init);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useRef: function (initialValue) {
                    currentHookNameInDev = 'useRef';
                    updateHookTypesDev();
                    return updateRef();
                },
                useState: function (initialState) {
                    currentHookNameInDev = 'useState';
                    updateHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                    try {
                        return rerenderState(initialState);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useDebugValue: function (value, formatterFn) {
                    currentHookNameInDev = 'useDebugValue';
                    updateHookTypesDev();
                    return updateDebugValue();
                },
                useDeferredValue: function (value) {
                    currentHookNameInDev = 'useDeferredValue';
                    updateHookTypesDev();
                    return rerenderDeferredValue(value);
                },
                useTransition: function () {
                    currentHookNameInDev = 'useTransition';
                    updateHookTypesDev();
                    return rerenderTransition();
                },
                useMutableSource: function (source, getSnapshot, subscribe) {
                    currentHookNameInDev = 'useMutableSource';
                    updateHookTypesDev();
                    return updateMutableSource(source, getSnapshot, subscribe);
                },
                useOpaqueIdentifier: function () {
                    currentHookNameInDev = 'useOpaqueIdentifier';
                    updateHookTypesDev();
                    return rerenderOpaqueIdentifier();
                },
                unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
                readContext: function (context, observedBits) {
                    warnInvalidContextAccess();
                    return readContext(context, observedBits);
                },
                useCallback: function (callback, deps) {
                    currentHookNameInDev = 'useCallback';
                    warnInvalidHookAccess();
                    mountHookTypesDev();
                    return mountCallback(callback, deps);
                },
                useContext: function (context, observedBits) {
                    currentHookNameInDev = 'useContext';
                    warnInvalidHookAccess();
                    mountHookTypesDev();
                    return readContext(context, observedBits);
                },
                useEffect: function (create, deps) {
                    currentHookNameInDev = 'useEffect';
                    warnInvalidHookAccess();
                    mountHookTypesDev();
                    return mountEffect(create, deps);
                },
                useImperativeHandle: function (ref, create, deps) {
                    currentHookNameInDev = 'useImperativeHandle';
                    warnInvalidHookAccess();
                    mountHookTypesDev();
                    return mountImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function (create, deps) {
                    currentHookNameInDev = 'useLayoutEffect';
                    warnInvalidHookAccess();
                    mountHookTypesDev();
                    return mountLayoutEffect(create, deps);
                },
                useMemo: function (create, deps) {
                    currentHookNameInDev = 'useMemo';
                    warnInvalidHookAccess();
                    mountHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                    try {
                        return mountMemo(create, deps);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useReducer: function (reducer, initialArg, init) {
                    currentHookNameInDev = 'useReducer';
                    warnInvalidHookAccess();
                    mountHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                    try {
                        return mountReducer(reducer, initialArg, init);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useRef: function (initialValue) {
                    currentHookNameInDev = 'useRef';
                    warnInvalidHookAccess();
                    mountHookTypesDev();
                    return mountRef(initialValue);
                },
                useState: function (initialState) {
                    currentHookNameInDev = 'useState';
                    warnInvalidHookAccess();
                    mountHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                    try {
                        return mountState(initialState);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useDebugValue: function (value, formatterFn) {
                    currentHookNameInDev = 'useDebugValue';
                    warnInvalidHookAccess();
                    mountHookTypesDev();
                    return mountDebugValue();
                },
                useDeferredValue: function (value) {
                    currentHookNameInDev = 'useDeferredValue';
                    warnInvalidHookAccess();
                    mountHookTypesDev();
                    return mountDeferredValue(value);
                },
                useTransition: function () {
                    currentHookNameInDev = 'useTransition';
                    warnInvalidHookAccess();
                    mountHookTypesDev();
                    return mountTransition();
                },
                useMutableSource: function (source, getSnapshot, subscribe) {
                    currentHookNameInDev = 'useMutableSource';
                    warnInvalidHookAccess();
                    mountHookTypesDev();
                    return mountMutableSource(source, getSnapshot, subscribe);
                },
                useOpaqueIdentifier: function () {
                    currentHookNameInDev = 'useOpaqueIdentifier';
                    warnInvalidHookAccess();
                    mountHookTypesDev();
                    return mountOpaqueIdentifier();
                },
                unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
                readContext: function (context, observedBits) {
                    warnInvalidContextAccess();
                    return readContext(context, observedBits);
                },
                useCallback: function (callback, deps) {
                    currentHookNameInDev = 'useCallback';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateCallback(callback, deps);
                },
                useContext: function (context, observedBits) {
                    currentHookNameInDev = 'useContext';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return readContext(context, observedBits);
                },
                useEffect: function (create, deps) {
                    currentHookNameInDev = 'useEffect';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateEffect(create, deps);
                },
                useImperativeHandle: function (ref, create, deps) {
                    currentHookNameInDev = 'useImperativeHandle';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function (create, deps) {
                    currentHookNameInDev = 'useLayoutEffect';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateLayoutEffect(create, deps);
                },
                useMemo: function (create, deps) {
                    currentHookNameInDev = 'useMemo';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        return updateMemo(create, deps);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useReducer: function (reducer, initialArg, init) {
                    currentHookNameInDev = 'useReducer';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        return updateReducer(reducer, initialArg, init);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useRef: function (initialValue) {
                    currentHookNameInDev = 'useRef';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateRef();
                },
                useState: function (initialState) {
                    currentHookNameInDev = 'useState';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        return updateState(initialState);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useDebugValue: function (value, formatterFn) {
                    currentHookNameInDev = 'useDebugValue';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateDebugValue();
                },
                useDeferredValue: function (value) {
                    currentHookNameInDev = 'useDeferredValue';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateDeferredValue(value);
                },
                useTransition: function () {
                    currentHookNameInDev = 'useTransition';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateTransition();
                },
                useMutableSource: function (source, getSnapshot, subscribe) {
                    currentHookNameInDev = 'useMutableSource';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateMutableSource(source, getSnapshot, subscribe);
                },
                useOpaqueIdentifier: function () {
                    currentHookNameInDev = 'useOpaqueIdentifier';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateOpaqueIdentifier();
                },
                unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
                readContext: function (context, observedBits) {
                    warnInvalidContextAccess();
                    return readContext(context, observedBits);
                },
                useCallback: function (callback, deps) {
                    currentHookNameInDev = 'useCallback';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateCallback(callback, deps);
                },
                useContext: function (context, observedBits) {
                    currentHookNameInDev = 'useContext';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return readContext(context, observedBits);
                },
                useEffect: function (create, deps) {
                    currentHookNameInDev = 'useEffect';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateEffect(create, deps);
                },
                useImperativeHandle: function (ref, create, deps) {
                    currentHookNameInDev = 'useImperativeHandle';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function (create, deps) {
                    currentHookNameInDev = 'useLayoutEffect';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateLayoutEffect(create, deps);
                },
                useMemo: function (create, deps) {
                    currentHookNameInDev = 'useMemo';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        return updateMemo(create, deps);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useReducer: function (reducer, initialArg, init) {
                    currentHookNameInDev = 'useReducer';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        return rerenderReducer(reducer, initialArg, init);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useRef: function (initialValue) {
                    currentHookNameInDev = 'useRef';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateRef();
                },
                useState: function (initialState) {
                    currentHookNameInDev = 'useState';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        return rerenderState(initialState);
                    }
                    finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                },
                useDebugValue: function (value, formatterFn) {
                    currentHookNameInDev = 'useDebugValue';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateDebugValue();
                },
                useDeferredValue: function (value) {
                    currentHookNameInDev = 'useDeferredValue';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return rerenderDeferredValue(value);
                },
                useTransition: function () {
                    currentHookNameInDev = 'useTransition';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return rerenderTransition();
                },
                useMutableSource: function (source, getSnapshot, subscribe) {
                    currentHookNameInDev = 'useMutableSource';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return updateMutableSource(source, getSnapshot, subscribe);
                },
                useOpaqueIdentifier: function () {
                    currentHookNameInDev = 'useOpaqueIdentifier';
                    warnInvalidHookAccess();
                    updateHookTypesDev();
                    return rerenderOpaqueIdentifier();
                },
                unstable_isNewReconciler: enableNewReconciler
            };
        }
        var now$2 = Scheduler.unstable_now;
        var commitTime = 0;
        var profilerStartTime = -1;
        function getCommitTime() {
            return commitTime;
        }
        function recordCommitTime() {
            commitTime = now$2();
        }
        function startProfilerTimer(fiber) {
            profilerStartTime = now$2();
            if (fiber.actualStartTime < 0) {
                fiber.actualStartTime = now$2();
            }
        }
        function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
                var elapsedTime = now$2() - profilerStartTime;
                fiber.actualDuration += elapsedTime;
                if (overrideBaseTime) {
                    fiber.selfBaseDuration = elapsedTime;
                }
                profilerStartTime = -1;
            }
        }
        function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
                fiber.actualDuration += child.actualDuration;
                child = child.sibling;
            }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
            if (current === null) {
                workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
            }
            else {
                workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
            }
        }
        function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
            workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes);
            workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
        }
        function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
            {
                if (workInProgress.type !== workInProgress.elementType) {
                    var innerPropTypes = Component.propTypes;
                    if (innerPropTypes) {
                        checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
                    }
                }
            }
            var render = Component.render;
            var ref = workInProgress.ref;
            var nextChildren;
            prepareToReadContext(workInProgress, renderLanes);
            {
                ReactCurrentOwner$1.current = workInProgress;
                setIsRendering(true);
                nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
                if (workInProgress.mode & StrictMode) {
                    disableLogs();
                    try {
                        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
                    }
                    finally {
                        reenableLogs();
                    }
                }
                setIsRendering(false);
            }
            if (current !== null && !didReceiveUpdate) {
                bailoutHooks(current, workInProgress, renderLanes);
                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            }
            workInProgress.flags |= PerformedWork;
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            return workInProgress.child;
        }
        function updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
            if (current === null) {
                var type = Component.type;
                if (isSimpleFunctionComponent(type) && Component.compare === null &&
                    Component.defaultProps === undefined) {
                    var resolvedType = type;
                    {
                        resolvedType = resolveFunctionForHotReloading(type);
                    }
                    workInProgress.tag = SimpleMemoComponent;
                    workInProgress.type = resolvedType;
                    {
                        validateFunctionComponentInDev(workInProgress, type);
                    }
                    return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);
                }
                {
                    var innerPropTypes = type.propTypes;
                    if (innerPropTypes) {
                        checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(type));
                    }
                }
                var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
                child.ref = workInProgress.ref;
                child.return = workInProgress;
                workInProgress.child = child;
                return child;
            }
            {
                var _type = Component.type;
                var _innerPropTypes = _type.propTypes;
                if (_innerPropTypes) {
                    checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentName(_type));
                }
            }
            var currentChild = current.child;
            if (!includesSomeLane(updateLanes, renderLanes)) {
                var prevProps = currentChild.memoizedProps;
                var compare = Component.compare;
                compare = compare !== null ? compare : shallowEqual;
                if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                }
            }
            workInProgress.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress.ref;
            newChild.return = workInProgress;
            workInProgress.child = newChild;
            return newChild;
        }
        function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
            {
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerMemoType = workInProgress.elementType;
                    if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                        var lazyComponent = outerMemoType;
                        var payload = lazyComponent._payload;
                        var init = lazyComponent._init;
                        try {
                            outerMemoType = init(payload);
                        }
                        catch (x) {
                            outerMemoType = null;
                        }
                        var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                        if (outerPropTypes) {
                            checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentName(outerMemoType));
                        }
                    }
                }
            }
            if (current !== null) {
                var prevProps = current.memoizedProps;
                if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && (workInProgress.type === current.type)) {
                    didReceiveUpdate = false;
                    if (!includesSomeLane(renderLanes, updateLanes)) {
                        workInProgress.lanes = current.lanes;
                        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                    }
                    else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                        didReceiveUpdate = true;
                    }
                }
            }
            return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
        }
        function updateOffscreenComponent(current, workInProgress, renderLanes) {
            var nextProps = workInProgress.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current !== null ? current.memoizedState : null;
            if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
                if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                    var nextState = {
                        baseLanes: NoLanes
                    };
                    workInProgress.memoizedState = nextState;
                    pushRenderLanes(workInProgress, renderLanes);
                }
                else if (!includesSomeLane(renderLanes, OffscreenLane)) {
                    var nextBaseLanes;
                    if (prevState !== null) {
                        var prevBaseLanes = prevState.baseLanes;
                        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
                    }
                    else {
                        nextBaseLanes = renderLanes;
                    }
                    {
                        markSpawnedWork(OffscreenLane);
                    }
                    workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                    var _nextState = {
                        baseLanes: nextBaseLanes
                    };
                    workInProgress.memoizedState = _nextState;
                    pushRenderLanes(workInProgress, nextBaseLanes);
                    return null;
                }
                else {
                    var _nextState2 = {
                        baseLanes: NoLanes
                    };
                    workInProgress.memoizedState = _nextState2;
                    var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
                    pushRenderLanes(workInProgress, subtreeRenderLanes);
                }
            }
            else {
                var _subtreeRenderLanes;
                if (prevState !== null) {
                    _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);
                    workInProgress.memoizedState = null;
                }
                else {
                    _subtreeRenderLanes = renderLanes;
                }
                pushRenderLanes(workInProgress, _subtreeRenderLanes);
            }
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            return workInProgress.child;
        }
        var updateLegacyHiddenComponent = updateOffscreenComponent;
        function updateFragment(current, workInProgress, renderLanes) {
            var nextChildren = workInProgress.pendingProps;
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            return workInProgress.child;
        }
        function updateMode(current, workInProgress, renderLanes) {
            var nextChildren = workInProgress.pendingProps.children;
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            return workInProgress.child;
        }
        function updateProfiler(current, workInProgress, renderLanes) {
            {
                workInProgress.flags |= Update;
                var stateNode = workInProgress.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
            }
            var nextProps = workInProgress.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            return workInProgress.child;
        }
        function markRef(current, workInProgress) {
            var ref = workInProgress.ref;
            if (current === null && ref !== null || current !== null && current.ref !== ref) {
                workInProgress.flags |= Ref;
            }
        }
        function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
            {
                if (workInProgress.type !== workInProgress.elementType) {
                    var innerPropTypes = Component.propTypes;
                    if (innerPropTypes) {
                        checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
                    }
                }
            }
            var context;
            {
                var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
                context = getMaskedContext(workInProgress, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress, renderLanes);
            {
                ReactCurrentOwner$1.current = workInProgress;
                setIsRendering(true);
                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
                if (workInProgress.mode & StrictMode) {
                    disableLogs();
                    try {
                        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
                    }
                    finally {
                        reenableLogs();
                    }
                }
                setIsRendering(false);
            }
            if (current !== null && !didReceiveUpdate) {
                bailoutHooks(current, workInProgress, renderLanes);
                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            }
            workInProgress.flags |= PerformedWork;
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            return workInProgress.child;
        }
        function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
            {
                if (workInProgress.type !== workInProgress.elementType) {
                    var innerPropTypes = Component.propTypes;
                    if (innerPropTypes) {
                        checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
                    }
                }
            }
            var hasContext;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            }
            else {
                hasContext = false;
            }
            prepareToReadContext(workInProgress, renderLanes);
            var instance = workInProgress.stateNode;
            var shouldUpdate;
            if (instance === null) {
                if (current !== null) {
                    current.alternate = null;
                    workInProgress.alternate = null;
                    workInProgress.flags |= Placement;
                }
                constructClassInstance(workInProgress, Component, nextProps);
                mountClassInstance(workInProgress, Component, nextProps, renderLanes);
                shouldUpdate = true;
            }
            else if (current === null) {
                shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
            }
            else {
                shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
            }
            var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
            {
                var inst = workInProgress.stateNode;
                if (shouldUpdate && inst.props !== nextProps) {
                    if (!didWarnAboutReassigningProps) {
                        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
                    }
                    didWarnAboutReassigningProps = true;
                }
            }
            return nextUnitOfWork;
        }
        function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
            markRef(current, workInProgress);
            var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
                if (hasContext) {
                    invalidateContextProvider(workInProgress, Component, false);
                }
                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            }
            var instance = workInProgress.stateNode;
            ReactCurrentOwner$1.current = workInProgress;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
                nextChildren = null;
                {
                    stopProfilerTimerIfRunning();
                }
            }
            else {
                {
                    setIsRendering(true);
                    nextChildren = instance.render();
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            instance.render();
                        }
                        finally {
                            reenableLogs();
                        }
                    }
                    setIsRendering(false);
                }
            }
            workInProgress.flags |= PerformedWork;
            if (current !== null && didCaptureError) {
                forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
            }
            else {
                reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            }
            workInProgress.memoizedState = instance.state;
            if (hasContext) {
                invalidateContextProvider(workInProgress, Component, true);
            }
            return workInProgress.child;
        }
        function pushHostRootContext(workInProgress) {
            var root = workInProgress.stateNode;
            if (root.pendingContext) {
                pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
            }
            else if (root.context) {
                pushTopLevelContextObject(workInProgress, root.context, false);
            }
            pushHostContainer(workInProgress, root.containerInfo);
        }
        function updateHostRoot(current, workInProgress, renderLanes) {
            pushHostRootContext(workInProgress);
            var updateQueue = workInProgress.updateQueue;
            if (!(current !== null && updateQueue !== null)) {
                {
                    throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
                }
            }
            var nextProps = workInProgress.pendingProps;
            var prevState = workInProgress.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current, workInProgress);
            processUpdateQueue(workInProgress, nextProps, null, renderLanes);
            var nextState = workInProgress.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
                resetHydrationState();
                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            }
            var root = workInProgress.stateNode;
            if (root.hydrate && enterHydrationState(workInProgress)) {
                if (supportsHydration) {
                    var mutableSourceEagerHydrationData = root.mutableSourceEagerHydrationData;
                    if (mutableSourceEagerHydrationData != null) {
                        for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                            var mutableSource = mutableSourceEagerHydrationData[i];
                            var version = mutableSourceEagerHydrationData[i + 1];
                            setWorkInProgressVersion(mutableSource, version);
                        }
                    }
                }
                var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
                workInProgress.child = child;
                var node = child;
                while (node) {
                    node.flags = node.flags & ~Placement | Hydrating;
                    node = node.sibling;
                }
            }
            else {
                reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                resetHydrationState();
            }
            return workInProgress.child;
        }
        function updateHostComponent(current, workInProgress, renderLanes) {
            pushHostContext(workInProgress);
            if (current === null) {
                tryToClaimNextHydratableInstance(workInProgress);
            }
            var type = workInProgress.type;
            var nextProps = workInProgress.pendingProps;
            var prevProps = current !== null ? current.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
                nextChildren = null;
            }
            else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
                workInProgress.flags |= ContentReset;
            }
            markRef(current, workInProgress);
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            return workInProgress.child;
        }
        function updateHostText(current, workInProgress) {
            if (current === null) {
                tryToClaimNextHydratableInstance(workInProgress);
            }
            return null;
        }
        function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {
            if (_current !== null) {
                _current.alternate = null;
                workInProgress.alternate = null;
                workInProgress.flags |= Placement;
            }
            var props = workInProgress.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress.type = Component;
            var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
                case FunctionComponent:
                    {
                        {
                            validateFunctionComponentInDev(workInProgress, Component);
                            workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                        }
                        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                        return child;
                    }
                case ClassComponent:
                    {
                        {
                            workInProgress.type = Component = resolveClassForHotReloading(Component);
                        }
                        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                        return child;
                    }
                case ForwardRef:
                    {
                        {
                            workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                        }
                        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
                        return child;
                    }
                case MemoComponent:
                    {
                        {
                            if (workInProgress.type !== workInProgress.elementType) {
                                var outerPropTypes = Component.propTypes;
                                if (outerPropTypes) {
                                    checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentName(Component));
                                }
                            }
                        }
                        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes);
                        return child;
                    }
            }
            var hint = '';
            {
                if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
                    hint = ' Did you wrap a component in React.lazy() more than once?';
                }
            }
            {
                {
                    throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
                }
            }
        }
        function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
            if (_current !== null) {
                _current.alternate = null;
                workInProgress.alternate = null;
                workInProgress.flags |= Placement;
            }
            workInProgress.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            }
            else {
                hasContext = false;
            }
            prepareToReadContext(workInProgress, renderLanes);
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        }
        function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
            if (_current !== null) {
                _current.alternate = null;
                workInProgress.alternate = null;
                workInProgress.flags |= Placement;
            }
            var props = workInProgress.pendingProps;
            var context;
            {
                var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
                context = getMaskedContext(workInProgress, unmaskedContext);
            }
            prepareToReadContext(workInProgress, renderLanes);
            var value;
            {
                if (Component.prototype && typeof Component.prototype.render === 'function') {
                    var componentName = getComponentName(Component) || 'Unknown';
                    if (!didWarnAboutBadClass[componentName]) {
                        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
                        didWarnAboutBadClass[componentName] = true;
                    }
                }
                if (workInProgress.mode & StrictMode) {
                    ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
                }
                setIsRendering(true);
                ReactCurrentOwner$1.current = workInProgress;
                value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                setIsRendering(false);
            }
            workInProgress.flags |= PerformedWork;
            {
                if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
                    var _componentName = getComponentName(Component) || 'Unknown';
                    if (!didWarnAboutModulePatternComponent[_componentName]) {
                        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);
                        didWarnAboutModulePatternComponent[_componentName] = true;
                    }
                }
            }
            if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
                {
                    var _componentName2 = getComponentName(Component) || 'Unknown';
                    if (!didWarnAboutModulePatternComponent[_componentName2]) {
                        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);
                        didWarnAboutModulePatternComponent[_componentName2] = true;
                    }
                }
                workInProgress.tag = ClassComponent;
                workInProgress.memoizedState = null;
                workInProgress.updateQueue = null;
                var hasContext = false;
                if (isContextProvider(Component)) {
                    hasContext = true;
                    pushContextProvider(workInProgress);
                }
                else {
                    hasContext = false;
                }
                workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
                initializeUpdateQueue(workInProgress);
                var getDerivedStateFromProps = Component.getDerivedStateFromProps;
                if (typeof getDerivedStateFromProps === 'function') {
                    applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
                }
                adoptClassInstance(workInProgress, value);
                mountClassInstance(workInProgress, Component, props, renderLanes);
                return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
            }
            else {
                workInProgress.tag = FunctionComponent;
                {
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                        }
                        finally {
                            reenableLogs();
                        }
                    }
                }
                reconcileChildren(null, workInProgress, value, renderLanes);
                {
                    validateFunctionComponentInDev(workInProgress, Component);
                }
                return workInProgress.child;
            }
        }
        function validateFunctionComponentInDev(workInProgress, Component) {
            {
                if (Component) {
                    if (Component.childContextTypes) {
                        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
                    }
                }
                if (workInProgress.ref !== null) {
                    var info = '';
                    var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                    if (ownerName) {
                        info += '\n\nCheck the render method of `' + ownerName + '`.';
                    }
                    var warningKey = ownerName || workInProgress._debugID || '';
                    var debugSource = workInProgress._debugSource;
                    if (debugSource) {
                        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
                    }
                    if (!didWarnAboutFunctionRefs[warningKey]) {
                        didWarnAboutFunctionRefs[warningKey] = true;
                        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
                    }
                }
                if (typeof Component.getDerivedStateFromProps === 'function') {
                    var _componentName3 = getComponentName(Component) || 'Unknown';
                    if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
                        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                    }
                }
                if (typeof Component.contextType === 'object' && Component.contextType !== null) {
                    var _componentName4 = getComponentName(Component) || 'Unknown';
                    if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                        error('%s: Function components do not support contextType.', _componentName4);
                        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                    }
                }
            }
        }
        var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes) {
            return {
                baseLanes: renderLanes
            };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
            return {
                baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes)
            };
        }
        function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
            if (current !== null) {
                var suspenseState = current.memoizedState;
                if (suspenseState === null) {
                    return false;
                }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current, renderLanes) {
            return removeLanes(current.childLanes, renderLanes);
        }
        function updateSuspenseComponent(current, workInProgress, renderLanes) {
            var nextProps = workInProgress.pendingProps;
            {
                if (shouldSuspend(workInProgress)) {
                    workInProgress.flags |= DidCapture;
                }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
                showFallback = true;
                workInProgress.flags &= ~DidCapture;
            }
            else {
                if (current === null || current.memoizedState !== null) {
                    if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
                        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                    }
                }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress, suspenseContext);
            if (current === null) {
                if (nextProps.fallback !== undefined) {
                    tryToClaimNextHydratableInstance(workInProgress);
                }
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                if (showFallback) {
                    var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                    var primaryChildFragment = workInProgress.child;
                    primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    return fallbackFragment;
                }
                else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
                    var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                    var _primaryChildFragment = workInProgress.child;
                    _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    workInProgress.lanes = SomeRetryLane;
                    {
                        markSpawnedWork(SomeRetryLane);
                    }
                    return _fallbackFragment;
                }
                else {
                    return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);
                }
            }
            else {
                var prevState = current.memoizedState;
                if (prevState !== null) {
                    if (showFallback) {
                        var _nextFallbackChildren2 = nextProps.fallback;
                        var _nextPrimaryChildren2 = nextProps.children;
                        var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);
                        var _primaryChildFragment3 = workInProgress.child;
                        var prevOffscreenState = current.child.memoizedState;
                        _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
                        _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
                        workInProgress.memoizedState = SUSPENDED_MARKER;
                        return _fallbackChildFragment;
                    }
                    else {
                        var _nextPrimaryChildren3 = nextProps.children;
                        var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);
                        workInProgress.memoizedState = null;
                        return _primaryChildFragment4;
                    }
                }
                else {
                    if (showFallback) {
                        var _nextFallbackChildren3 = nextProps.fallback;
                        var _nextPrimaryChildren4 = nextProps.children;
                        var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);
                        var _primaryChildFragment5 = workInProgress.child;
                        var _prevOffscreenState = current.child.memoizedState;
                        _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
                        _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
                        workInProgress.memoizedState = SUSPENDED_MARKER;
                        return _fallbackChildFragment2;
                    }
                    else {
                        var _nextPrimaryChildren5 = nextProps.children;
                        var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);
                        workInProgress.memoizedState = null;
                        return _primaryChildFragment6;
                    }
                }
            }
        }
        function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
            var mode = workInProgress.mode;
            var primaryChildProps = {
                mode: 'visible',
                children: primaryChildren
            };
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);
            primaryChildFragment.return = workInProgress;
            workInProgress.child = primaryChildFragment;
            return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
            var mode = workInProgress.mode;
            var progressedPrimaryFragment = workInProgress.child;
            var primaryChildProps = {
                mode: 'hidden',
                children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
                primaryChildFragment = progressedPrimaryFragment;
                primaryChildFragment.childLanes = NoLanes;
                primaryChildFragment.pendingProps = primaryChildProps;
                if (workInProgress.mode & ProfileMode) {
                    primaryChildFragment.actualDuration = 0;
                    primaryChildFragment.actualStartTime = -1;
                    primaryChildFragment.selfBaseDuration = 0;
                    primaryChildFragment.treeBaseDuration = 0;
                }
                fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
            }
            else {
                primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
                fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
            }
            primaryChildFragment.return = workInProgress;
            fallbackChildFragment.return = workInProgress;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress.child = primaryChildFragment;
            return fallbackChildFragment;
        }
        function createWorkInProgressOffscreenFiber(current, offscreenProps) {
            return createWorkInProgress(current, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
            var currentPrimaryChildFragment = current.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
                mode: 'visible',
                children: primaryChildren
            });
            if ((workInProgress.mode & BlockingMode) === NoMode) {
                primaryChildFragment.lanes = renderLanes;
            }
            primaryChildFragment.return = workInProgress;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
                currentFallbackChildFragment.nextEffect = null;
                currentFallbackChildFragment.flags = Deletion;
                workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
            }
            workInProgress.child = primaryChildFragment;
            return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
            var mode = workInProgress.mode;
            var currentPrimaryChildFragment = current.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
                mode: 'hidden',
                children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & BlockingMode) === NoMode &&
                workInProgress.child !== currentPrimaryChildFragment) {
                var progressedPrimaryFragment = workInProgress.child;
                primaryChildFragment = progressedPrimaryFragment;
                primaryChildFragment.childLanes = NoLanes;
                primaryChildFragment.pendingProps = primaryChildProps;
                if (workInProgress.mode & ProfileMode) {
                    primaryChildFragment.actualDuration = 0;
                    primaryChildFragment.actualStartTime = -1;
                    primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                    primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
                }
                var progressedLastEffect = primaryChildFragment.lastEffect;
                if (progressedLastEffect !== null) {
                    workInProgress.firstEffect = primaryChildFragment.firstEffect;
                    workInProgress.lastEffect = progressedLastEffect;
                    progressedLastEffect.nextEffect = null;
                }
                else {
                    workInProgress.firstEffect = workInProgress.lastEffect = null;
                }
            }
            else {
                primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
                fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            }
            else {
                fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
                fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress;
            primaryChildFragment.return = workInProgress;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress.child = primaryChildFragment;
            return fallbackChildFragment;
        }
        function scheduleWorkOnFiber(fiber, renderLanes) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
            var alternate = fiber.alternate;
            if (alternate !== null) {
                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes);
        }
        function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
            var node = firstChild;
            while (node !== null) {
                if (node.tag === SuspenseComponent) {
                    var state = node.memoizedState;
                    if (state !== null) {
                        scheduleWorkOnFiber(node, renderLanes);
                    }
                }
                else if (node.tag === SuspenseListComponent) {
                    scheduleWorkOnFiber(node, renderLanes);
                }
                else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
                if (node === workInProgress) {
                    return;
                }
                while (node.sibling === null) {
                    if (node.return === null || node.return === workInProgress) {
                        return;
                    }
                    node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
            }
        }
        function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    lastContentRow = row;
                }
                row = row.sibling;
            }
            return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
            {
                if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
                    didWarnAboutRevealOrder[revealOrder] = true;
                    if (typeof revealOrder === 'string') {
                        switch (revealOrder.toLowerCase()) {
                            case 'together':
                            case 'forwards':
                            case 'backwards':
                                {
                                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                                    break;
                                }
                            case 'forward':
                            case 'backward':
                                {
                                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                                    break;
                                }
                            default:
                                error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                                break;
                        }
                    }
                    else {
                        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    }
                }
            }
        }
        function validateTailOptions(tailMode, revealOrder) {
            {
                if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
                    if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                        didWarnAboutTailOptions[tailMode] = true;
                        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
                    }
                    else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                        didWarnAboutTailOptions[tailMode] = true;
                        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
                    }
                }
            }
        }
        function validateSuspenseListNestedChild(childSlot, index) {
            {
                var isArray = Array.isArray(childSlot);
                var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';
                if (isArray || isIterable) {
                    var type = isArray ? 'array' : 'iterable';
                    error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);
                    return false;
                }
            }
            return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
            {
                if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
                    if (Array.isArray(children)) {
                        for (var i = 0; i < children.length; i++) {
                            if (!validateSuspenseListNestedChild(children[i], i)) {
                                return;
                            }
                        }
                    }
                    else {
                        var iteratorFn = getIteratorFn(children);
                        if (typeof iteratorFn === 'function') {
                            var childrenIterator = iteratorFn.call(children);
                            if (childrenIterator) {
                                var step = childrenIterator.next();
                                var _i = 0;
                                for (; !step.done; step = childrenIterator.next()) {
                                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                                        return;
                                    }
                                    _i++;
                                }
                            }
                        }
                        else {
                            error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
                        }
                    }
                }
            }
        }
        function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress.memoizedState;
            if (renderState === null) {
                workInProgress.memoizedState = {
                    isBackwards: isBackwards,
                    rendering: null,
                    renderingStartTime: 0,
                    last: lastContentRow,
                    tail: tail,
                    tailMode: tailMode,
                    lastEffect: lastEffectBeforeRendering
                };
            }
            else {
                renderState.isBackwards = isBackwards;
                renderState.rendering = null;
                renderState.renderingStartTime = 0;
                renderState.last = lastContentRow;
                renderState.tail = tail;
                renderState.tailMode = tailMode;
                renderState.lastEffect = lastEffectBeforeRendering;
            }
        }
        function updateSuspenseListComponent(current, workInProgress, renderLanes) {
            var nextProps = workInProgress.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current, workInProgress, newChildren, renderLanes);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                workInProgress.flags |= DidCapture;
            }
            else {
                var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;
                if (didSuspendBefore) {
                    propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
                }
                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress, suspenseContext);
            if ((workInProgress.mode & BlockingMode) === NoMode) {
                workInProgress.memoizedState = null;
            }
            else {
                switch (revealOrder) {
                    case 'forwards':
                        {
                            var lastContentRow = findLastContentRow(workInProgress.child);
                            var tail;
                            if (lastContentRow === null) {
                                tail = workInProgress.child;
                                workInProgress.child = null;
                            }
                            else {
                                tail = lastContentRow.sibling;
                                lastContentRow.sibling = null;
                            }
                            initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
                            break;
                        }
                    case 'backwards':
                        {
                            var _tail = null;
                            var row = workInProgress.child;
                            workInProgress.child = null;
                            while (row !== null) {
                                var currentRow = row.alternate;
                                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                                    workInProgress.child = row;
                                    break;
                                }
                                var nextRow = row.sibling;
                                row.sibling = _tail;
                                _tail = row;
                                row = nextRow;
                            }
                            initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
                            break;
                        }
                    case 'together':
                        {
                            initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
                            break;
                        }
                    default:
                        {
                            workInProgress.memoizedState = null;
                        }
                }
            }
            return workInProgress.child;
        }
        function updatePortalComponent(current, workInProgress, renderLanes) {
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            var nextChildren = workInProgress.pendingProps;
            if (current === null) {
                workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
            }
            else {
                reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            }
            return workInProgress.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current, workInProgress, renderLanes) {
            var providerType = workInProgress.type;
            var context = providerType._context;
            var newProps = workInProgress.pendingProps;
            var oldProps = workInProgress.memoizedProps;
            var newValue = newProps.value;
            {
                if (!('value' in newProps)) {
                    if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                        hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
                    }
                }
                var providerPropTypes = workInProgress.type.propTypes;
                if (providerPropTypes) {
                    checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
                }
            }
            pushProvider(workInProgress, newValue);
            if (oldProps !== null) {
                var oldValue = oldProps.value;
                var changedBits = calculateChangedBits(context, newValue, oldValue);
                if (changedBits === 0) {
                    if (oldProps.children === newProps.children && !hasContextChanged()) {
                        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                    }
                }
                else {
                    propagateContextChange(workInProgress, context, changedBits, renderLanes);
                }
            }
            var newChildren = newProps.children;
            reconcileChildren(current, workInProgress, newChildren, renderLanes);
            return workInProgress.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current, workInProgress, renderLanes) {
            var context = workInProgress.type;
            {
                if (context._context === undefined) {
                    if (context !== context.Consumer) {
                        if (!hasWarnedAboutUsingContextAsConsumer) {
                            hasWarnedAboutUsingContextAsConsumer = true;
                            error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
                        }
                    }
                }
                else {
                    context = context._context;
                }
            }
            var newProps = workInProgress.pendingProps;
            var render = newProps.children;
            {
                if (typeof render !== 'function') {
                    error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
                }
            }
            prepareToReadContext(workInProgress, renderLanes);
            var newValue = readContext(context, newProps.unstable_observedBits);
            var newChildren;
            {
                ReactCurrentOwner$1.current = workInProgress;
                setIsRendering(true);
                newChildren = render(newValue);
                setIsRendering(false);
            }
            workInProgress.flags |= PerformedWork;
            reconcileChildren(current, workInProgress, newChildren, renderLanes);
            return workInProgress.child;
        }
        function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
        }
        function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
            if (current !== null) {
                workInProgress.dependencies = current.dependencies;
            }
            {
                stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress.lanes);
            if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
                return null;
            }
            else {
                cloneChildFibers(current, workInProgress);
                return workInProgress.child;
            }
        }
        function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
            {
                var returnFiber = oldWorkInProgress.return;
                if (returnFiber === null) {
                    throw new Error('Cannot swap the root fiber.');
                }
                current.alternate = null;
                oldWorkInProgress.alternate = null;
                newWorkInProgress.index = oldWorkInProgress.index;
                newWorkInProgress.sibling = oldWorkInProgress.sibling;
                newWorkInProgress.return = oldWorkInProgress.return;
                newWorkInProgress.ref = oldWorkInProgress.ref;
                if (oldWorkInProgress === returnFiber.child) {
                    returnFiber.child = newWorkInProgress;
                }
                else {
                    var prevSibling = returnFiber.child;
                    if (prevSibling === null) {
                        throw new Error('Expected parent to have a child.');
                    }
                    while (prevSibling.sibling !== oldWorkInProgress) {
                        prevSibling = prevSibling.sibling;
                        if (prevSibling === null) {
                            throw new Error('Expected to find the previous sibling.');
                        }
                    }
                    prevSibling.sibling = newWorkInProgress;
                }
                var last = returnFiber.lastEffect;
                if (last !== null) {
                    last.nextEffect = current;
                    returnFiber.lastEffect = current;
                }
                else {
                    returnFiber.firstEffect = returnFiber.lastEffect = current;
                }
                current.nextEffect = null;
                current.flags = Deletion;
                newWorkInProgress.flags |= Placement;
                return newWorkInProgress;
            }
        }
        function beginWork(current, workInProgress, renderLanes) {
            var updateLanes = workInProgress.lanes;
            {
                if (workInProgress._debugNeedsRemount && current !== null) {
                    return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
                }
            }
            if (current !== null) {
                var oldProps = current.memoizedProps;
                var newProps = workInProgress.pendingProps;
                if (oldProps !== newProps || hasContextChanged() || (workInProgress.type !== current.type)) {
                    didReceiveUpdate = true;
                }
                else if (!includesSomeLane(renderLanes, updateLanes)) {
                    didReceiveUpdate = false;
                    switch (workInProgress.tag) {
                        case HostRoot:
                            pushHostRootContext(workInProgress);
                            resetHydrationState();
                            break;
                        case HostComponent:
                            pushHostContext(workInProgress);
                            break;
                        case ClassComponent:
                            {
                                var Component = workInProgress.type;
                                if (isContextProvider(Component)) {
                                    pushContextProvider(workInProgress);
                                }
                                break;
                            }
                        case HostPortal:
                            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                            break;
                        case ContextProvider:
                            {
                                var newValue = workInProgress.memoizedProps.value;
                                pushProvider(workInProgress, newValue);
                                break;
                            }
                        case Profiler:
                            {
                                var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                                if (hasChildWork) {
                                    workInProgress.flags |= Update;
                                }
                                var stateNode = workInProgress.stateNode;
                                stateNode.effectDuration = 0;
                                stateNode.passiveEffectDuration = 0;
                            }
                            break;
                        case SuspenseComponent:
                            {
                                var state = workInProgress.memoizedState;
                                if (state !== null) {
                                    var primaryChildFragment = workInProgress.child;
                                    var primaryChildLanes = primaryChildFragment.childLanes;
                                    if (includesSomeLane(renderLanes, primaryChildLanes)) {
                                        return updateSuspenseComponent(current, workInProgress, renderLanes);
                                    }
                                    else {
                                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                                        var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                                        if (child !== null) {
                                            return child.sibling;
                                        }
                                        else {
                                            return null;
                                        }
                                    }
                                }
                                else {
                                    pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                                }
                                break;
                            }
                        case SuspenseListComponent:
                            {
                                var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;
                                var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                                if (didSuspendBefore) {
                                    if (_hasChildWork) {
                                        return updateSuspenseListComponent(current, workInProgress, renderLanes);
                                    }
                                    workInProgress.flags |= DidCapture;
                                }
                                var renderState = workInProgress.memoizedState;
                                if (renderState !== null) {
                                    renderState.rendering = null;
                                    renderState.tail = null;
                                    renderState.lastEffect = null;
                                }
                                pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                                if (_hasChildWork) {
                                    break;
                                }
                                else {
                                    return null;
                                }
                            }
                        case OffscreenComponent:
                        case LegacyHiddenComponent:
                            {
                                workInProgress.lanes = NoLanes;
                                return updateOffscreenComponent(current, workInProgress, renderLanes);
                            }
                    }
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                }
                else {
                    if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                        didReceiveUpdate = true;
                    }
                    else {
                        didReceiveUpdate = false;
                    }
                }
            }
            else {
                didReceiveUpdate = false;
            }
            workInProgress.lanes = NoLanes;
            switch (workInProgress.tag) {
                case IndeterminateComponent:
                    {
                        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
                    }
                case LazyComponent:
                    {
                        var elementType = workInProgress.elementType;
                        return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);
                    }
                case FunctionComponent:
                    {
                        var _Component = workInProgress.type;
                        var unresolvedProps = workInProgress.pendingProps;
                        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                        return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);
                    }
                case ClassComponent:
                    {
                        var _Component2 = workInProgress.type;
                        var _unresolvedProps = workInProgress.pendingProps;
                        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                        return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);
                    }
                case HostRoot:
                    return updateHostRoot(current, workInProgress, renderLanes);
                case HostComponent:
                    return updateHostComponent(current, workInProgress, renderLanes);
                case HostText:
                    return updateHostText(current, workInProgress);
                case SuspenseComponent:
                    return updateSuspenseComponent(current, workInProgress, renderLanes);
                case HostPortal:
                    return updatePortalComponent(current, workInProgress, renderLanes);
                case ForwardRef:
                    {
                        var type = workInProgress.type;
                        var _unresolvedProps2 = workInProgress.pendingProps;
                        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
                    }
                case Fragment:
                    return updateFragment(current, workInProgress, renderLanes);
                case Mode:
                    return updateMode(current, workInProgress, renderLanes);
                case Profiler:
                    return updateProfiler(current, workInProgress, renderLanes);
                case ContextProvider:
                    return updateContextProvider(current, workInProgress, renderLanes);
                case ContextConsumer:
                    return updateContextConsumer(current, workInProgress, renderLanes);
                case MemoComponent:
                    {
                        var _type2 = workInProgress.type;
                        var _unresolvedProps3 = workInProgress.pendingProps;
                        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                        {
                            if (workInProgress.type !== workInProgress.elementType) {
                                var outerPropTypes = _type2.propTypes;
                                if (outerPropTypes) {
                                    checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentName(_type2));
                                }
                            }
                        }
                        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);
                    }
                case SimpleMemoComponent:
                    {
                        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);
                    }
                case IncompleteClassComponent:
                    {
                        var _Component3 = workInProgress.type;
                        var _unresolvedProps4 = workInProgress.pendingProps;
                        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                        return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);
                    }
                case SuspenseListComponent:
                    {
                        return updateSuspenseListComponent(current, workInProgress, renderLanes);
                    }
                case FundamentalComponent:
                    {
                        break;
                    }
                case ScopeComponent:
                    {
                        break;
                    }
                case Block:
                    {
                        break;
                    }
                case OffscreenComponent:
                    {
                        return updateOffscreenComponent(current, workInProgress, renderLanes);
                    }
                case LegacyHiddenComponent:
                    {
                        return updateLegacyHiddenComponent(current, workInProgress, renderLanes);
                    }
            }
            {
                {
                    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
                }
            }
        }
        function markUpdate(workInProgress) {
            workInProgress.flags |= Update;
        }
        function markRef$1(workInProgress) {
            workInProgress.flags |= Ref;
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        if (supportsMutation) {
            appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
                var node = workInProgress.child;
                while (node !== null) {
                    if (node.tag === HostComponent || node.tag === HostText) {
                        appendInitialChild(parent, node.stateNode);
                    }
                    else if (node.tag === HostPortal)
                        ;
                    else if (node.child !== null) {
                        node.child.return = node;
                        node = node.child;
                        continue;
                    }
                    if (node === workInProgress) {
                        return;
                    }
                    while (node.sibling === null) {
                        if (node.return === null || node.return === workInProgress) {
                            return;
                        }
                        node = node.return;
                    }
                    node.sibling.return = node.return;
                    node = node.sibling;
                }
            };
            updateHostContainer = function (workInProgress) {
            };
            updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
                var oldProps = current.memoizedProps;
                if (oldProps === newProps) {
                    return;
                }
                var instance = workInProgress.stateNode;
                var currentHostContext = getHostContext();
                var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                workInProgress.updateQueue = updatePayload;
                if (updatePayload) {
                    markUpdate(workInProgress);
                }
            };
            updateHostText$1 = function (current, workInProgress, oldText, newText) {
                if (oldText !== newText) {
                    markUpdate(workInProgress);
                }
            };
        }
        else if (supportsPersistence) {
            appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
                var node = workInProgress.child;
                while (node !== null) {
                    if (node.tag === HostComponent) {
                        var instance = node.stateNode;
                        if (needsVisibilityToggle && isHidden) {
                            var props = node.memoizedProps;
                            var type = node.type;
                            instance = cloneHiddenInstance(instance, type, props, node);
                        }
                        appendInitialChild(parent, instance);
                    }
                    else if (node.tag === HostText) {
                        var _instance = node.stateNode;
                        if (needsVisibilityToggle && isHidden) {
                            var text = node.memoizedProps;
                            _instance = cloneHiddenTextInstance(_instance, text, node);
                        }
                        appendInitialChild(parent, _instance);
                    }
                    else if (node.tag === HostPortal)
                        ;
                    else if (node.tag === SuspenseComponent) {
                        if ((node.flags & Update) !== NoFlags) {
                            var newIsHidden = node.memoizedState !== null;
                            if (newIsHidden) {
                                var primaryChildParent = node.child;
                                if (primaryChildParent !== null) {
                                    if (primaryChildParent.child !== null) {
                                        primaryChildParent.child.return = primaryChildParent;
                                        appendAllChildren(parent, primaryChildParent, true, newIsHidden);
                                    }
                                    var fallbackChildParent = primaryChildParent.sibling;
                                    if (fallbackChildParent !== null) {
                                        fallbackChildParent.return = node;
                                        node = fallbackChildParent;
                                        continue;
                                    }
                                }
                            }
                        }
                        if (node.child !== null) {
                            node.child.return = node;
                            node = node.child;
                            continue;
                        }
                    }
                    else if (node.child !== null) {
                        node.child.return = node;
                        node = node.child;
                        continue;
                    }
                    node = node;
                    if (node === workInProgress) {
                        return;
                    }
                    while (node.sibling === null) {
                        if (node.return === null || node.return === workInProgress) {
                            return;
                        }
                        node = node.return;
                    }
                    node.sibling.return = node.return;
                    node = node.sibling;
                }
            };
            var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
                var node = workInProgress.child;
                while (node !== null) {
                    if (node.tag === HostComponent) {
                        var instance = node.stateNode;
                        if (needsVisibilityToggle && isHidden) {
                            var props = node.memoizedProps;
                            var type = node.type;
                            instance = cloneHiddenInstance(instance, type, props, node);
                        }
                        appendChildToContainerChildSet(containerChildSet, instance);
                    }
                    else if (node.tag === HostText) {
                        var _instance3 = node.stateNode;
                        if (needsVisibilityToggle && isHidden) {
                            var text = node.memoizedProps;
                            _instance3 = cloneHiddenTextInstance(_instance3, text, node);
                        }
                        appendChildToContainerChildSet(containerChildSet, _instance3);
                    }
                    else if (node.tag === HostPortal)
                        ;
                    else if (node.tag === SuspenseComponent) {
                        if ((node.flags & Update) !== NoFlags) {
                            var newIsHidden = node.memoizedState !== null;
                            if (newIsHidden) {
                                var primaryChildParent = node.child;
                                if (primaryChildParent !== null) {
                                    if (primaryChildParent.child !== null) {
                                        primaryChildParent.child.return = primaryChildParent;
                                        appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
                                    }
                                    var fallbackChildParent = primaryChildParent.sibling;
                                    if (fallbackChildParent !== null) {
                                        fallbackChildParent.return = node;
                                        node = fallbackChildParent;
                                        continue;
                                    }
                                }
                            }
                        }
                        if (node.child !== null) {
                            node.child.return = node;
                            node = node.child;
                            continue;
                        }
                    }
                    else if (node.child !== null) {
                        node.child.return = node;
                        node = node.child;
                        continue;
                    }
                    node = node;
                    if (node === workInProgress) {
                        return;
                    }
                    while (node.sibling === null) {
                        if (node.return === null || node.return === workInProgress) {
                            return;
                        }
                        node = node.return;
                    }
                    node.sibling.return = node.return;
                    node = node.sibling;
                }
            };
            updateHostContainer = function (workInProgress) {
                var portalOrRoot = workInProgress.stateNode;
                var childrenUnchanged = workInProgress.firstEffect === null;
                if (childrenUnchanged)
                    ;
                else {
                    var container = portalOrRoot.containerInfo;
                    var newChildSet = createContainerChildSet(container);
                    appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
                    portalOrRoot.pendingChildren = newChildSet;
                    markUpdate(workInProgress);
                    finalizeContainerChildren(container, newChildSet);
                }
            };
            updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
                var currentInstance = current.stateNode;
                var oldProps = current.memoizedProps;
                var childrenUnchanged = workInProgress.firstEffect === null;
                if (childrenUnchanged && oldProps === newProps) {
                    workInProgress.stateNode = currentInstance;
                    return;
                }
                var recyclableInstance = workInProgress.stateNode;
                var currentHostContext = getHostContext();
                var updatePayload = null;
                if (oldProps !== newProps) {
                    updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                }
                if (childrenUnchanged && updatePayload === null) {
                    workInProgress.stateNode = currentInstance;
                    return;
                }
                var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);
                if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress);
                }
                workInProgress.stateNode = newInstance;
                if (childrenUnchanged) {
                    markUpdate(workInProgress);
                }
                else {
                    appendAllChildren(newInstance, workInProgress, false, false);
                }
            };
            updateHostText$1 = function (current, workInProgress, oldText, newText) {
                if (oldText !== newText) {
                    var rootContainerInstance = getRootHostContainer();
                    var currentHostContext = getHostContext();
                    workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
                    markUpdate(workInProgress);
                }
                else {
                    workInProgress.stateNode = current.stateNode;
                }
            };
        }
        else {
            updateHostContainer = function (workInProgress) {
            };
            updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
            };
            updateHostText$1 = function (current, workInProgress, oldText, newText) {
            };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
                return;
            }
            switch (renderState.tailMode) {
                case 'hidden':
                    {
                        var tailNode = renderState.tail;
                        var lastTailNode = null;
                        while (tailNode !== null) {
                            if (tailNode.alternate !== null) {
                                lastTailNode = tailNode;
                            }
                            tailNode = tailNode.sibling;
                        }
                        if (lastTailNode === null) {
                            renderState.tail = null;
                        }
                        else {
                            lastTailNode.sibling = null;
                        }
                        break;
                    }
                case 'collapsed':
                    {
                        var _tailNode = renderState.tail;
                        var _lastTailNode = null;
                        while (_tailNode !== null) {
                            if (_tailNode.alternate !== null) {
                                _lastTailNode = _tailNode;
                            }
                            _tailNode = _tailNode.sibling;
                        }
                        if (_lastTailNode === null) {
                            if (!hasRenderedATailFallback && renderState.tail !== null) {
                                renderState.tail.sibling = null;
                            }
                            else {
                                renderState.tail = null;
                            }
                        }
                        else {
                            _lastTailNode.sibling = null;
                        }
                        break;
                    }
            }
        }
        function completeWork(current, workInProgress, renderLanes) {
            var newProps = workInProgress.pendingProps;
            switch (workInProgress.tag) {
                case IndeterminateComponent:
                case LazyComponent:
                case SimpleMemoComponent:
                case FunctionComponent:
                case ForwardRef:
                case Fragment:
                case Mode:
                case Profiler:
                case ContextConsumer:
                case MemoComponent:
                    return null;
                case ClassComponent:
                    {
                        var Component = workInProgress.type;
                        if (isContextProvider(Component)) {
                            popContext(workInProgress);
                        }
                        return null;
                    }
                case HostRoot:
                    {
                        popHostContainer(workInProgress);
                        popTopLevelContextObject(workInProgress);
                        resetWorkInProgressVersions();
                        var fiberRoot = workInProgress.stateNode;
                        if (fiberRoot.pendingContext) {
                            fiberRoot.context = fiberRoot.pendingContext;
                            fiberRoot.pendingContext = null;
                        }
                        if (current === null || current.child === null) {
                            var wasHydrated = popHydrationState(workInProgress);
                            if (wasHydrated) {
                                markUpdate(workInProgress);
                            }
                            else if (!fiberRoot.hydrate) {
                                workInProgress.flags |= Snapshot;
                            }
                        }
                        updateHostContainer(workInProgress);
                        return null;
                    }
                case HostComponent:
                    {
                        popHostContext(workInProgress);
                        var rootContainerInstance = getRootHostContainer();
                        var type = workInProgress.type;
                        if (current !== null && workInProgress.stateNode != null) {
                            updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);
                            if (current.ref !== workInProgress.ref) {
                                markRef$1(workInProgress);
                            }
                        }
                        else {
                            if (!newProps) {
                                if (!(workInProgress.stateNode !== null)) {
                                    {
                                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                                    }
                                }
                                return null;
                            }
                            var currentHostContext = getHostContext();
                            var _wasHydrated = popHydrationState(workInProgress);
                            if (_wasHydrated) {
                                if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                                    markUpdate(workInProgress);
                                }
                            }
                            else {
                                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                                appendAllChildren(instance, workInProgress, false, false);
                                workInProgress.stateNode = instance;
                                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
                                    markUpdate(workInProgress);
                                }
                            }
                            if (workInProgress.ref !== null) {
                                markRef$1(workInProgress);
                            }
                        }
                        return null;
                    }
                case HostText:
                    {
                        var newText = newProps;
                        if (current && workInProgress.stateNode != null) {
                            var oldText = current.memoizedProps;
                            updateHostText$1(current, workInProgress, oldText, newText);
                        }
                        else {
                            if (typeof newText !== 'string') {
                                if (!(workInProgress.stateNode !== null)) {
                                    {
                                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                                    }
                                }
                            }
                            var _rootContainerInstance = getRootHostContainer();
                            var _currentHostContext = getHostContext();
                            var _wasHydrated2 = popHydrationState(workInProgress);
                            if (_wasHydrated2) {
                                if (prepareToHydrateHostTextInstance(workInProgress)) {
                                    markUpdate(workInProgress);
                                }
                            }
                            else {
                                workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                            }
                        }
                        return null;
                    }
                case SuspenseComponent:
                    {
                        popSuspenseContext(workInProgress);
                        var nextState = workInProgress.memoizedState;
                        if ((workInProgress.flags & DidCapture) !== NoFlags) {
                            workInProgress.lanes = renderLanes;
                            if ((workInProgress.mode & ProfileMode) !== NoMode) {
                                transferActualDuration(workInProgress);
                            }
                            return workInProgress;
                        }
                        var nextDidTimeout = nextState !== null;
                        var prevDidTimeout = false;
                        if (current === null) {
                            if (workInProgress.memoizedProps.fallback !== undefined) {
                                popHydrationState(workInProgress);
                            }
                        }
                        else {
                            var prevState = current.memoizedState;
                            prevDidTimeout = prevState !== null;
                        }
                        if (nextDidTimeout && !prevDidTimeout) {
                            if ((workInProgress.mode & BlockingMode) !== NoMode) {
                                var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
                                if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                                    renderDidSuspend();
                                }
                                else {
                                    renderDidSuspendDelayIfPossible();
                                }
                            }
                        }
                        if (supportsPersistence) {
                            if (nextDidTimeout) {
                                workInProgress.flags |= Update;
                            }
                        }
                        if (supportsMutation) {
                            if (nextDidTimeout || prevDidTimeout) {
                                workInProgress.flags |= Update;
                            }
                        }
                        return null;
                    }
                case HostPortal:
                    popHostContainer(workInProgress);
                    updateHostContainer(workInProgress);
                    if (current === null) {
                        preparePortalMount(workInProgress.stateNode.containerInfo);
                    }
                    return null;
                case ContextProvider:
                    popProvider(workInProgress);
                    return null;
                case IncompleteClassComponent:
                    {
                        var _Component = workInProgress.type;
                        if (isContextProvider(_Component)) {
                            popContext(workInProgress);
                        }
                        return null;
                    }
                case SuspenseListComponent:
                    {
                        popSuspenseContext(workInProgress);
                        var renderState = workInProgress.memoizedState;
                        if (renderState === null) {
                            return null;
                        }
                        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                        var renderedTail = renderState.rendering;
                        if (renderedTail === null) {
                            if (!didSuspendAlready) {
                                var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);
                                if (!cannotBeSuspended) {
                                    var row = workInProgress.child;
                                    while (row !== null) {
                                        var suspended = findFirstSuspended(row);
                                        if (suspended !== null) {
                                            didSuspendAlready = true;
                                            workInProgress.flags |= DidCapture;
                                            cutOffTailIfNeeded(renderState, false);
                                            var newThennables = suspended.updateQueue;
                                            if (newThennables !== null) {
                                                workInProgress.updateQueue = newThennables;
                                                workInProgress.flags |= Update;
                                            }
                                            if (renderState.lastEffect === null) {
                                                workInProgress.firstEffect = null;
                                            }
                                            workInProgress.lastEffect = renderState.lastEffect;
                                            resetChildFibers(workInProgress, renderLanes);
                                            pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                                            return workInProgress.child;
                                        }
                                        row = row.sibling;
                                    }
                                }
                                if (renderState.tail !== null && now$1() > getRenderTargetTime()) {
                                    workInProgress.flags |= DidCapture;
                                    didSuspendAlready = true;
                                    cutOffTailIfNeeded(renderState, false);
                                    workInProgress.lanes = SomeRetryLane;
                                    {
                                        markSpawnedWork(SomeRetryLane);
                                    }
                                }
                            }
                            else {
                                cutOffTailIfNeeded(renderState, false);
                            }
                        }
                        else {
                            if (!didSuspendAlready) {
                                var _suspended = findFirstSuspended(renderedTail);
                                if (_suspended !== null) {
                                    workInProgress.flags |= DidCapture;
                                    didSuspendAlready = true;
                                    var _newThennables = _suspended.updateQueue;
                                    if (_newThennables !== null) {
                                        workInProgress.updateQueue = _newThennables;
                                        workInProgress.flags |= Update;
                                    }
                                    cutOffTailIfNeeded(renderState, true);
                                    if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating()) {
                                        var lastEffect = workInProgress.lastEffect = renderState.lastEffect;
                                        if (lastEffect !== null) {
                                            lastEffect.nextEffect = null;
                                        }
                                        return null;
                                    }
                                }
                                else if (now$1() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                                    workInProgress.flags |= DidCapture;
                                    didSuspendAlready = true;
                                    cutOffTailIfNeeded(renderState, false);
                                    workInProgress.lanes = SomeRetryLane;
                                    {
                                        markSpawnedWork(SomeRetryLane);
                                    }
                                }
                            }
                            if (renderState.isBackwards) {
                                renderedTail.sibling = workInProgress.child;
                                workInProgress.child = renderedTail;
                            }
                            else {
                                var previousSibling = renderState.last;
                                if (previousSibling !== null) {
                                    previousSibling.sibling = renderedTail;
                                }
                                else {
                                    workInProgress.child = renderedTail;
                                }
                                renderState.last = renderedTail;
                            }
                        }
                        if (renderState.tail !== null) {
                            var next = renderState.tail;
                            renderState.rendering = next;
                            renderState.tail = next.sibling;
                            renderState.lastEffect = workInProgress.lastEffect;
                            renderState.renderingStartTime = now$1();
                            next.sibling = null;
                            var suspenseContext = suspenseStackCursor.current;
                            if (didSuspendAlready) {
                                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                            }
                            else {
                                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                            }
                            pushSuspenseContext(workInProgress, suspenseContext);
                            return next;
                        }
                        return null;
                    }
                case FundamentalComponent:
                    {
                        break;
                    }
                case ScopeComponent:
                    {
                        break;
                    }
                case Block:
                    break;
                case OffscreenComponent:
                case LegacyHiddenComponent:
                    {
                        popRenderLanes(workInProgress);
                        if (current !== null) {
                            var _nextState = workInProgress.memoizedState;
                            var _prevState = current.memoizedState;
                            var prevIsHidden = _prevState !== null;
                            var nextIsHidden = _nextState !== null;
                            if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') {
                                workInProgress.flags |= Update;
                            }
                        }
                        return null;
                    }
            }
            {
                {
                    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
                }
            }
        }
        function unwindWork(workInProgress, renderLanes) {
            switch (workInProgress.tag) {
                case ClassComponent:
                    {
                        var Component = workInProgress.type;
                        if (isContextProvider(Component)) {
                            popContext(workInProgress);
                        }
                        var flags = workInProgress.flags;
                        if (flags & ShouldCapture) {
                            workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                            if ((workInProgress.mode & ProfileMode) !== NoMode) {
                                transferActualDuration(workInProgress);
                            }
                            return workInProgress;
                        }
                        return null;
                    }
                case HostRoot:
                    {
                        popHostContainer(workInProgress);
                        popTopLevelContextObject(workInProgress);
                        resetWorkInProgressVersions();
                        var _flags = workInProgress.flags;
                        if (!((_flags & DidCapture) === NoFlags)) {
                            {
                                throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                            }
                        }
                        workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                        return workInProgress;
                    }
                case HostComponent:
                    {
                        popHostContext(workInProgress);
                        return null;
                    }
                case SuspenseComponent:
                    {
                        popSuspenseContext(workInProgress);
                        var _flags2 = workInProgress.flags;
                        if (_flags2 & ShouldCapture) {
                            workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture;
                            if ((workInProgress.mode & ProfileMode) !== NoMode) {
                                transferActualDuration(workInProgress);
                            }
                            return workInProgress;
                        }
                        return null;
                    }
                case SuspenseListComponent:
                    {
                        popSuspenseContext(workInProgress);
                        return null;
                    }
                case HostPortal:
                    popHostContainer(workInProgress);
                    return null;
                case ContextProvider:
                    popProvider(workInProgress);
                    return null;
                case OffscreenComponent:
                case LegacyHiddenComponent:
                    popRenderLanes(workInProgress);
                    return null;
                default:
                    return null;
            }
        }
        function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
                case ClassComponent:
                    {
                        var childContextTypes = interruptedWork.type.childContextTypes;
                        if (childContextTypes !== null && childContextTypes !== undefined) {
                            popContext(interruptedWork);
                        }
                        break;
                    }
                case HostRoot:
                    {
                        popHostContainer(interruptedWork);
                        popTopLevelContextObject(interruptedWork);
                        resetWorkInProgressVersions();
                        break;
                    }
                case HostComponent:
                    {
                        popHostContext(interruptedWork);
                        break;
                    }
                case HostPortal:
                    popHostContainer(interruptedWork);
                    break;
                case SuspenseComponent:
                    popSuspenseContext(interruptedWork);
                    break;
                case SuspenseListComponent:
                    popSuspenseContext(interruptedWork);
                    break;
                case ContextProvider:
                    popProvider(interruptedWork);
                    break;
                case OffscreenComponent:
                case LegacyHiddenComponent:
                    popRenderLanes(interruptedWork);
                    break;
            }
        }
        function createCapturedValue(value, source) {
            return {
                value: value,
                source: source,
                stack: getStackByFiberInDevAndProd(source)
            };
        }
        function showErrorDialog(boundary, errorInfo) {
            return true;
        }
        function logCapturedError(boundary, errorInfo) {
            try {
                var logError = showErrorDialog(boundary, errorInfo);
                if (logError === false) {
                    return;
                }
                var error = errorInfo.value;
                if (true) {
                    var source = errorInfo.source;
                    var stack = errorInfo.stack;
                    var componentStack = stack !== null ? stack : '';
                    if (error != null && error._suppressLogging) {
                        if (boundary.tag === ClassComponent) {
                            return;
                        }
                        console['error'](error);
                    }
                    var componentName = source ? getComponentName(source.type) : null;
                    var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
                    var errorBoundaryMessage;
                    var errorBoundaryName = getComponentName(boundary.type);
                    if (errorBoundaryName) {
                        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                    }
                    else {
                        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
                    }
                    var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                    console['error'](combinedMessage);
                }
                else {}
            }
            catch (e) {
                setTimeout(function () {
                    throw e;
                });
            }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
                element: null
            };
            var error = errorInfo.value;
            update.callback = function () {
                onUncaughtError(error);
                logCapturedError(fiber, errorInfo);
            };
            return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === 'function') {
                var error$1 = errorInfo.value;
                update.payload = function () {
                    logCapturedError(fiber, errorInfo);
                    return getDerivedStateFromError(error$1);
                };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === 'function') {
                update.callback = function callback() {
                    {
                        markFailedErrorBoundaryForHotReloading(fiber);
                    }
                    if (typeof getDerivedStateFromError !== 'function') {
                        markLegacyErrorBoundaryAsFailed(this);
                        logCapturedError(fiber, errorInfo);
                    }
                    var error$1 = errorInfo.value;
                    var stack = errorInfo.stack;
                    this.componentDidCatch(error$1, {
                        componentStack: stack !== null ? stack : ''
                    });
                    {
                        if (typeof getDerivedStateFromError !== 'function') {
                            if (!includesSomeLane(fiber.lanes, SyncLane)) {
                                error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
                            }
                        }
                    }
                };
            }
            else {
                update.callback = function () {
                    markFailedErrorBoundaryForHotReloading(fiber);
                };
            }
            return update;
        }
        function attachPingListener(root, wakeable, lanes) {
            var pingCache = root.pingCache;
            var threadIDs;
            if (pingCache === null) {
                pingCache = root.pingCache = new PossiblyWeakMap$1();
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
            else {
                threadIDs = pingCache.get(wakeable);
                if (threadIDs === undefined) {
                    threadIDs = new Set();
                    pingCache.set(wakeable, threadIDs);
                }
            }
            if (!threadIDs.has(lanes)) {
                threadIDs.add(lanes);
                var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
                wakeable.then(ping, ping);
            }
        }
        function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
                var wakeable = value;
                if ((sourceFiber.mode & BlockingMode) === NoMode) {
                    var currentSource = sourceFiber.alternate;
                    if (currentSource) {
                        sourceFiber.updateQueue = currentSource.updateQueue;
                        sourceFiber.memoizedState = currentSource.memoizedState;
                        sourceFiber.lanes = currentSource.lanes;
                    }
                    else {
                        sourceFiber.updateQueue = null;
                        sourceFiber.memoizedState = null;
                    }
                }
                var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
                var _workInProgress = returnFiber;
                do {
                    if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                        var wakeables = _workInProgress.updateQueue;
                        if (wakeables === null) {
                            var updateQueue = new Set();
                            updateQueue.add(wakeable);
                            _workInProgress.updateQueue = updateQueue;
                        }
                        else {
                            wakeables.add(wakeable);
                        }
                        if ((_workInProgress.mode & BlockingMode) === NoMode) {
                            _workInProgress.flags |= DidCapture;
                            sourceFiber.flags |= ForceUpdateForLegacySuspense;
                            sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                            if (sourceFiber.tag === ClassComponent) {
                                var currentSourceFiber = sourceFiber.alternate;
                                if (currentSourceFiber === null) {
                                    sourceFiber.tag = IncompleteClassComponent;
                                }
                                else {
                                    var update = createUpdate(NoTimestamp, SyncLane);
                                    update.tag = ForceUpdate;
                                    enqueueUpdate(sourceFiber, update);
                                }
                            }
                            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                            return;
                        }
                        attachPingListener(root, wakeable, rootRenderLanes);
                        _workInProgress.flags |= ShouldCapture;
                        _workInProgress.lanes = rootRenderLanes;
                        return;
                    }
                    _workInProgress = _workInProgress.return;
                } while (_workInProgress !== null);
                value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress = returnFiber;
            do {
                switch (workInProgress.tag) {
                    case HostRoot:
                        {
                            var _errorInfo = value;
                            workInProgress.flags |= ShouldCapture;
                            var lane = pickArbitraryLane(rootRenderLanes);
                            workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                            var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                            enqueueCapturedUpdate(workInProgress, _update);
                            return;
                        }
                    case ClassComponent:
                        var errorInfo = value;
                        var ctor = workInProgress.type;
                        var instance = workInProgress.stateNode;
                        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                            workInProgress.flags |= ShouldCapture;
                            var _lane = pickArbitraryLane(rootRenderLanes);
                            workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane);
                            var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                            enqueueCapturedUpdate(workInProgress, _update2);
                            return;
                        }
                        break;
                }
                workInProgress = workInProgress.return;
            } while (workInProgress !== null);
        }
        function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
                func.apply(context, funcArgs);
            }
            catch (error) {
                this.onError(error);
            }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
            if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
                var fakeNode = document.createElement('react');
                invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                    if (!(typeof document !== 'undefined')) {
                        {
                            throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                        }
                    }
                    var evt = document.createEvent('Event');
                    var didCall = false;
                    var didError = true;
                    var windowEvent = window.event;
                    var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
                    function restoreAfterDispatch() {
                        fakeNode.removeEventListener(evtType, callCallback, false);
                        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
                            window.event = windowEvent;
                        }
                    }
                    var funcArgs = Array.prototype.slice.call(arguments, 3);
                    function callCallback() {
                        didCall = true;
                        restoreAfterDispatch();
                        func.apply(context, funcArgs);
                        didError = false;
                    }
                    var error;
                    var didSetError = false;
                    var isCrossOriginError = false;
                    function handleWindowError(event) {
                        error = event.error;
                        didSetError = true;
                        if (error === null && event.colno === 0 && event.lineno === 0) {
                            isCrossOriginError = true;
                        }
                        if (event.defaultPrevented) {
                            if (error != null && typeof error === 'object') {
                                try {
                                    error._suppressLogging = true;
                                }
                                catch (inner) {
                                }
                            }
                        }
                    }
                    var evtType = "react-" + (name ? name : 'invokeguardedcallback');
                    window.addEventListener('error', handleWindowError);
                    fakeNode.addEventListener(evtType, callCallback, false);
                    evt.initEvent(evtType, false, false);
                    fakeNode.dispatchEvent(evt);
                    if (windowEventDescriptor) {
                        Object.defineProperty(window, 'event', windowEventDescriptor);
                    }
                    if (didCall && didError) {
                        if (!didSetError) {
                            error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
                        }
                        else if (isCrossOriginError) {
                            error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
                        }
                        this.onError(error);
                    }
                    window.removeEventListener('error', handleWindowError);
                    if (!didCall) {
                        restoreAfterDispatch();
                        return invokeGuardedCallbackProd.apply(this, arguments);
                    }
                };
            }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var reporter = {
            onError: function (error) {
                hasError = true;
                caughtError = error;
            }
        };
        function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function hasCaughtError() {
            return hasError;
        }
        function clearCaughtError() {
            if (hasError) {
                var error = caughtError;
                hasError = false;
                caughtError = null;
                return error;
            }
            else {
                {
                    {
                        throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                    }
                }
            }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
            didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
        }
        var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
        var callComponentWillUnmountWithTimer = function (current, instance) {
            instance.props = current.memoizedProps;
            instance.state = current.memoizedState;
            {
                instance.componentWillUnmount();
            }
        };
        function safelyCallComponentWillUnmount(current, instance) {
            {
                invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);
                if (hasCaughtError()) {
                    var unmountError = clearCaughtError();
                    captureCommitPhaseError(current, unmountError);
                }
            }
        }
        function safelyDetachRef(current) {
            var ref = current.ref;
            if (ref !== null) {
                if (typeof ref === 'function') {
                    {
                        invokeGuardedCallback(null, ref, null, null);
                        if (hasCaughtError()) {
                            var refError = clearCaughtError();
                            captureCommitPhaseError(current, refError);
                        }
                    }
                }
                else {
                    ref.current = null;
                }
            }
        }
        function safelyCallDestroy(current, destroy) {
            {
                invokeGuardedCallback(null, destroy, null);
                if (hasCaughtError()) {
                    var error = clearCaughtError();
                    captureCommitPhaseError(current, error);
                }
            }
        }
        function commitBeforeMutationLifeCycles(current, finishedWork) {
            switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                case Block:
                    {
                        return;
                    }
                case ClassComponent:
                    {
                        if (finishedWork.flags & Snapshot) {
                            if (current !== null) {
                                var prevProps = current.memoizedProps;
                                var prevState = current.memoizedState;
                                var instance = finishedWork.stateNode;
                                {
                                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                        if (instance.props !== finishedWork.memoizedProps) {
                                            error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                        }
                                        if (instance.state !== finishedWork.memoizedState) {
                                            error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                        }
                                    }
                                }
                                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                                {
                                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                                    if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                                        didWarnSet.add(finishedWork.type);
                                        error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
                                    }
                                }
                                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                            }
                        }
                        return;
                    }
                case HostRoot:
                    {
                        if (supportsMutation) {
                            if (finishedWork.flags & Snapshot) {
                                var root = finishedWork.stateNode;
                                clearContainer(root.containerInfo);
                            }
                        }
                        return;
                    }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                    return;
            }
            {
                {
                    throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
            }
        }
        function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;
                do {
                    if ((effect.tag & tag) === tag) {
                        var destroy = effect.destroy;
                        effect.destroy = undefined;
                        if (destroy !== undefined) {
                            destroy();
                        }
                    }
                    effect = effect.next;
                } while (effect !== firstEffect);
            }
        }
        function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;
                do {
                    if ((effect.tag & tag) === tag) {
                        var create = effect.create;
                        effect.destroy = create();
                        {
                            var destroy = effect.destroy;
                            if (destroy !== undefined && typeof destroy !== 'function') {
                                var addendum = void 0;
                                if (destroy === null) {
                                    addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
                                }
                                else if (typeof destroy.then === 'function') {
                                    addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
                                }
                                else {
                                    addendum = ' You returned: ' + destroy;
                                }
                                error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s', addendum);
                            }
                        }
                    }
                    effect = effect.next;
                } while (effect !== firstEffect);
            }
        }
        function schedulePassiveEffects(finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;
                do {
                    var _effect = effect, next = _effect.next, tag = _effect.tag;
                    if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                        enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                        enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                    }
                    effect = next;
                } while (effect !== firstEffect);
            }
        }
        function commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                case Block:
                    {
                        {
                            commitHookEffectListMount(Layout | HasEffect, finishedWork);
                        }
                        schedulePassiveEffects(finishedWork);
                        return;
                    }
                case ClassComponent:
                    {
                        var instance = finishedWork.stateNode;
                        if (finishedWork.flags & Update) {
                            if (current === null) {
                                {
                                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                        if (instance.props !== finishedWork.memoizedProps) {
                                            error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                        }
                                        if (instance.state !== finishedWork.memoizedState) {
                                            error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                        }
                                    }
                                }
                                {
                                    instance.componentDidMount();
                                }
                            }
                            else {
                                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                                var prevState = current.memoizedState;
                                {
                                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                        if (instance.props !== finishedWork.memoizedProps) {
                                            error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                        }
                                        if (instance.state !== finishedWork.memoizedState) {
                                            error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                        }
                                    }
                                }
                                {
                                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                                }
                            }
                        }
                        var updateQueue = finishedWork.updateQueue;
                        if (updateQueue !== null) {
                            {
                                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                    if (instance.props !== finishedWork.memoizedProps) {
                                        error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                    }
                                    if (instance.state !== finishedWork.memoizedState) {
                                        error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                    }
                                }
                            }
                            commitUpdateQueue(finishedWork, updateQueue, instance);
                        }
                        return;
                    }
                case HostRoot:
                    {
                        var _updateQueue = finishedWork.updateQueue;
                        if (_updateQueue !== null) {
                            var _instance = null;
                            if (finishedWork.child !== null) {
                                switch (finishedWork.child.tag) {
                                    case HostComponent:
                                        _instance = getPublicInstance(finishedWork.child.stateNode);
                                        break;
                                    case ClassComponent:
                                        _instance = finishedWork.child.stateNode;
                                        break;
                                }
                            }
                            commitUpdateQueue(finishedWork, _updateQueue, _instance);
                        }
                        return;
                    }
                case HostComponent:
                    {
                        var _instance2 = finishedWork.stateNode;
                        if (current === null && finishedWork.flags & Update) {
                            var type = finishedWork.type;
                            var props = finishedWork.memoizedProps;
                            commitMount(_instance2, type, props, finishedWork);
                        }
                        return;
                    }
                case HostText:
                    {
                        return;
                    }
                case HostPortal:
                    {
                        return;
                    }
                case Profiler:
                    {
                        {
                            var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                            var effectDuration = finishedWork.stateNode.effectDuration;
                            var commitTime = getCommitTime();
                            if (typeof onRender === 'function') {
                                {
                                    onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
                                }
                            }
                        }
                        return;
                    }
                case SuspenseComponent:
                    {
                        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                        return;
                    }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case FundamentalComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                    return;
            }
            {
                {
                    throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
            }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
            if (supportsMutation) {
                var node = finishedWork;
                while (true) {
                    if (node.tag === HostComponent) {
                        var instance = node.stateNode;
                        if (isHidden) {
                            hideInstance(instance);
                        }
                        else {
                            unhideInstance(node.stateNode, node.memoizedProps);
                        }
                    }
                    else if (node.tag === HostText) {
                        var _instance3 = node.stateNode;
                        if (isHidden) {
                            hideTextInstance(_instance3);
                        }
                        else {
                            unhideTextInstance(_instance3, node.memoizedProps);
                        }
                    }
                    else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                        ;
                    else if (node.child !== null) {
                        node.child.return = node;
                        node = node.child;
                        continue;
                    }
                    if (node === finishedWork) {
                        return;
                    }
                    while (node.sibling === null) {
                        if (node.return === null || node.return === finishedWork) {
                            return;
                        }
                        node = node.return;
                    }
                    node.sibling.return = node.return;
                    node = node.sibling;
                }
            }
        }
        function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
                var instance = finishedWork.stateNode;
                var instanceToUse;
                switch (finishedWork.tag) {
                    case HostComponent:
                        instanceToUse = getPublicInstance(instance);
                        break;
                    default:
                        instanceToUse = instance;
                }
                if (typeof ref === 'function') {
                    ref(instanceToUse);
                }
                else {
                    {
                        if (!ref.hasOwnProperty('current')) {
                            error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentName(finishedWork.type));
                        }
                    }
                    ref.current = instanceToUse;
                }
            }
        }
        function commitDetachRef(current) {
            var currentRef = current.ref;
            if (currentRef !== null) {
                if (typeof currentRef === 'function') {
                    currentRef(null);
                }
                else {
                    currentRef.current = null;
                }
            }
        }
        function commitUnmount(finishedRoot, current, renderPriorityLevel) {
            onCommitUnmount(current);
            switch (current.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent:
                case Block:
                    {
                        var updateQueue = current.updateQueue;
                        if (updateQueue !== null) {
                            var lastEffect = updateQueue.lastEffect;
                            if (lastEffect !== null) {
                                var firstEffect = lastEffect.next;
                                var effect = firstEffect;
                                do {
                                    var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                                    if (destroy !== undefined) {
                                        if ((tag & Passive$1) !== NoFlags$1) {
                                            enqueuePendingPassiveHookEffectUnmount(current, effect);
                                        }
                                        else {
                                            {
                                                safelyCallDestroy(current, destroy);
                                            }
                                        }
                                    }
                                    effect = effect.next;
                                } while (effect !== firstEffect);
                            }
                        }
                        return;
                    }
                case ClassComponent:
                    {
                        safelyDetachRef(current);
                        var instance = current.stateNode;
                        if (typeof instance.componentWillUnmount === 'function') {
                            safelyCallComponentWillUnmount(current, instance);
                        }
                        return;
                    }
                case HostComponent:
                    {
                        safelyDetachRef(current);
                        return;
                    }
                case HostPortal:
                    {
                        if (supportsMutation) {
                            unmountHostComponents(finishedRoot, current);
                        }
                        else if (supportsPersistence) {
                            emptyPortalContainer(current);
                        }
                        return;
                    }
                case FundamentalComponent:
                    {
                        return;
                    }
                case DehydratedFragment:
                    {
                        return;
                    }
                case ScopeComponent:
                    {
                        return;
                    }
            }
        }
        function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
            var node = root;
            while (true) {
                commitUnmount(finishedRoot, node);
                if (node.child !== null && (!supportsMutation || node.tag !== HostPortal)) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
                if (node === root) {
                    return;
                }
                while (node.sibling === null) {
                    if (node.return === null || node.return === root) {
                        return;
                    }
                    node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
            }
        }
        function detachFiberMutation(fiber) {
            fiber.alternate = null;
            fiber.child = null;
            fiber.dependencies = null;
            fiber.firstEffect = null;
            fiber.lastEffect = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.return = null;
            fiber.updateQueue = null;
            {
                fiber._debugOwner = null;
            }
        }
        function emptyPortalContainer(current) {
            if (!supportsPersistence) {
                return;
            }
            var portal = current.stateNode;
            var containerInfo = portal.containerInfo;
            var emptyChildSet = createContainerChildSet(containerInfo);
            replaceContainerChildren(containerInfo, emptyChildSet);
        }
        function commitContainer(finishedWork) {
            if (!supportsPersistence) {
                return;
            }
            switch (finishedWork.tag) {
                case ClassComponent:
                case HostComponent:
                case HostText:
                case FundamentalComponent:
                    {
                        return;
                    }
                case HostRoot:
                case HostPortal:
                    {
                        var portalOrRoot = finishedWork.stateNode;
                        var containerInfo = portalOrRoot.containerInfo, pendingChildren = portalOrRoot.pendingChildren;
                        replaceContainerChildren(containerInfo, pendingChildren);
                        return;
                    }
            }
            {
                {
                    throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
            }
        }
        function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
                if (isHostParent(parent)) {
                    return parent;
                }
                parent = parent.return;
            }
            {
                {
                    throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                }
            }
        }
        function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
            var node = fiber;
            siblings: while (true) {
                while (node.sibling === null) {
                    if (node.return === null || isHostParent(node.return)) {
                        return null;
                    }
                    node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                    if (node.flags & Placement) {
                        continue siblings;
                    }
                    if (node.child === null || node.tag === HostPortal) {
                        continue siblings;
                    }
                    else {
                        node.child.return = node;
                        node = node.child;
                    }
                }
                if (!(node.flags & Placement)) {
                    return node.stateNode;
                }
            }
        }
        function commitPlacement(finishedWork) {
            if (!supportsMutation) {
                return;
            }
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
                case HostComponent:
                    parent = parentStateNode;
                    isContainer = false;
                    break;
                case HostRoot:
                    parent = parentStateNode.containerInfo;
                    isContainer = true;
                    break;
                case HostPortal:
                    parent = parentStateNode.containerInfo;
                    isContainer = true;
                    break;
                case FundamentalComponent:
                default:
                    {
                        {
                            throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
            }
            if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
                insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            }
            else {
                insertOrAppendPlacementNode(finishedWork, before, parent);
            }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
                var stateNode = isHost ? node.stateNode : node.stateNode.instance;
                if (before) {
                    insertInContainerBefore(parent, stateNode, before);
                }
                else {
                    appendChildToContainer(parent, stateNode);
                }
            }
            else if (tag === HostPortal)
                ;
            else {
                var child = node.child;
                if (child !== null) {
                    insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                    var sibling = child.sibling;
                    while (sibling !== null) {
                        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                        sibling = sibling.sibling;
                    }
                }
            }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
                var stateNode = isHost ? node.stateNode : node.stateNode.instance;
                if (before) {
                    insertBefore(parent, stateNode, before);
                }
                else {
                    appendChild(parent, stateNode);
                }
            }
            else if (tag === HostPortal)
                ;
            else {
                var child = node.child;
                if (child !== null) {
                    insertOrAppendPlacementNode(child, before, parent);
                    var sibling = child.sibling;
                    while (sibling !== null) {
                        insertOrAppendPlacementNode(sibling, before, parent);
                        sibling = sibling.sibling;
                    }
                }
            }
        }
        function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
            var node = current;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
                if (!currentParentIsValid) {
                    var parent = node.return;
                    findParent: while (true) {
                        if (!(parent !== null)) {
                            {
                                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                            }
                        }
                        var parentStateNode = parent.stateNode;
                        switch (parent.tag) {
                            case HostComponent:
                                currentParent = parentStateNode;
                                currentParentIsContainer = false;
                                break findParent;
                            case HostRoot:
                                currentParent = parentStateNode.containerInfo;
                                currentParentIsContainer = true;
                                break findParent;
                            case HostPortal:
                                currentParent = parentStateNode.containerInfo;
                                currentParentIsContainer = true;
                                break findParent;
                        }
                        parent = parent.return;
                    }
                    currentParentIsValid = true;
                }
                if (node.tag === HostComponent || node.tag === HostText) {
                    commitNestedUnmounts(finishedRoot, node);
                    if (currentParentIsContainer) {
                        removeChildFromContainer(currentParent, node.stateNode);
                    }
                    else {
                        removeChild(currentParent, node.stateNode);
                    }
                }
                else if (node.tag === HostPortal) {
                    if (node.child !== null) {
                        currentParent = node.stateNode.containerInfo;
                        currentParentIsContainer = true;
                        node.child.return = node;
                        node = node.child;
                        continue;
                    }
                }
                else {
                    commitUnmount(finishedRoot, node);
                    if (node.child !== null) {
                        node.child.return = node;
                        node = node.child;
                        continue;
                    }
                }
                if (node === current) {
                    return;
                }
                while (node.sibling === null) {
                    if (node.return === null || node.return === current) {
                        return;
                    }
                    node = node.return;
                    if (node.tag === HostPortal) {
                        currentParentIsValid = false;
                    }
                }
                node.sibling.return = node.return;
                node = node.sibling;
            }
        }
        function commitDeletion(finishedRoot, current, renderPriorityLevel) {
            if (supportsMutation) {
                unmountHostComponents(finishedRoot, current);
            }
            else {
                commitNestedUnmounts(finishedRoot, current);
            }
            var alternate = current.alternate;
            detachFiberMutation(current);
            if (alternate !== null) {
                detachFiberMutation(alternate);
            }
        }
        function commitWork(current, finishedWork) {
            if (!supportsMutation) {
                switch (finishedWork.tag) {
                    case FunctionComponent:
                    case ForwardRef:
                    case MemoComponent:
                    case SimpleMemoComponent:
                    case Block:
                        {
                            {
                                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                            }
                            return;
                        }
                    case Profiler:
                        {
                            return;
                        }
                    case SuspenseComponent:
                        {
                            commitSuspenseComponent(finishedWork);
                            attachSuspenseRetryListeners(finishedWork);
                            return;
                        }
                    case SuspenseListComponent:
                        {
                            attachSuspenseRetryListeners(finishedWork);
                            return;
                        }
                    case HostRoot:
                        {
                            if (supportsHydration) {
                                var root = finishedWork.stateNode;
                                if (root.hydrate) {
                                    root.hydrate = false;
                                    commitHydratedContainer(root.containerInfo);
                                }
                            }
                            break;
                        }
                    case OffscreenComponent:
                    case LegacyHiddenComponent:
                        {
                            return;
                        }
                }
                commitContainer(finishedWork);
                return;
            }
            switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent:
                case Block:
                    {
                        {
                            commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                        }
                        return;
                    }
                case ClassComponent:
                    {
                        return;
                    }
                case HostComponent:
                    {
                        var instance = finishedWork.stateNode;
                        if (instance != null) {
                            var newProps = finishedWork.memoizedProps;
                            var oldProps = current !== null ? current.memoizedProps : newProps;
                            var type = finishedWork.type;
                            var updatePayload = finishedWork.updateQueue;
                            finishedWork.updateQueue = null;
                            if (updatePayload !== null) {
                                commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
                            }
                        }
                        return;
                    }
                case HostText:
                    {
                        if (!(finishedWork.stateNode !== null)) {
                            {
                                throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                            }
                        }
                        var textInstance = finishedWork.stateNode;
                        var newText = finishedWork.memoizedProps;
                        var oldText = current !== null ? current.memoizedProps : newText;
                        commitTextUpdate(textInstance, oldText, newText);
                        return;
                    }
                case HostRoot:
                    {
                        if (supportsHydration) {
                            var _root = finishedWork.stateNode;
                            if (_root.hydrate) {
                                _root.hydrate = false;
                                commitHydratedContainer(_root.containerInfo);
                            }
                        }
                        return;
                    }
                case Profiler:
                    {
                        return;
                    }
                case SuspenseComponent:
                    {
                        commitSuspenseComponent(finishedWork);
                        attachSuspenseRetryListeners(finishedWork);
                        return;
                    }
                case SuspenseListComponent:
                    {
                        attachSuspenseRetryListeners(finishedWork);
                        return;
                    }
                case IncompleteClassComponent:
                    {
                        return;
                    }
                case FundamentalComponent:
                    {
                        break;
                    }
                case ScopeComponent:
                    {
                        break;
                    }
                case OffscreenComponent:
                case LegacyHiddenComponent:
                    {
                        var newState = finishedWork.memoizedState;
                        var isHidden = newState !== null;
                        hideOrUnhideAllChildren(finishedWork, isHidden);
                        return;
                    }
            }
            {
                {
                    throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
            }
        }
        function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState !== null) {
                markCommitTimeOfFallback();
                if (supportsMutation) {
                    var primaryChildParent = finishedWork.child;
                    hideOrUnhideAllChildren(primaryChildParent, true);
                }
            }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            if (!supportsHydration) {
                return;
            }
            var newState = finishedWork.memoizedState;
            if (newState === null) {
                var current = finishedWork.alternate;
                if (current !== null) {
                    var prevState = current.memoizedState;
                    if (prevState !== null) {
                        var suspenseInstance = prevState.dehydrated;
                        if (suspenseInstance !== null) {
                            commitHydratedSuspenseInstance(suspenseInstance);
                        }
                    }
                }
            }
        }
        function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
                finishedWork.updateQueue = null;
                var retryCache = finishedWork.stateNode;
                if (retryCache === null) {
                    retryCache = finishedWork.stateNode = new PossiblyWeakSet();
                }
                wakeables.forEach(function (wakeable) {
                    var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                    if (!retryCache.has(wakeable)) {
                        {
                            if (wakeable.__reactDoNotTraceInteractions !== true) {
                                retry = tracing.unstable_wrap(retry);
                            }
                        }
                        retryCache.add(wakeable);
                        wakeable.then(retry, retry);
                    }
                });
            }
        }
        function isSuspenseBoundaryBeingHidden(current, finishedWork) {
            if (current !== null) {
                var oldState = current.memoizedState;
                if (oldState === null || oldState.dehydrated !== null) {
                    var newState = finishedWork.memoizedState;
                    return newState !== null && newState.dehydrated === null;
                }
            }
            return false;
        }
        function commitResetTextContent(current) {
            if (!supportsMutation) {
                return;
            }
            resetTextContent(current.stateNode);
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === 'function' && Symbol.for) {
            var symbolFor$1 = Symbol.for;
            COMPONENT_TYPE = symbolFor$1('selector.component');
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
            ROLE_TYPE = symbolFor$1('selector.role');
            TEST_NAME_TYPE = symbolFor$1('selector.test_id');
            TEXT_TYPE = symbolFor$1('selector.text');
        }
        function createComponentSelector(component) {
            return {
                $$typeof: COMPONENT_TYPE,
                value: component
            };
        }
        function createHasPsuedoClassSelector(selectors) {
            return {
                $$typeof: HAS_PSEUDO_CLASS_TYPE,
                value: selectors
            };
        }
        function createRoleSelector(role) {
            return {
                $$typeof: ROLE_TYPE,
                value: role
            };
        }
        function createTextSelector(text) {
            return {
                $$typeof: TEXT_TYPE,
                value: text
            };
        }
        function createTestNameSelector(id) {
            return {
                $$typeof: TEST_NAME_TYPE,
                value: id
            };
        }
        function findFiberRootForHostRoot(hostRoot) {
            var maybeFiber = getInstanceFromNode(hostRoot);
            if (maybeFiber != null) {
                if (!(typeof maybeFiber.memoizedProps['data-testname'] === 'string')) {
                    {
                        throw Error("Invalid host root specified. Should be either a React container or a node with a testname attribute.");
                    }
                }
                return maybeFiber;
            }
            else {
                var fiberRoot = findFiberRoot(hostRoot);
                if (!(fiberRoot !== null)) {
                    {
                        throw Error("Could not find React container within specified host subtree.");
                    }
                }
                return fiberRoot.stateNode.current;
            }
        }
        function matchSelector(fiber, selector) {
            switch (selector.$$typeof) {
                case COMPONENT_TYPE:
                    if (fiber.type === selector.value) {
                        return true;
                    }
                    break;
                case HAS_PSEUDO_CLASS_TYPE:
                    return hasMatchingPaths(fiber, selector.value);
                case ROLE_TYPE:
                    if (fiber.tag === HostComponent) {
                        var node = fiber.stateNode;
                        if (matchAccessibilityRole(node, selector.value)) {
                            return true;
                        }
                    }
                    break;
                case TEXT_TYPE:
                    if (fiber.tag === HostComponent || fiber.tag === HostText) {
                        var textContent = getTextContent(fiber);
                        if (textContent !== null && textContent.indexOf(selector.value) >= 0) {
                            return true;
                        }
                    }
                    break;
                case TEST_NAME_TYPE:
                    if (fiber.tag === HostComponent) {
                        var dataTestID = fiber.memoizedProps['data-testname'];
                        if (typeof dataTestID === 'string' && dataTestID.toLowerCase() === selector.value.toLowerCase()) {
                            return true;
                        }
                    }
                    break;
                default:
                    {
                        {
                            throw Error("Invalid selector type " + selector + " specified.");
                        }
                    }
            }
            return false;
        }
        function selectorToString(selector) {
            switch (selector.$$typeof) {
                case COMPONENT_TYPE:
                    var displayName = getComponentName(selector.value) || 'Unknown';
                    return "<" + displayName + ">";
                case HAS_PSEUDO_CLASS_TYPE:
                    return ":has(" + (selectorToString(selector) || '') + ")";
                case ROLE_TYPE:
                    return "[role=\"" + selector.value + "\"]";
                case TEXT_TYPE:
                    return "\"" + selector.value + "\"";
                case TEST_NAME_TYPE:
                    return "[data-testname=\"" + selector.value + "\"]";
                default:
                    {
                        {
                            throw Error("Invalid selector type " + selector + " specified.");
                        }
                    }
            }
        }
        function findPaths(root, selectors) {
            var matchingFibers = [];
            var stack = [root, 0];
            var index = 0;
            while (index < stack.length) {
                var fiber = stack[index++];
                var selectorIndex = stack[index++];
                var selector = selectors[selectorIndex];
                if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {
                    continue;
                }
                else {
                    while (selector != null && matchSelector(fiber, selector)) {
                        selectorIndex++;
                        selector = selectors[selectorIndex];
                    }
                }
                if (selectorIndex === selectors.length) {
                    matchingFibers.push(fiber);
                }
                else {
                    var child = fiber.child;
                    while (child !== null) {
                        stack.push(child, selectorIndex);
                        child = child.sibling;
                    }
                }
            }
            return matchingFibers;
        }
        function hasMatchingPaths(root, selectors) {
            var stack = [root, 0];
            var index = 0;
            while (index < stack.length) {
                var fiber = stack[index++];
                var selectorIndex = stack[index++];
                var selector = selectors[selectorIndex];
                if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {
                    continue;
                }
                else {
                    while (selector != null && matchSelector(fiber, selector)) {
                        selectorIndex++;
                        selector = selectors[selectorIndex];
                    }
                }
                if (selectorIndex === selectors.length) {
                    return true;
                }
                else {
                    var child = fiber.child;
                    while (child !== null) {
                        stack.push(child, selectorIndex);
                        child = child.sibling;
                    }
                }
            }
            return false;
        }
        function findAllNodes(hostRoot, selectors) {
            if (!supportsTestSelectors) {
                {
                    {
                        throw Error("Test selector API is not supported by this renderer.");
                    }
                }
            }
            var root = findFiberRootForHostRoot(hostRoot);
            var matchingFibers = findPaths(root, selectors);
            var instanceRoots = [];
            var stack = Array.from(matchingFibers);
            var index = 0;
            while (index < stack.length) {
                var node = stack[index++];
                if (node.tag === HostComponent) {
                    if (isHiddenSubtree(node)) {
                        continue;
                    }
                    instanceRoots.push(node.stateNode);
                }
                else {
                    var child = node.child;
                    while (child !== null) {
                        stack.push(child);
                        child = child.sibling;
                    }
                }
            }
            return instanceRoots;
        }
        function getFindAllNodesFailureDescription(hostRoot, selectors) {
            if (!supportsTestSelectors) {
                {
                    {
                        throw Error("Test selector API is not supported by this renderer.");
                    }
                }
            }
            var root = findFiberRootForHostRoot(hostRoot);
            var maxSelectorIndex = 0;
            var matchedNames = [];
            var stack = [root, 0];
            var index = 0;
            while (index < stack.length) {
                var fiber = stack[index++];
                var selectorIndex = stack[index++];
                var selector = selectors[selectorIndex];
                if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {
                    continue;
                }
                else if (matchSelector(fiber, selector)) {
                    matchedNames.push(selectorToString(selector));
                    selectorIndex++;
                    if (selectorIndex > maxSelectorIndex) {
                        maxSelectorIndex = selectorIndex;
                    }
                }
                if (selectorIndex < selectors.length) {
                    var child = fiber.child;
                    while (child !== null) {
                        stack.push(child, selectorIndex);
                        child = child.sibling;
                    }
                }
            }
            if (maxSelectorIndex < selectors.length) {
                var unmatchedNames = [];
                for (var i = maxSelectorIndex; i < selectors.length; i++) {
                    unmatchedNames.push(selectorToString(selectors[i]));
                }
                return 'findAllNodes was able to match part of the selector:\n' + ("  " + matchedNames.join(' > ') + "\n\n") + 'No matching component was found for:\n' + ("  " + unmatchedNames.join(' > '));
            }
            return null;
        }
        function findBoundingRects(hostRoot, selectors) {
            if (!supportsTestSelectors) {
                {
                    {
                        throw Error("Test selector API is not supported by this renderer.");
                    }
                }
            }
            var instanceRoots = findAllNodes(hostRoot, selectors);
            var boundingRects = [];
            for (var i = 0; i < instanceRoots.length; i++) {
                boundingRects.push(getBoundingRect(instanceRoots[i]));
            }
            for (var _i = boundingRects.length - 1; _i > 0; _i--) {
                var targetRect = boundingRects[_i];
                var targetLeft = targetRect.x;
                var targetRight = targetLeft + targetRect.width;
                var targetTop = targetRect.y;
                var targetBottom = targetTop + targetRect.height;
                for (var j = _i - 1; j >= 0; j--) {
                    if (_i !== j) {
                        var otherRect = boundingRects[j];
                        var otherLeft = otherRect.x;
                        var otherRight = otherLeft + otherRect.width;
                        var otherTop = otherRect.y;
                        var otherBottom = otherTop + otherRect.height;
                        if (targetLeft >= otherLeft && targetTop >= otherTop && targetRight <= otherRight && targetBottom <= otherBottom) {
                            boundingRects.splice(_i, 1);
                            break;
                        }
                        else if (targetLeft === otherLeft && targetRect.width === otherRect.width && !(otherBottom < targetTop) && !(otherTop > targetBottom)) {
                            if (otherTop > targetTop) {
                                otherRect.height += otherTop - targetTop;
                                otherRect.y = targetTop;
                            }
                            if (otherBottom < targetBottom) {
                                otherRect.height = targetBottom - otherTop;
                            }
                            boundingRects.splice(_i, 1);
                            break;
                        }
                        else if (targetTop === otherTop && targetRect.height === otherRect.height && !(otherRight < targetLeft) && !(otherLeft > targetRight)) {
                            if (otherLeft > targetLeft) {
                                otherRect.width += otherLeft - targetLeft;
                                otherRect.x = targetLeft;
                            }
                            if (otherRight < targetRight) {
                                otherRect.width = targetRight - otherLeft;
                            }
                            boundingRects.splice(_i, 1);
                            break;
                        }
                    }
                }
            }
            return boundingRects;
        }
        function focusWithin(hostRoot, selectors) {
            if (!supportsTestSelectors) {
                {
                    {
                        throw Error("Test selector API is not supported by this renderer.");
                    }
                }
            }
            var root = findFiberRootForHostRoot(hostRoot);
            var matchingFibers = findPaths(root, selectors);
            var stack = Array.from(matchingFibers);
            var index = 0;
            while (index < stack.length) {
                var fiber = stack[index++];
                if (isHiddenSubtree(fiber)) {
                    continue;
                }
                if (fiber.tag === HostComponent) {
                    var node = fiber.stateNode;
                    if (setFocusIfFocusable(node)) {
                        return true;
                    }
                }
                var child = fiber.child;
                while (child !== null) {
                    stack.push(child);
                    child = child.sibling;
                }
            }
            return false;
        }
        var commitHooks = [];
        function onCommitRoot$1() {
            if (supportsTestSelectors) {
                commitHooks.forEach(function (commitHook) {
                    return commitHook();
                });
            }
        }
        function observeVisibleRects(hostRoot, selectors, callback, options) {
            if (!supportsTestSelectors) {
                {
                    {
                        throw Error("Test selector API is not supported by this renderer.");
                    }
                }
            }
            var instanceRoots = findAllNodes(hostRoot, selectors);
            var _setupIntersectionObs = setupIntersectionObserver(instanceRoots, callback, options), disconnect = _setupIntersectionObs.disconnect, observe = _setupIntersectionObs.observe, unobserve = _setupIntersectionObs.unobserve;
            var commitHook = function () {
                var nextInstanceRoots = findAllNodes(hostRoot, selectors);
                instanceRoots.forEach(function (target) {
                    if (nextInstanceRoots.indexOf(target) < 0) {
                        unobserve(target);
                    }
                });
                nextInstanceRoots.forEach(function (target) {
                    if (instanceRoots.indexOf(target) < 0) {
                        observe(target);
                    }
                });
            };
            commitHooks.push(commitHook);
            return {
                disconnect: function () {
                    var index = commitHooks.indexOf(commitHook);
                    if (index >= 0) {
                        commitHooks.splice(index, 1);
                    }
                    disconnect();
                }
            };
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
                try {
                    var requireString = ('require' + Math.random()).slice(0, 7);
                    var nodeRequire = module && module[requireString];
                    enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
                }
                catch (_err) {
                    enqueueTaskImpl = function (callback) {
                        {
                            if (didWarnAboutMessageChannel === false) {
                                didWarnAboutMessageChannel = true;
                                if (typeof MessageChannel === 'undefined') {
                                    error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');
                                }
                            }
                        }
                        var channel = new MessageChannel();
                        channel.port1.onmessage = callback;
                        channel.port2.postMessage(undefined);
                    };
                }
            }
            return enqueueTaskImpl(task);
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
        var NoContext = 0;
        var BatchedContext = 1;
        var EventContext = 2;
        var DiscreteEventContext = 4;
        var LegacyUnbatchedContext = 8;
        var RenderContext = 16;
        var CommitContext = 32;
        var RetryAfterError = 64;
        var RootIncomplete = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootIncomplete;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var mostRecentlyUpdatedRoot = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
        }
        var nextEffect = null;
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsRenderPriority = NoPriority$1;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveHookEffectsMount = [];
        var pendingPassiveHookEffectsUnmount = [];
        var rootsWithPendingDiscreteUpdates = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var spawnedWorkDuringRender = null;
        var currentEventTime = NoTimestamp;
        var currentEventWipLanes = NoLanes;
        var currentEventPendingLanes = NoLanes;
        var isFlushingPassiveEffects = false;
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function getWorkInProgressRoot() {
            return workInProgressRoot;
        }
        function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                return now$1();
            }
            if (currentEventTime !== NoTimestamp) {
                return currentEventTime;
            }
            currentEventTime = now$1();
            return currentEventTime;
        }
        function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
                return SyncLane;
            }
            else if ((mode & ConcurrentMode) === NoMode) {
                return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
                currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
                if (currentEventPendingLanes !== NoLanes) {
                    currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
                }
                return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
            }
            var schedulerPriority = getCurrentPriorityLevel();
            var lane;
            if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$1) {
                lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
            }
            else {
                var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
                lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
            }
            return lane;
        }
        function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
                return SyncLane;
            }
            else if ((mode & ConcurrentMode) === NoMode) {
                return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
                currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            return findRetryLane(currentEventWipLanes);
        }
        function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root === null) {
                warnAboutUpdateOnUnmountedFiberInDEV(fiber);
                return null;
            }
            markRootUpdated(root, lane, eventTime);
            if (root === workInProgressRoot) {
                {
                    workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                    markRootSuspended$1(root, workInProgressRootRenderLanes);
                }
            }
            var priorityLevel = getCurrentPriorityLevel();
            if (lane === SyncLane) {
                if ((executionContext & LegacyUnbatchedContext) !== NoContext &&
                    (executionContext & (RenderContext | CommitContext)) === NoContext) {
                    schedulePendingInteractions(root, lane);
                    performSyncWorkOnRoot(root);
                }
                else {
                    ensureRootIsScheduled(root, eventTime);
                    schedulePendingInteractions(root, lane);
                    if (executionContext === NoContext) {
                        resetRenderTimer();
                        flushSyncCallbackQueue();
                    }
                }
            }
            else {
                if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority$1)) {
                    if (rootsWithPendingDiscreteUpdates === null) {
                        rootsWithPendingDiscreteUpdates = new Set([root]);
                    }
                    else {
                        rootsWithPendingDiscreteUpdates.add(root);
                    }
                }
                ensureRootIsScheduled(root, eventTime);
                schedulePendingInteractions(root, lane);
            }
            mostRecentlyUpdatedRoot = root;
        }
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
                alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
                if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
                parent.childLanes = mergeLanes(parent.childLanes, lane);
                alternate = parent.alternate;
                if (alternate !== null) {
                    alternate.childLanes = mergeLanes(alternate.childLanes, lane);
                }
                else {
                    {
                        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                        }
                    }
                }
                node = parent;
                parent = parent.return;
            }
            if (node.tag === HostRoot) {
                var root = node.stateNode;
                return root;
            }
            else {
                return null;
            }
        }
        function ensureRootIsScheduled(root, currentTime) {
            var existingCallbackNode = root.callbackNode;
            markStarvedLanesAsExpired(root, currentTime);
            var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            var newCallbackPriority = returnNextLanesPriority();
            if (nextLanes === NoLanes) {
                if (existingCallbackNode !== null) {
                    cancelCallback(existingCallbackNode);
                    root.callbackNode = null;
                    root.callbackPriority = NoLanePriority;
                }
                return;
            }
            if (existingCallbackNode !== null) {
                var existingCallbackPriority = root.callbackPriority;
                if (existingCallbackPriority === newCallbackPriority) {
                    return;
                }
                cancelCallback(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLanePriority) {
                newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
            }
            else if (newCallbackPriority === SyncBatchedLanePriority) {
                newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
            }
            else {
                var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
                newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
            }
            root.callbackPriority = newCallbackPriority;
            root.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root) {
            currentEventTime = NoTimestamp;
            currentEventWipLanes = NoLanes;
            currentEventPendingLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                {
                    throw Error("Should not already be working.");
                }
            }
            var originalCallbackNode = root.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
                if (root.callbackNode !== originalCallbackNode) {
                    return null;
                }
            }
            var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
                return null;
            }
            var exitStatus = renderRootConcurrent(root, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                prepareFreshStack(root, NoLanes);
            }
            else if (exitStatus !== RootIncomplete) {
                if (exitStatus === RootErrored) {
                    executionContext |= RetryAfterError;
                    if (root.hydrate) {
                        root.hydrate = false;
                        clearContainer(root.containerInfo);
                    }
                    lanes = getLanesToRetrySynchronouslyOnError(root);
                    if (lanes !== NoLanes) {
                        exitStatus = renderRootSync(root, lanes);
                    }
                }
                if (exitStatus === RootFatalErrored) {
                    var fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root, NoLanes);
                    markRootSuspended$1(root, lanes);
                    ensureRootIsScheduled(root, now$1());
                    throw fatalError;
                }
                var finishedWork = root.current.alternate;
                root.finishedWork = finishedWork;
                root.finishedLanes = lanes;
                finishConcurrentRender(root, exitStatus, lanes);
            }
            ensureRootIsScheduled(root, now$1());
            if (root.callbackNode === originalCallbackNode) {
                return performConcurrentWorkOnRoot.bind(null, root);
            }
            return null;
        }
        function finishConcurrentRender(root, exitStatus, lanes) {
            switch (exitStatus) {
                case RootIncomplete:
                case RootFatalErrored:
                    {
                        {
                            {
                                throw Error("Root did not complete. This is a bug in React.");
                            }
                        }
                    }
                case RootErrored:
                    {
                        commitRoot(root);
                        break;
                    }
                case RootSuspended:
                    {
                        markRootSuspended$1(root, lanes);
                        if (includesOnlyRetries(lanes) &&
                            !shouldForceFlushFallbacksInDEV()) {
                            var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1();
                            if (msUntilTimeout > 10) {
                                var nextLanes = getNextLanes(root, NoLanes);
                                if (nextLanes !== NoLanes) {
                                    break;
                                }
                                var suspendedLanes = root.suspendedLanes;
                                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                                    var eventTime = requestEventTime();
                                    markRootPinged(root, suspendedLanes);
                                    break;
                                }
                                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                                break;
                            }
                        }
                        commitRoot(root);
                        break;
                    }
                case RootSuspendedWithDelay:
                    {
                        markRootSuspended$1(root, lanes);
                        if (includesOnlyTransitions(lanes)) {
                            break;
                        }
                        if (!shouldForceFlushFallbacksInDEV()) {
                            var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                            var eventTimeMs = mostRecentEventTime;
                            var timeElapsedMs = now$1() - eventTimeMs;
                            var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                            if (_msUntilTimeout > 10) {
                                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                                break;
                            }
                        }
                        commitRoot(root);
                        break;
                    }
                case RootCompleted:
                    {
                        commitRoot(root);
                        break;
                    }
                default:
                    {
                        {
                            {
                                throw Error("Unknown root exit status.");
                            }
                        }
                    }
            }
        }
        function markRootSuspended$1(root, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
            markRootSuspended(root, suspendedLanes);
        }
        function performSyncWorkOnRoot(root) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                {
                    throw Error("Should not already be working.");
                }
            }
            flushPassiveEffects();
            var lanes;
            var exitStatus;
            if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
                lanes = workInProgressRootRenderLanes;
                exitStatus = renderRootSync(root, lanes);
                if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                    lanes = getNextLanes(root, lanes);
                    exitStatus = renderRootSync(root, lanes);
                }
            }
            else {
                lanes = getNextLanes(root, NoLanes);
                exitStatus = renderRootSync(root, lanes);
            }
            if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
                executionContext |= RetryAfterError;
                if (root.hydrate) {
                    root.hydrate = false;
                    clearContainer(root.containerInfo);
                }
                lanes = getLanesToRetrySynchronouslyOnError(root);
                if (lanes !== NoLanes) {
                    exitStatus = renderRootSync(root, lanes);
                }
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root, NoLanes);
                markRootSuspended$1(root, lanes);
                ensureRootIsScheduled(root, now$1());
                throw fatalError;
            }
            var finishedWork = root.current.alternate;
            root.finishedWork = finishedWork;
            root.finishedLanes = lanes;
            commitRoot(root);
            ensureRootIsScheduled(root, now$1());
            return null;
        }
        function flushRoot(root, lanes) {
            markRootExpired(root, lanes);
            ensureRootIsScheduled(root, now$1());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
        function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
                {
                    if ((executionContext & RenderContext) !== NoContext) {
                        error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
                    }
                }
                return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
        }
        function deferredUpdates(fn) {
            {
                return runWithPriority(NormalPriority$1, fn);
            }
        }
        function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
                var roots = rootsWithPendingDiscreteUpdates;
                rootsWithPendingDiscreteUpdates = null;
                roots.forEach(function (root) {
                    markDiscreteUpdatesExpired(root);
                    ensureRootIsScheduled(root, now$1());
                });
            }
            flushSyncCallbackQueue();
        }
        function batchedUpdates(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
                return fn(a);
            }
            finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                    resetRenderTimer();
                    flushSyncCallbackQueue();
                }
            }
        }
        function batchedEventUpdates(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
                return fn(a);
            }
            finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                    resetRenderTimer();
                    flushSyncCallbackQueue();
                }
            }
        }
        function discreteUpdates(fn, a, b, c, d) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            {
                try {
                    return runWithPriority(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
                }
                finally {
                    executionContext = prevExecutionContext;
                    if (executionContext === NoContext) {
                        resetRenderTimer();
                        flushSyncCallbackQueue();
                    }
                }
            }
        }
        function unbatchedUpdates(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
                return fn(a);
            }
            finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                    resetRenderTimer();
                    flushSyncCallbackQueue();
                }
            }
        }
        function flushSync(fn, a) {
            var prevExecutionContext = executionContext;
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
                {
                    error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
                }
                return fn(a);
            }
            executionContext |= BatchedContext;
            {
                try {
                    if (fn) {
                        return runWithPriority(ImmediatePriority$1, fn.bind(null, a));
                    }
                    else {
                        return undefined;
                    }
                }
                finally {
                    executionContext = prevExecutionContext;
                    flushSyncCallbackQueue();
                }
            }
        }
        function flushControlled(fn) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            {
                try {
                    runWithPriority(ImmediatePriority$1, fn);
                }
                finally {
                    executionContext = prevExecutionContext;
                    if (executionContext === NoContext) {
                        resetRenderTimer();
                        flushSyncCallbackQueue();
                    }
                }
            }
        }
        function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root, lanes) {
            root.finishedWork = null;
            root.finishedLanes = NoLanes;
            var timeoutHandle = root.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
                root.timeoutHandle = noTimeout;
                cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
                var interruptedWork = workInProgress.return;
                while (interruptedWork !== null) {
                    unwindInterruptedWork(interruptedWork);
                    interruptedWork = interruptedWork.return;
                }
            }
            workInProgressRoot = root;
            workInProgress = createWorkInProgress(root.current, null);
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            {
                spawnedWorkDuringRender = null;
            }
            {
                ReactStrictModeWarnings.discardPendingWarnings();
            }
        }
        function handleError(root, thrownValue) {
            do {
                var erroredWork = workInProgress;
                try {
                    resetContextDependencies();
                    resetHooksAfterThrow();
                    resetCurrentFiber();
                    ReactCurrentOwner$2.current = null;
                    if (erroredWork === null || erroredWork.return === null) {
                        workInProgressRootExitStatus = RootFatalErrored;
                        workInProgressRootFatalError = thrownValue;
                        workInProgress = null;
                        return;
                    }
                    if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                    }
                    throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                    completeUnitOfWork(erroredWork);
                }
                catch (yetAnotherThrownValue) {
                    thrownValue = yetAnotherThrownValue;
                    if (workInProgress === erroredWork && erroredWork !== null) {
                        erroredWork = erroredWork.return;
                        workInProgress = erroredWork;
                    }
                    else {
                        erroredWork = workInProgress;
                    }
                    continue;
                }
                return;
            } while (true);
        }
        function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
                return ContextOnlyDispatcher;
            }
            else {
                return prevDispatcher;
            }
        }
        function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function pushInteractions(root) {
            {
                var prevInteractions = tracing.__interactionsRef.current;
                tracing.__interactionsRef.current = root.memoizedInteractions;
                return prevInteractions;
            }
        }
        function popInteractions(prevInteractions) {
            {
                tracing.__interactionsRef.current = prevInteractions;
            }
        }
        function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now$1();
        }
        function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
                workInProgressRootExitStatus = RootSuspended;
            }
        }
        function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
                workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
                markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
        }
        function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
                workInProgressRootExitStatus = RootErrored;
            }
        }
        function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
        }
        function renderRootSync(root, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
                prepareFreshStack(root, lanes);
                startWorkOnPendingInteractions(root, lanes);
            }
            var prevInteractions = pushInteractions(root);
            do {
                try {
                    workLoopSync();
                    break;
                }
                catch (thrownValue) {
                    handleError(root, thrownValue);
                }
            } while (true);
            resetContextDependencies();
            {
                popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
                {
                    {
                        throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                    }
                }
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
        }
        function workLoopSync() {
            while (workInProgress !== null) {
                performUnitOfWork(workInProgress);
            }
        }
        function renderRootConcurrent(root, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
                resetRenderTimer();
                prepareFreshStack(root, lanes);
                startWorkOnPendingInteractions(root, lanes);
            }
            var prevInteractions = pushInteractions(root);
            do {
                try {
                    workLoopConcurrent();
                    break;
                }
                catch (thrownValue) {
                    handleError(root, thrownValue);
                }
            } while (true);
            resetContextDependencies();
            {
                popInteractions(prevInteractions);
            }
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
                return RootIncomplete;
            }
            else {
                workInProgressRoot = null;
                workInProgressRootRenderLanes = NoLanes;
                return workInProgressRootExitStatus;
            }
        }
        function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
                performUnitOfWork(workInProgress);
            }
        }
        function performUnitOfWork(unitOfWork) {
            var current = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
                startProfilerTimer(unitOfWork);
                next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            }
            else {
                next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
                completeUnitOfWork(unitOfWork);
            }
            else {
                workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
                var current = completedWork.alternate;
                var returnFiber = completedWork.return;
                if ((completedWork.flags & Incomplete) === NoFlags) {
                    setCurrentFiber(completedWork);
                    var next = void 0;
                    if ((completedWork.mode & ProfileMode) === NoMode) {
                        next = completeWork(current, completedWork, subtreeRenderLanes);
                    }
                    else {
                        startProfilerTimer(completedWork);
                        next = completeWork(current, completedWork, subtreeRenderLanes);
                        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                    }
                    resetCurrentFiber();
                    if (next !== null) {
                        workInProgress = next;
                        return;
                    }
                    resetChildLanes(completedWork);
                    if (returnFiber !== null &&
                        (returnFiber.flags & Incomplete) === NoFlags) {
                        if (returnFiber.firstEffect === null) {
                            returnFiber.firstEffect = completedWork.firstEffect;
                        }
                        if (completedWork.lastEffect !== null) {
                            if (returnFiber.lastEffect !== null) {
                                returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                            }
                            returnFiber.lastEffect = completedWork.lastEffect;
                        }
                        var flags = completedWork.flags;
                        if (flags > PerformedWork) {
                            if (returnFiber.lastEffect !== null) {
                                returnFiber.lastEffect.nextEffect = completedWork;
                            }
                            else {
                                returnFiber.firstEffect = completedWork;
                            }
                            returnFiber.lastEffect = completedWork;
                        }
                    }
                }
                else {
                    var _next = unwindWork(completedWork);
                    if (_next !== null) {
                        _next.flags &= HostEffectMask;
                        workInProgress = _next;
                        return;
                    }
                    if ((completedWork.mode & ProfileMode) !== NoMode) {
                        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                        var actualDuration = completedWork.actualDuration;
                        var child = completedWork.child;
                        while (child !== null) {
                            actualDuration += child.actualDuration;
                            child = child.sibling;
                        }
                        completedWork.actualDuration = actualDuration;
                    }
                    if (returnFiber !== null) {
                        returnFiber.firstEffect = returnFiber.lastEffect = null;
                        returnFiber.flags |= Incomplete;
                    }
                }
                var siblingFiber = completedWork.sibling;
                if (siblingFiber !== null) {
                    workInProgress = siblingFiber;
                    return;
                }
                completedWork = returnFiber;
                workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
                workInProgressRootExitStatus = RootCompleted;
            }
        }
        function resetChildLanes(completedWork) {
            if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
                return;
            }
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
                var child = completedWork.child;
                while (child !== null) {
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                    if (shouldBubbleActualDurations) {
                        actualDuration += child.actualDuration;
                    }
                    treeBaseDuration += child.treeBaseDuration;
                    child = child.sibling;
                }
                var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
                if (isTimedOutSuspense) {
                    var primaryChildFragment = completedWork.child;
                    if (primaryChildFragment !== null) {
                        treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
            }
            else {
                var _child = completedWork.child;
                while (_child !== null) {
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                    _child = _child.sibling;
                }
            }
            completedWork.childLanes = newChildLanes;
        }
        function commitRoot(root) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
            return null;
        }
        function commitRootImpl(root, renderPriorityLevel) {
            do {
                flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                {
                    throw Error("Should not already be working.");
                }
            }
            var finishedWork = root.finishedWork;
            var lanes = root.finishedLanes;
            if (finishedWork === null) {
                return null;
            }
            root.finishedWork = null;
            root.finishedLanes = NoLanes;
            if (!(finishedWork !== root.current)) {
                {
                    throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
                }
            }
            root.callbackNode = null;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root, remainingLanes);
            if (rootsWithPendingDiscreteUpdates !== null) {
                if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) {
                    rootsWithPendingDiscreteUpdates.delete(root);
                }
            }
            if (root === workInProgressRoot) {
                workInProgressRoot = null;
                workInProgress = null;
                workInProgressRootRenderLanes = NoLanes;
            }
            var firstEffect;
            if (finishedWork.flags > PerformedWork) {
                if (finishedWork.lastEffect !== null) {
                    finishedWork.lastEffect.nextEffect = finishedWork;
                    firstEffect = finishedWork.firstEffect;
                }
                else {
                    firstEffect = finishedWork;
                }
            }
            else {
                firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
                var prevExecutionContext = executionContext;
                executionContext |= CommitContext;
                var prevInteractions = pushInteractions(root);
                ReactCurrentOwner$2.current = null;
                focusedInstanceHandle = prepareForCommit(root.containerInfo);
                shouldFireAfterActiveInstanceBlur = false;
                nextEffect = firstEffect;
                do {
                    {
                        invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                        if (hasCaughtError()) {
                            if (!(nextEffect !== null)) {
                                {
                                    throw Error("Should be working on an effect.");
                                }
                            }
                            var error = clearCaughtError();
                            captureCommitPhaseError(nextEffect, error);
                            nextEffect = nextEffect.nextEffect;
                        }
                    }
                } while (nextEffect !== null);
                focusedInstanceHandle = null;
                {
                    recordCommitTime();
                }
                nextEffect = firstEffect;
                do {
                    {
                        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);
                        if (hasCaughtError()) {
                            if (!(nextEffect !== null)) {
                                {
                                    throw Error("Should be working on an effect.");
                                }
                            }
                            var _error = clearCaughtError();
                            captureCommitPhaseError(nextEffect, _error);
                            nextEffect = nextEffect.nextEffect;
                        }
                    }
                } while (nextEffect !== null);
                if (shouldFireAfterActiveInstanceBlur) {
                    afterActiveInstanceBlur();
                }
                resetAfterCommit(root.containerInfo);
                root.current = finishedWork;
                nextEffect = firstEffect;
                do {
                    {
                        invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);
                        if (hasCaughtError()) {
                            if (!(nextEffect !== null)) {
                                {
                                    throw Error("Should be working on an effect.");
                                }
                            }
                            var _error2 = clearCaughtError();
                            captureCommitPhaseError(nextEffect, _error2);
                            nextEffect = nextEffect.nextEffect;
                        }
                    }
                } while (nextEffect !== null);
                nextEffect = null;
                requestPaint();
                {
                    popInteractions(prevInteractions);
                }
                executionContext = prevExecutionContext;
            }
            else {
                root.current = finishedWork;
                {
                    recordCommitTime();
                }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = false;
                rootWithPendingPassiveEffects = root;
                pendingPassiveEffectsLanes = lanes;
                pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            }
            else {
                nextEffect = firstEffect;
                while (nextEffect !== null) {
                    var nextNextEffect = nextEffect.nextEffect;
                    nextEffect.nextEffect = null;
                    if (nextEffect.flags & Deletion) {
                        detachFiberAfterEffects(nextEffect);
                    }
                    nextEffect = nextNextEffect;
                }
            }
            remainingLanes = root.pendingLanes;
            if (remainingLanes !== NoLanes) {
                {
                    if (spawnedWorkDuringRender !== null) {
                        var expirationTimes = spawnedWorkDuringRender;
                        spawnedWorkDuringRender = null;
                        for (var i = 0; i < expirationTimes.length; i++) {
                            scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
                        }
                    }
                    schedulePendingInteractions(root, remainingLanes);
                }
            }
            else {
                legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
                if (!rootDidHavePassiveEffects) {
                    finishPendingInteractions(root, lanes);
                }
            }
            if (remainingLanes === SyncLane) {
                if (root === rootWithNestedUpdates) {
                    nestedUpdateCount++;
                }
                else {
                    nestedUpdateCount = 0;
                    rootWithNestedUpdates = root;
                }
            }
            else {
                nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
                onCommitRoot$1();
            }
            ensureRootIsScheduled(root, now$1());
            if (hasUncaughtError) {
                hasUncaughtError = false;
                var _error3 = firstUncaughtError;
                firstUncaughtError = null;
                throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
                return null;
            }
            flushSyncCallbackQueue();
            return null;
        }
        function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
                var current = nextEffect.alternate;
                if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                    if ((nextEffect.flags & Deletion) !== NoFlags) {
                        if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                            shouldFireAfterActiveInstanceBlur = true;
                            beforeActiveInstanceBlur();
                        }
                    }
                    else {
                        if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                            shouldFireAfterActiveInstanceBlur = true;
                            beforeActiveInstanceBlur();
                        }
                    }
                }
                var flags = nextEffect.flags;
                if ((flags & Snapshot) !== NoFlags) {
                    setCurrentFiber(nextEffect);
                    commitBeforeMutationLifeCycles(current, nextEffect);
                    resetCurrentFiber();
                }
                if ((flags & Passive) !== NoFlags) {
                    if (!rootDoesHavePassiveEffects) {
                        rootDoesHavePassiveEffects = true;
                        scheduleCallback(NormalPriority$1, function () {
                            flushPassiveEffects();
                            return null;
                        });
                    }
                }
                nextEffect = nextEffect.nextEffect;
            }
        }
        function commitMutationEffects(root, renderPriorityLevel) {
            while (nextEffect !== null) {
                setCurrentFiber(nextEffect);
                var flags = nextEffect.flags;
                if (flags & ContentReset) {
                    commitResetTextContent(nextEffect);
                }
                if (flags & Ref) {
                    var current = nextEffect.alternate;
                    if (current !== null) {
                        commitDetachRef(current);
                    }
                }
                var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
                switch (primaryFlags) {
                    case Placement:
                        {
                            commitPlacement(nextEffect);
                            nextEffect.flags &= ~Placement;
                            break;
                        }
                    case PlacementAndUpdate:
                        {
                            commitPlacement(nextEffect);
                            nextEffect.flags &= ~Placement;
                            var _current = nextEffect.alternate;
                            commitWork(_current, nextEffect);
                            break;
                        }
                    case Hydrating:
                        {
                            nextEffect.flags &= ~Hydrating;
                            break;
                        }
                    case HydratingAndUpdate:
                        {
                            nextEffect.flags &= ~Hydrating;
                            var _current2 = nextEffect.alternate;
                            commitWork(_current2, nextEffect);
                            break;
                        }
                    case Update:
                        {
                            var _current3 = nextEffect.alternate;
                            commitWork(_current3, nextEffect);
                            break;
                        }
                    case Deletion:
                        {
                            commitDeletion(root, nextEffect);
                            break;
                        }
                }
                resetCurrentFiber();
                nextEffect = nextEffect.nextEffect;
            }
        }
        function commitLayoutEffects(root, committedLanes) {
            while (nextEffect !== null) {
                setCurrentFiber(nextEffect);
                var flags = nextEffect.flags;
                if (flags & (Update | Callback)) {
                    var current = nextEffect.alternate;
                    commitLifeCycles(root, current, nextEffect);
                }
                {
                    if (flags & Ref) {
                        commitAttachRef(nextEffect);
                    }
                }
                resetCurrentFiber();
                nextEffect = nextEffect.nextEffect;
            }
        }
        function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
                var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
                pendingPassiveEffectsRenderPriority = NoPriority$1;
                {
                    return runWithPriority(priorityLevel, flushPassiveEffectsImpl);
                }
            }
            return false;
        }
        function enqueuePendingPassiveHookEffectMount(fiber, effect) {
            pendingPassiveHookEffectsMount.push(effect, fiber);
            if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority$1, function () {
                    flushPassiveEffects();
                    return null;
                });
            }
        }
        function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
            pendingPassiveHookEffectsUnmount.push(effect, fiber);
            {
                fiber.flags |= PassiveUnmountPendingDev;
                var alternate = fiber.alternate;
                if (alternate !== null) {
                    alternate.flags |= PassiveUnmountPendingDev;
                }
            }
            if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority$1, function () {
                    flushPassiveEffects();
                    return null;
                });
            }
        }
        function invokePassiveEffectCreate(effect) {
            var create = effect.create;
            effect.destroy = create();
        }
        function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
                return false;
            }
            var root = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                {
                    throw Error("Cannot flush passive effects while already rendering.");
                }
            }
            {
                isFlushingPassiveEffects = true;
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root);
            var unmountEffects = pendingPassiveHookEffectsUnmount;
            pendingPassiveHookEffectsUnmount = [];
            for (var i = 0; i < unmountEffects.length; i += 2) {
                var _effect = unmountEffects[i];
                var fiber = unmountEffects[i + 1];
                var destroy = _effect.destroy;
                _effect.destroy = undefined;
                {
                    fiber.flags &= ~PassiveUnmountPendingDev;
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                        alternate.flags &= ~PassiveUnmountPendingDev;
                    }
                }
                if (typeof destroy === 'function') {
                    {
                        setCurrentFiber(fiber);
                        {
                            invokeGuardedCallback(null, destroy, null);
                        }
                        if (hasCaughtError()) {
                            if (!(fiber !== null)) {
                                {
                                    throw Error("Should be working on an effect.");
                                }
                            }
                            var error = clearCaughtError();
                            captureCommitPhaseError(fiber, error);
                        }
                        resetCurrentFiber();
                    }
                }
            }
            var mountEffects = pendingPassiveHookEffectsMount;
            pendingPassiveHookEffectsMount = [];
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
                var _effect2 = mountEffects[_i];
                var _fiber = mountEffects[_i + 1];
                {
                    setCurrentFiber(_fiber);
                    {
                        invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                    }
                    if (hasCaughtError()) {
                        if (!(_fiber !== null)) {
                            {
                                throw Error("Should be working on an effect.");
                            }
                        }
                        var _error4 = clearCaughtError();
                        captureCommitPhaseError(_fiber, _error4);
                    }
                    resetCurrentFiber();
                }
            }
            var effect = root.current.firstEffect;
            while (effect !== null) {
                var nextNextEffect = effect.nextEffect;
                effect.nextEffect = null;
                if (effect.flags & Deletion) {
                    detachFiberAfterEffects(effect);
                }
                effect = nextNextEffect;
            }
            {
                popInteractions(prevInteractions);
                finishPendingInteractions(root, lanes);
            }
            {
                isFlushingPassiveEffects = false;
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
                legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
            }
            else {
                legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
        }
        function prepareToThrowUncaughtError(error) {
            if (!hasUncaughtError) {
                hasUncaughtError = true;
                firstUncaughtError = error;
            }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
            var errorInfo = createCapturedValue(error, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update);
            var eventTime = requestEventTime();
            var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root !== null) {
                markRootUpdated(root, SyncLane, eventTime);
                ensureRootIsScheduled(root, eventTime);
                schedulePendingInteractions(root, SyncLane);
            }
        }
        function captureCommitPhaseError(sourceFiber, error) {
            if (sourceFiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
                return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
                if (fiber.tag === HostRoot) {
                    captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
                    return;
                }
                else if (fiber.tag === ClassComponent) {
                    var ctor = fiber.type;
                    var instance = fiber.stateNode;
                    if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                        var errorInfo = createCapturedValue(error, sourceFiber);
                        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                        enqueueUpdate(fiber, update);
                        var eventTime = requestEventTime();
                        var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                        if (root !== null) {
                            markRootUpdated(root, SyncLane, eventTime);
                            ensureRootIsScheduled(root, eventTime);
                            schedulePendingInteractions(root, SyncLane);
                        }
                        else {
                            if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                                try {
                                    instance.componentDidCatch(error, errorInfo);
                                }
                                catch (errorToIgnore) {
                                }
                            }
                        }
                        return;
                    }
                }
                fiber = fiber.return;
            }
        }
        function pingSuspendedRoot(root, wakeable, pingedLanes) {
            var pingCache = root.pingCache;
            if (pingCache !== null) {
                pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root, pingedLanes);
            if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
                if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                    prepareFreshStack(root, NoLanes);
                }
                else {
                    workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
                }
            }
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, pingedLanes);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
                retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root !== null) {
                markRootUpdated(root, retryLane, eventTime);
                ensureRootIsScheduled(root, eventTime);
                schedulePendingInteractions(root, retryLane);
            }
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
                retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
                retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = null;
                {
                    {
                        throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                    }
                }
            }
            {
                if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                    nestedPassiveUpdateCount = 0;
                    error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
                }
            }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
            {
                ReactStrictModeWarnings.flushLegacyContextWarning();
                {
                    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
                }
            }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
                if ((executionContext & RenderContext) !== NoContext) {
                    return;
                }
                if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                    return;
                }
                var tag = fiber.tag;
                if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                    return;
                }
                var componentName = getComponentName(fiber.type) || 'ReactComponent';
                if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                    if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                        return;
                    }
                    didWarnStateUpdateForNotYetMountedComponent.add(componentName);
                }
                else {
                    didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
                }
                var previousFiber = current;
                try {
                    setCurrentFiber(fiber);
                    error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
                }
                finally {
                    if (previousFiber) {
                        setCurrentFiber(fiber);
                    }
                    else {
                        resetCurrentFiber();
                    }
                }
            }
        }
        var didWarnStateUpdateForUnmountedComponent = null;
        function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
                var tag = fiber.tag;
                if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                    return;
                }
                if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                    return;
                }
                var componentName = getComponentName(fiber.type) || 'ReactComponent';
                if (didWarnStateUpdateForUnmountedComponent !== null) {
                    if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                        return;
                    }
                    didWarnStateUpdateForUnmountedComponent.add(componentName);
                }
                else {
                    didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
                }
                if (isFlushingPassiveEffects)
                    ;
                else {
                    var previousFiber = current;
                    try {
                        setCurrentFiber(fiber);
                        error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
                    }
                    finally {
                        if (previousFiber) {
                            setCurrentFiber(fiber);
                        }
                        else {
                            resetCurrentFiber();
                        }
                    }
                }
            }
        }
        var beginWork$1;
        {
            var dummyFiber = null;
            beginWork$1 = function (current, unitOfWork, lanes) {
                var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
                try {
                    return beginWork(current, unitOfWork, lanes);
                }
                catch (originalError) {
                    if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
                        throw originalError;
                    }
                    resetContextDependencies();
                    resetHooksAfterThrow();
                    unwindInterruptedWork(unitOfWork);
                    assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                    if (unitOfWork.mode & ProfileMode) {
                        startProfilerTimer(unitOfWork);
                    }
                    invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);
                    if (hasCaughtError()) {
                        var replayError = clearCaughtError();
                        throw replayError;
                    }
                    else {
                        throw originalError;
                    }
                }
            };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
            didWarnAboutUpdateInRenderForAnotherComponent = new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
                if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                    switch (fiber.tag) {
                        case FunctionComponent:
                        case ForwardRef:
                        case SimpleMemoComponent:
                            {
                                var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown';
                                var dedupeKey = renderingComponentName;
                                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                                    var setStateComponentName = getComponentName(fiber.type) || 'Unknown';
                                    error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
                                }
                                break;
                            }
                        case ClassComponent:
                            {
                                if (!didWarnAboutUpdateInRender) {
                                    error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');
                                    didWarnAboutUpdateInRender = true;
                                }
                                break;
                            }
                    }
                }
            }
        }
        var IsThisRendererActing = {
            current: false
        };
        function warnIfNotScopedWithMatchingAct(fiber) {
            {
                if (warnsIfNotActing === true && IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                    var previousFiber = current;
                    try {
                        setCurrentFiber(fiber);
                        error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' +
                            'import {act} fr' + "om 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' +
                            'import TestRenderer fr' + "om react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);');
                    }
                    finally {
                        if (previousFiber) {
                            setCurrentFiber(fiber);
                        }
                        else {
                            resetCurrentFiber();
                        }
                    }
                }
            }
        }
        function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
                if (warnsIfNotActing === true && (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                    error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
                }
            }
        }
        function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
                if (warnsIfNotActing === true && executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                    var previousFiber = current;
                    try {
                        setCurrentFiber(fiber);
                        error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
                    }
                    finally {
                        if (previousFiber) {
                            setCurrentFiber(fiber);
                        }
                        else {
                            resetCurrentFiber();
                        }
                    }
                }
            }
        }
        var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
        var didWarnAboutUnmockedScheduler = false;
        function warnIfUnmockedScheduler(fiber) {
            {
                if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
                    if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                        didWarnAboutUnmockedScheduler = true;
                        error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' +
                            "jest.mock('scheduler', () => require" + "('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://reactjs.org/link/mock-scheduler');
                    }
                }
            }
        }
        function computeThreadID(root, lane) {
            return lane * 1000 + root.interactionThreadID;
        }
        function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
                spawnedWorkDuringRender = [lane];
            }
            else {
                spawnedWorkDuringRender.push(lane);
            }
        }
        function scheduleInteractions(root, lane, interactions) {
            if (interactions.size > 0) {
                var pendingInteractionMap = root.pendingInteractionMap;
                var pendingInteractions = pendingInteractionMap.get(lane);
                if (pendingInteractions != null) {
                    interactions.forEach(function (interaction) {
                        if (!pendingInteractions.has(interaction)) {
                            interaction.__count++;
                        }
                        pendingInteractions.add(interaction);
                    });
                }
                else {
                    pendingInteractionMap.set(lane, new Set(interactions));
                    interactions.forEach(function (interaction) {
                        interaction.__count++;
                    });
                }
                var subscriber = tracing.__subscriberRef.current;
                if (subscriber !== null) {
                    var threadID = computeThreadID(root, lane);
                    subscriber.onWorkScheduled(interactions, threadID);
                }
            }
        }
        function schedulePendingInteractions(root, lane) {
            scheduleInteractions(root, lane, tracing.__interactionsRef.current);
        }
        function startWorkOnPendingInteractions(root, lanes) {
            var interactions = new Set();
            root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {
                if (includesSomeLane(lanes, scheduledLane)) {
                    scheduledInteractions.forEach(function (interaction) {
                        return interactions.add(interaction);
                    });
                }
            });
            root.memoizedInteractions = interactions;
            if (interactions.size > 0) {
                var subscriber = tracing.__subscriberRef.current;
                if (subscriber !== null) {
                    var threadID = computeThreadID(root, lanes);
                    try {
                        subscriber.onWorkStarted(interactions, threadID);
                    }
                    catch (error) {
                        scheduleCallback(ImmediatePriority$1, function () {
                            throw error;
                        });
                    }
                }
            }
        }
        function finishPendingInteractions(root, committedLanes) {
            var remainingLanesAfterCommit = root.pendingLanes;
            var subscriber;
            try {
                subscriber = tracing.__subscriberRef.current;
                if (subscriber !== null && root.memoizedInteractions.size > 0) {
                    var threadID = computeThreadID(root, committedLanes);
                    subscriber.onWorkStopped(root.memoizedInteractions, threadID);
                }
            }
            catch (error) {
                scheduleCallback(ImmediatePriority$1, function () {
                    throw error;
                });
            }
            finally {
                var pendingInteractionMap = root.pendingInteractionMap;
                pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
                    if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                        pendingInteractionMap.delete(lane);
                        scheduledInteractions.forEach(function (interaction) {
                            interaction.__count--;
                            if (subscriber !== null && interaction.__count === 0) {
                                try {
                                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                                }
                                catch (error) {
                                    scheduleCallback(ImmediatePriority$1, function () {
                                        throw error;
                                    });
                                }
                            }
                        });
                    }
                });
            }
        }
        function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0;
        }
        var flushMockScheduler = Scheduler.unstable_flushAllWithoutAsserting;
        var isSchedulerMocked = typeof flushMockScheduler === 'function';
        function flushActWork() {
            if (flushMockScheduler !== undefined) {
                try {
                    return flushMockScheduler();
                }
                finally {
                }
            }
            else {
                try {
                    var didFlushWork = false;
                    while (flushPassiveEffects()) {
                        didFlushWork = true;
                    }
                    return didFlushWork;
                }
                finally {
                }
            }
        }
        function flushWorkAndMicroTasks(onDone) {
            try {
                flushActWork();
                enqueueTask(function () {
                    if (flushActWork()) {
                        flushWorkAndMicroTasks(onDone);
                    }
                    else {
                        onDone();
                    }
                });
            }
            catch (err) {
                onDone(err);
            }
        }
        var actingUpdatesScopeDepth = 0;
        function act(callback) {
            var previousActingUpdatesScopeDepth = actingUpdatesScopeDepth;
            actingUpdatesScopeDepth++;
            var previousIsSomeRendererActing = IsSomeRendererActing.current;
            var previousIsThisRendererActing = IsThisRendererActing.current;
            IsSomeRendererActing.current = true;
            IsThisRendererActing.current = true;
            function onDone() {
                actingUpdatesScopeDepth--;
                IsSomeRendererActing.current = previousIsSomeRendererActing;
                IsThisRendererActing.current = previousIsThisRendererActing;
                {
                    if (actingUpdatesScopeDepth > previousActingUpdatesScopeDepth) {
                        error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');
                    }
                }
            }
            var result;
            try {
                result = batchedUpdates(callback);
            }
            catch (error) {
                onDone();
                throw error;
            }
            if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
                var called = false;
                {
                    if (typeof Promise !== 'undefined') {
                        Promise.resolve().then(function () { }).then(function () {
                            if (called === false) {
                                error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, interleaving multiple act ' + 'calls and mixing their scopes. You should - await act(async () => ...);');
                            }
                        });
                    }
                }
                return {
                    then: function (resolve, reject) {
                        called = true;
                        result.then(function () {
                            if (actingUpdatesScopeDepth > 1 || isSchedulerMocked === true && previousIsSomeRendererActing === true) {
                                onDone();
                                resolve();
                                return;
                            }
                            flushWorkAndMicroTasks(function (err) {
                                onDone();
                                if (err) {
                                    reject(err);
                                }
                                else {
                                    resolve();
                                }
                            });
                        }, function (err) {
                            onDone();
                            reject(err);
                        });
                    }
                };
            }
            else {
                {
                    if (result !== undefined) {
                        error('The callback passed to act(...) function ' + 'must return undefined, or a Promise. You returned %s', result);
                    }
                }
                try {
                    if (actingUpdatesScopeDepth === 1 && (isSchedulerMocked === false || previousIsSomeRendererActing === false)) {
                        flushActWork();
                    }
                    onDone();
                }
                catch (err) {
                    onDone();
                    throw err;
                }
                return {
                    then: function (resolve) {
                        {
                            error('Do not await the result of calling act(...) with sync logic, it is not a Promise.');
                        }
                        resolve();
                    }
                };
            }
        }
        function detachFiberAfterEffects(fiber) {
            fiber.sibling = null;
            fiber.stateNode = null;
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function (handler) {
            {
                resolveFamily = handler;
            }
        };
        function resolveFunctionForHotReloading(type) {
            {
                if (resolveFamily === null) {
                    return type;
                }
                var family = resolveFamily(type);
                if (family === undefined) {
                    return type;
                }
                return family.current;
            }
        }
        function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
            {
                if (resolveFamily === null) {
                    return type;
                }
                var family = resolveFamily(type);
                if (family === undefined) {
                    if (type !== null && type !== undefined && typeof type.render === 'function') {
                        var currentRender = resolveFunctionForHotReloading(type.render);
                        if (type.render !== currentRender) {
                            var syntheticType = {
                                $$typeof: REACT_FORWARD_REF_TYPE,
                                render: currentRender
                            };
                            if (type.displayName !== undefined) {
                                syntheticType.displayName = type.displayName;
                            }
                            return syntheticType;
                        }
                    }
                    return type;
                }
                return family.current;
            }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
            {
                if (resolveFamily === null) {
                    return false;
                }
                var prevType = fiber.elementType;
                var nextType = element.type;
                var needsCompareFamilies = false;
                var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
                switch (fiber.tag) {
                    case ClassComponent:
                        {
                            if (typeof nextType === 'function') {
                                needsCompareFamilies = true;
                            }
                            break;
                        }
                    case FunctionComponent:
                        {
                            if (typeof nextType === 'function') {
                                needsCompareFamilies = true;
                            }
                            else if ($$typeofNextType === REACT_LAZY_TYPE) {
                                needsCompareFamilies = true;
                            }
                            break;
                        }
                    case ForwardRef:
                        {
                            if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                                needsCompareFamilies = true;
                            }
                            else if ($$typeofNextType === REACT_LAZY_TYPE) {
                                needsCompareFamilies = true;
                            }
                            break;
                        }
                    case MemoComponent:
                    case SimpleMemoComponent:
                        {
                            if ($$typeofNextType === REACT_MEMO_TYPE) {
                                needsCompareFamilies = true;
                            }
                            else if ($$typeofNextType === REACT_LAZY_TYPE) {
                                needsCompareFamilies = true;
                            }
                            break;
                        }
                    default:
                        return false;
                }
                if (needsCompareFamilies) {
                    var prevFamily = resolveFamily(prevType);
                    if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
                        return true;
                    }
                }
                return false;
            }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
            {
                if (resolveFamily === null) {
                    return;
                }
                if (typeof WeakSet !== 'function') {
                    return;
                }
                if (failedBoundaries === null) {
                    failedBoundaries = new WeakSet();
                }
                failedBoundaries.add(fiber);
            }
        }
        var scheduleRefresh = function (root, update) {
            {
                if (resolveFamily === null) {
                    return;
                }
                var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
                flushPassiveEffects();
                flushSync(function () {
                    scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
                });
            }
        };
        var scheduleRoot = function (root, element) {
            {
                if (root.context !== emptyContextObject) {
                    return;
                }
                flushPassiveEffects();
                flushSync(function () {
                    updateContainer(element, root, null, null);
                });
            }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
                var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
                var candidateType = null;
                switch (tag) {
                    case FunctionComponent:
                    case SimpleMemoComponent:
                    case ClassComponent:
                        candidateType = type;
                        break;
                    case ForwardRef:
                        candidateType = type.render;
                        break;
                }
                if (resolveFamily === null) {
                    throw new Error('Expected resolveFamily to be set during hot reload.');
                }
                var needsRender = false;
                var needsRemount = false;
                if (candidateType !== null) {
                    var family = resolveFamily(candidateType);
                    if (family !== undefined) {
                        if (staleFamilies.has(family)) {
                            needsRemount = true;
                        }
                        else if (updatedFamilies.has(family)) {
                            if (tag === ClassComponent) {
                                needsRemount = true;
                            }
                            else {
                                needsRender = true;
                            }
                        }
                    }
                }
                if (failedBoundaries !== null) {
                    if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                        needsRemount = true;
                    }
                }
                if (needsRemount) {
                    fiber._debugNeedsRemount = true;
                }
                if (needsRemount || needsRender) {
                    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
                }
                if (child !== null && !needsRemount) {
                    scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
                }
                if (sibling !== null) {
                    scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
                }
            }
        }
        var findHostInstancesForRefresh = function (root, families) {
            {
                var hostInstances = new Set();
                var types = new Set(families.map(function (family) {
                    return family.current;
                }));
                findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
                return hostInstances;
            }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
                var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
                var candidateType = null;
                switch (tag) {
                    case FunctionComponent:
                    case SimpleMemoComponent:
                    case ClassComponent:
                        candidateType = type;
                        break;
                    case ForwardRef:
                        candidateType = type.render;
                        break;
                }
                var didMatch = false;
                if (candidateType !== null) {
                    if (types.has(candidateType)) {
                        didMatch = true;
                    }
                }
                if (didMatch) {
                    findHostInstancesForFiberShallowly(fiber, hostInstances);
                }
                else {
                    if (child !== null) {
                        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                    }
                }
                if (sibling !== null) {
                    findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
                }
            }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
                var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
                if (foundHostInstances) {
                    return;
                }
                var node = fiber;
                while (true) {
                    switch (node.tag) {
                        case HostComponent:
                            hostInstances.add(node.stateNode);
                            return;
                        case HostPortal:
                            hostInstances.add(node.stateNode.containerInfo);
                            return;
                        case HostRoot:
                            hostInstances.add(node.stateNode.containerInfo);
                            return;
                    }
                    if (node.return === null) {
                        throw new Error('Expected to reach root first.');
                    }
                    node = node.return;
                }
            }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
                var node = fiber;
                var foundHostInstances = false;
                while (true) {
                    if (node.tag === HostComponent) {
                        foundHostInstances = true;
                        hostInstances.add(node.stateNode);
                    }
                    else if (node.child !== null) {
                        node.child.return = node;
                        node = node.child;
                        continue;
                    }
                    if (node === fiber) {
                        return foundHostInstances;
                    }
                    while (node.sibling === null) {
                        if (node.return === null || node.return === fiber) {
                            return foundHostInstances;
                        }
                        node = node.return;
                    }
                    node.sibling.return = node.return;
                    node = node.sibling;
                }
            }
            return false;
        }
        var hasBadMapPolyfill;
        {
            hasBadMapPolyfill = false;
            try {
                var nonExtensibleObject = Object.preventExtensions({});
                new Map([[nonExtensibleObject, null]]);
                new Set([nonExtensibleObject]);
            }
            catch (e) {
                hasBadMapPolyfill = true;
            }
        }
        var debugCounter = 1;
        function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
                this.actualDuration = Number.NaN;
                this.actualStartTime = Number.NaN;
                this.selfBaseDuration = Number.NaN;
                this.treeBaseDuration = Number.NaN;
                this.actualDuration = 0;
                this.actualStartTime = -1;
                this.selfBaseDuration = 0;
                this.treeBaseDuration = 0;
            }
            {
                this._debugID = debugCounter++;
                this._debugSource = null;
                this._debugOwner = null;
                this._debugNeedsRemount = false;
                this._debugHookTypes = null;
                if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
                    Object.preventExtensions(this);
                }
            }
        }
        var createFiber = function (tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
            return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
        }
        function resolveLazyComponentTag(Component) {
            if (typeof Component === 'function') {
                return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            }
            else if (Component !== undefined && Component !== null) {
                var $$typeof = Component.$$typeof;
                if ($$typeof === REACT_FORWARD_REF_TYPE) {
                    return ForwardRef;
                }
                if ($$typeof === REACT_MEMO_TYPE) {
                    return MemoComponent;
                }
            }
            return IndeterminateComponent;
        }
        function createWorkInProgress(current, pendingProps) {
            var workInProgress = current.alternate;
            if (workInProgress === null) {
                workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
                workInProgress.elementType = current.elementType;
                workInProgress.type = current.type;
                workInProgress.stateNode = current.stateNode;
                {
                    workInProgress._debugID = current._debugID;
                    workInProgress._debugSource = current._debugSource;
                    workInProgress._debugOwner = current._debugOwner;
                    workInProgress._debugHookTypes = current._debugHookTypes;
                }
                workInProgress.alternate = current;
                current.alternate = workInProgress;
            }
            else {
                workInProgress.pendingProps = pendingProps;
                workInProgress.type = current.type;
                workInProgress.flags = NoFlags;
                workInProgress.nextEffect = null;
                workInProgress.firstEffect = null;
                workInProgress.lastEffect = null;
                {
                    workInProgress.actualDuration = 0;
                    workInProgress.actualStartTime = -1;
                }
            }
            workInProgress.childLanes = current.childLanes;
            workInProgress.lanes = current.lanes;
            workInProgress.child = current.child;
            workInProgress.memoizedProps = current.memoizedProps;
            workInProgress.memoizedState = current.memoizedState;
            workInProgress.updateQueue = current.updateQueue;
            var currentDependencies = current.dependencies;
            workInProgress.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            workInProgress.sibling = current.sibling;
            workInProgress.index = current.index;
            workInProgress.ref = current.ref;
            {
                workInProgress.selfBaseDuration = current.selfBaseDuration;
                workInProgress.treeBaseDuration = current.treeBaseDuration;
            }
            {
                workInProgress._debugNeedsRemount = current._debugNeedsRemount;
                switch (workInProgress.tag) {
                    case IndeterminateComponent:
                    case FunctionComponent:
                    case SimpleMemoComponent:
                        workInProgress.type = resolveFunctionForHotReloading(current.type);
                        break;
                    case ClassComponent:
                        workInProgress.type = resolveClassForHotReloading(current.type);
                        break;
                    case ForwardRef:
                        workInProgress.type = resolveForwardRefForHotReloading(current.type);
                        break;
                }
            }
            return workInProgress;
        }
        function resetWorkInProgress(workInProgress, renderLanes) {
            workInProgress.flags &= Placement;
            workInProgress.nextEffect = null;
            workInProgress.firstEffect = null;
            workInProgress.lastEffect = null;
            var current = workInProgress.alternate;
            if (current === null) {
                workInProgress.childLanes = NoLanes;
                workInProgress.lanes = renderLanes;
                workInProgress.child = null;
                workInProgress.memoizedProps = null;
                workInProgress.memoizedState = null;
                workInProgress.updateQueue = null;
                workInProgress.dependencies = null;
                workInProgress.stateNode = null;
                {
                    workInProgress.selfBaseDuration = 0;
                    workInProgress.treeBaseDuration = 0;
                }
            }
            else {
                workInProgress.childLanes = current.childLanes;
                workInProgress.lanes = current.lanes;
                workInProgress.child = current.child;
                workInProgress.memoizedProps = current.memoizedProps;
                workInProgress.memoizedState = current.memoizedState;
                workInProgress.updateQueue = current.updateQueue;
                workInProgress.type = current.type;
                var currentDependencies = current.dependencies;
                workInProgress.dependencies = currentDependencies === null ? null : {
                    lanes: currentDependencies.lanes,
                    firstContext: currentDependencies.firstContext
                };
                {
                    workInProgress.selfBaseDuration = current.selfBaseDuration;
                    workInProgress.treeBaseDuration = current.treeBaseDuration;
                }
            }
            return workInProgress;
        }
        function createHostRootFiber(tag) {
            var mode;
            if (tag === ConcurrentRoot) {
                mode = ConcurrentMode | BlockingMode | StrictMode;
            }
            else if (tag === BlockingRoot) {
                mode = BlockingMode | StrictMode;
            }
            else {
                mode = NoMode;
            }
            if (isDevToolsPresent) {
                mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === 'function') {
                if (shouldConstruct$1(type)) {
                    fiberTag = ClassComponent;
                    {
                        resolvedType = resolveClassForHotReloading(resolvedType);
                    }
                }
                else {
                    {
                        resolvedType = resolveFunctionForHotReloading(resolvedType);
                    }
                }
            }
            else if (typeof type === 'string') {
                fiberTag = HostComponent;
            }
            else {
                getTag: switch (type) {
                    case REACT_FRAGMENT_TYPE:
                        return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                    case REACT_DEBUG_TRACING_MODE_TYPE:
                        fiberTag = Mode;
                        mode |= DebugTracingMode;
                        break;
                    case REACT_STRICT_MODE_TYPE:
                        fiberTag = Mode;
                        mode |= StrictMode;
                        break;
                    case REACT_PROFILER_TYPE:
                        return createFiberFromProfiler(pendingProps, mode, lanes, key);
                    case REACT_SUSPENSE_TYPE:
                        return createFiberFromSuspense(pendingProps, mode, lanes, key);
                    case REACT_SUSPENSE_LIST_TYPE:
                        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                    case REACT_OFFSCREEN_TYPE:
                        return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                    case REACT_LEGACY_HIDDEN_TYPE:
                        return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                    case REACT_SCOPE_TYPE:
                    default:
                        {
                            if (typeof type === 'object' && type !== null) {
                                switch (type.$$typeof) {
                                    case REACT_PROVIDER_TYPE:
                                        fiberTag = ContextProvider;
                                        break getTag;
                                    case REACT_CONTEXT_TYPE:
                                        fiberTag = ContextConsumer;
                                        break getTag;
                                    case REACT_FORWARD_REF_TYPE:
                                        fiberTag = ForwardRef;
                                        {
                                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                                        }
                                        break getTag;
                                    case REACT_MEMO_TYPE:
                                        fiberTag = MemoComponent;
                                        break getTag;
                                    case REACT_LAZY_TYPE:
                                        fiberTag = LazyComponent;
                                        resolvedType = null;
                                        break getTag;
                                    case REACT_BLOCK_TYPE:
                                        fiberTag = Block;
                                        break getTag;
                                }
                            }
                            var info = '';
                            {
                                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                                    info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
                                }
                                var ownerName = owner ? getComponentName(owner.type) : null;
                                if (ownerName) {
                                    info += '\n\nCheck the render method of `' + ownerName + '`.';
                                }
                            }
                            {
                                {
                                    throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                                }
                            }
                        }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
                fiber._debugOwner = owner;
            }
            return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
                owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
                fiber._debugSource = element._source;
                fiber._debugOwner = element._owner;
            }
            return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
                if (typeof pendingProps.id !== 'string') {
                    error('Profiler must specify an "id" as a prop');
                }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
                fiber.stateNode = {
                    effectDuration: 0,
                    passiveEffectDuration: 0
                };
            }
            return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            {
                fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            {
                fiber.type = REACT_OFFSCREEN_TYPE;
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
        }
        function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
            {
                fiber.type = REACT_LEGACY_HIDDEN_TYPE;
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = 'DELETED';
            fiber.type = 'DELETED';
            return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
                containerInfo: portal.containerInfo,
                pendingChildren: null,
                implementation: portal.implementation
            };
            return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
                target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
                target.actualDuration = source.actualDuration;
                target.actualStartTime = source.actualStartTime;
                target.selfBaseDuration = source.selfBaseDuration;
                target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugID = source._debugID;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate;
            this.callbackNode = null;
            this.callbackPriority = NoLanePriority;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            if (supportsHydration) {
                this.mutableSourceEagerHydrationData = null;
            }
            {
                this.interactionThreadID = tracing.unstable_getThreadID();
                this.memoizedInteractions = new Set();
                this.pendingInteractionMap = new Map();
            }
            {
                switch (tag) {
                    case BlockingRoot:
                        this._debugRootType = 'createBlockingRoot()';
                        break;
                    case ConcurrentRoot:
                        this._debugRootType = 'createRoot()';
                        break;
                    case LegacyRoot:
                        this._debugRootType = 'createLegacyRoot()';
                        break;
                }
            }
        }
        function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
            var root = new FiberRootNode(containerInfo, tag, hydrate);
            var uninitializedFiber = createHostRootFiber(tag);
            root.current = uninitializedFiber;
            uninitializedFiber.stateNode = root;
            initializeUpdateQueue(uninitializedFiber);
            return root;
        }
        function registerMutableSourceForHydration(root, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root.mutableSourceEagerHydrationData == null) {
                root.mutableSourceEagerHydrationData = [mutableSource, version];
            }
            else {
                root.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
        }
        function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            return {
                $$typeof: REACT_PORTAL_TYPE,
                key: key == null ? null : '' + key,
                children: children,
                containerInfo: containerInfo,
                implementation: implementation
            };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
                return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
                var Component = fiber.type;
                if (isContextProvider(Component)) {
                    return processChildContext(fiber, Component, parentContext);
                }
            }
            return parentContext;
        }
        function findHostInstance(component) {
            var fiber = get(component);
            if (fiber === undefined) {
                if (typeof component.render === 'function') {
                    {
                        {
                            throw Error("Unable to find node on an unmounted component.");
                        }
                    }
                }
                else {
                    {
                        {
                            throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                        }
                    }
                }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
                return null;
            }
            return hostFiber.stateNode;
        }
        function findHostInstanceWithWarning(component, methodName) {
            {
                var fiber = get(component);
                if (fiber === undefined) {
                    if (typeof component.render === 'function') {
                        {
                            {
                                throw Error("Unable to find node on an unmounted component.");
                            }
                        }
                    }
                    else {
                        {
                            {
                                throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                            }
                        }
                    }
                }
                var hostFiber = findCurrentHostFiber(fiber);
                if (hostFiber === null) {
                    return null;
                }
                if (hostFiber.mode & StrictMode) {
                    var componentName = getComponentName(fiber.type) || 'Component';
                    if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                        didWarnAboutFindNodeInStrictMode[componentName] = true;
                        var previousFiber = current;
                        try {
                            setCurrentFiber(hostFiber);
                            if (fiber.mode & StrictMode) {
                                error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
                            }
                            else {
                                error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
                            }
                        }
                        finally {
                            if (previousFiber) {
                                setCurrentFiber(previousFiber);
                            }
                            else {
                                resetCurrentFiber();
                            }
                        }
                    }
                }
                return hostFiber.stateNode;
            }
        }
        function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate);
        }
        function updateContainer(element, container, parentComponent, callback) {
            {
                onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            {
                if ('undefined' !== typeof jest) {
                    warnIfUnmockedScheduler(current$1);
                    warnIfNotScopedWithMatchingAct(current$1);
                }
            }
            var lane = requestUpdateLane(current$1);
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
                container.context = context;
            }
            else {
                container.pendingContext = context;
            }
            {
                if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                    didWarnAboutNestedUpdates = true;
                    error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
                }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
                element: element
            };
            callback = callback === undefined ? null : callback;
            if (callback !== null) {
                {
                    if (typeof callback !== 'function') {
                        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
                    }
                }
                update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            scheduleUpdateOnFiber(current$1, lane, eventTime);
            return lane;
        }
        function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
                return null;
            }
            switch (containerFiber.child.tag) {
                case HostComponent:
                    return getPublicInstance(containerFiber.child.stateNode);
                default:
                    return containerFiber.child.stateNode;
            }
        }
        function attemptSynchronousHydration(fiber) {
            switch (fiber.tag) {
                case HostRoot:
                    var root = fiber.stateNode;
                    if (root.hydrate) {
                        var lanes = getHighestPriorityPendingLanes(root);
                        flushRoot(root, lanes);
                    }
                    break;
                case SuspenseComponent:
                    var eventTime = requestEventTime();
                    flushSync(function () {
                        return scheduleUpdateOnFiber(fiber, SyncLane, eventTime);
                    });
                    var retryLane = InputDiscreteHydrationLane;
                    markRetryLaneIfNotHydrated(fiber, retryLane);
                    break;
            }
        }
        function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
                suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
                markRetryLaneImpl(alternate, retryLane);
            }
        }
        function attemptUserBlockingHydration(fiber) {
            if (fiber.tag !== SuspenseComponent) {
                return;
            }
            var eventTime = requestEventTime();
            var lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptContinuousHydration(fiber) {
            if (fiber.tag !== SuspenseComponent) {
                return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority(fiber) {
            if (fiber.tag !== SuspenseComponent) {
                return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
        }
        function runWithPriority$1(priority, fn) {
            var previousPriority = getCurrentUpdateLanePriority();
            try {
                setCurrentUpdateLanePriority(priority);
                return fn();
            }
            finally {
                setCurrentUpdateLanePriority(previousPriority);
            }
        }
        function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
                return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
                return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
        }
        var shouldSuspendImpl = function (fiber) {
            return false;
        };
        function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setSuspenseHandler = null;
        {
            var copyWithDeleteImpl = function (obj, path, index) {
                var key = path[index];
                var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
                if (index + 1 === path.length) {
                    if (Array.isArray(updated)) {
                        updated.splice(key, 1);
                    }
                    else {
                        delete updated[key];
                    }
                    return updated;
                }
                updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
                return updated;
            };
            var copyWithDelete = function (obj, path) {
                return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
                var oldKey = oldPath[index];
                var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
                if (index + 1 === oldPath.length) {
                    var newKey = newPath[index];
                    updated[newKey] = updated[oldKey];
                    if (Array.isArray(updated)) {
                        updated.splice(oldKey, 1);
                    }
                    else {
                        delete updated[oldKey];
                    }
                }
                else {
                    updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
                }
                return updated;
            };
            var copyWithRename = function (obj, oldPath, newPath) {
                if (oldPath.length !== newPath.length) {
                    warn('copyWithRename() expects paths of the same length');
                    return;
                }
                else {
                    for (var i = 0; i < newPath.length - 1; i++) {
                        if (oldPath[i] !== newPath[i]) {
                            warn('copyWithRename() expects paths to be the same except for the deepest key');
                            return;
                        }
                    }
                }
                return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function (obj, path, index, value) {
                if (index >= path.length) {
                    return value;
                }
                var key = path[index];
                var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
                updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
                return updated;
            };
            var copyWithSet = function (obj, path, value) {
                return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function (fiber, id) {
                var currentHook = fiber.memoizedState;
                while (currentHook !== null && id > 0) {
                    currentHook = currentHook.next;
                    id--;
                }
                return currentHook;
            };
            overrideHookState = function (fiber, id, path, value) {
                var hook = findHook(fiber, id);
                if (hook !== null) {
                    var newState = copyWithSet(hook.memoizedState, path, value);
                    hook.memoizedState = newState;
                    hook.baseState = newState;
                    fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
                }
            };
            overrideHookStateDeletePath = function (fiber, id, path) {
                var hook = findHook(fiber, id);
                if (hook !== null) {
                    var newState = copyWithDelete(hook.memoizedState, path);
                    hook.memoizedState = newState;
                    hook.baseState = newState;
                    fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
                }
            };
            overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
                var hook = findHook(fiber, id);
                if (hook !== null) {
                    var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                    hook.memoizedState = newState;
                    hook.baseState = newState;
                    fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
                }
            };
            overrideProps = function (fiber, path, value) {
                fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
                if (fiber.alternate) {
                    fiber.alternate.pendingProps = fiber.pendingProps;
                }
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function (fiber, path) {
                fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
                if (fiber.alternate) {
                    fiber.alternate.pendingProps = fiber.pendingProps;
                }
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function (fiber, oldPath, newPath) {
                fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
                if (fiber.alternate) {
                    fiber.alternate.pendingProps = fiber.pendingProps;
                }
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function (fiber) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setSuspenseHandler = function (newShouldSuspendImpl) {
                shouldSuspendImpl = newShouldSuspendImpl;
            };
        }
        function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
                return null;
            }
            return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
            return null;
        }
        function getCurrentFiberForDevTools() {
            return current;
        }
        function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
                bundleType: devToolsConfig.bundleType,
                version: devToolsConfig.version,
                rendererPackageName: devToolsConfig.rendererPackageName,
                rendererConfig: devToolsConfig.rendererConfig,
                overrideHookState: overrideHookState,
                overrideHookStateDeletePath: overrideHookStateDeletePath,
                overrideHookStateRenamePath: overrideHookStateRenamePath,
                overrideProps: overrideProps,
                overridePropsDeletePath: overridePropsDeletePath,
                overridePropsRenamePath: overridePropsRenamePath,
                setSuspenseHandler: setSuspenseHandler,
                scheduleUpdate: scheduleUpdate,
                currentDispatcherRef: ReactCurrentDispatcher,
                findHostInstanceByFiber: findHostInstanceByFiber,
                findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
                findHostInstancesForRefresh: findHostInstancesForRefresh,
                scheduleRefresh: scheduleRefresh,
                scheduleRoot: scheduleRoot,
                setRefreshHandler: setRefreshHandler,
                getCurrentFiber: getCurrentFiberForDevTools
            });
        }
        exports.IsThisRendererActing = IsThisRendererActing;
        exports.act = act;
        exports.attemptContinuousHydration = attemptContinuousHydration;
        exports.attemptHydrationAtCurrentPriority = attemptHydrationAtCurrentPriority;
        exports.attemptSynchronousHydration = attemptSynchronousHydration;
        exports.attemptUserBlockingHydration = attemptUserBlockingHydration;
        exports.batchedEventUpdates = batchedEventUpdates;
        exports.batchedUpdates = batchedUpdates;
        exports.createComponentSelector = createComponentSelector;
        exports.createContainer = createContainer;
        exports.createHasPsuedoClassSelector = createHasPsuedoClassSelector;
        exports.createPortal = createPortal;
        exports.createRoleSelector = createRoleSelector;
        exports.createTestNameSelector = createTestNameSelector;
        exports.createTextSelector = createTextSelector;
        exports.deferredUpdates = deferredUpdates;
        exports.discreteUpdates = discreteUpdates;
        exports.findAllNodes = findAllNodes;
        exports.findBoundingRects = findBoundingRects;
        exports.findHostInstance = findHostInstance;
        exports.findHostInstanceWithNoPortals = findHostInstanceWithNoPortals;
        exports.findHostInstanceWithWarning = findHostInstanceWithWarning;
        exports.flushControlled = flushControlled;
        exports.flushDiscreteUpdates = flushDiscreteUpdates;
        exports.flushPassiveEffects = flushPassiveEffects;
        exports.flushSync = flushSync;
        exports.focusWithin = focusWithin;
        exports.getCurrentUpdateLanePriority = getCurrentUpdateLanePriority;
        exports.getFindAllNodesFailureDescription = getFindAllNodesFailureDescription;
        exports.getPublicRootInstance = getPublicRootInstance;
        exports.injectIntoDevTools = injectIntoDevTools;
        exports.observeVisibleRects = observeVisibleRects;
        exports.registerMutableSourceForHydration = registerMutableSourceForHydration;
        exports.runWithPriority = runWithPriority$1;
        exports.shouldSuspend = shouldSuspend;
        exports.unbatchedUpdates = unbatchedUpdates;
        exports.updateContainer = updateContainer;
        return exports;
    };
}


/***/ }),

/***/ "./node_modules/react-reconciler/index.js":
/*!************************************************!*\
  !*** ./node_modules/react-reconciler/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


if (false) {}
else {
    module.exports = __webpack_require__(/*! ./cjs/react-reconciler.development.js */ "./node_modules/react-reconciler/cjs/react-reconciler.development.js");
}


/***/ }),

/***/ "./node_modules/react-use-measure/dist/web.js":
/*!****************************************************!*\
  !*** ./node_modules/react-use-measure/dist/web.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useMeasure)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var debounce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! debounce */ "./node_modules/debounce/index.js");
/* harmony import */ var debounce__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(debounce__WEBPACK_IMPORTED_MODULE_1__);


function useMeasure(_temp) {
    let { debounce, scroll, polyfill, offsetSize } = _temp === void 0 ? {
        debounce: 0,
        scroll: false,
        offsetSize: false
    } : _temp;
    const ResizeObserver = polyfill || (typeof window === 'undefined' ? class ResizeObserver {
    } : window.ResizeObserver);
    if (!ResizeObserver) {
        throw new Error('This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills');
    }
    const [bounds, set] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({
        left: 0,
        top: 0,
        width: 0,
        height: 0,
        bottom: 0,
        right: 0,
        x: 0,
        y: 0
    });
    const state = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({
        element: null,
        scrollContainers: null,
        resizeObserver: null,
        lastBounds: bounds
    });
    const scrollDebounce = debounce ? typeof debounce === 'number' ? debounce : debounce.scroll : null;
    const resizeDebounce = debounce ? typeof debounce === 'number' ? debounce : debounce.resize : null;
    const mounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        mounted.current = true;
        return () => void (mounted.current = false);
    });
    const [forceRefresh, resizeChange, scrollChange] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
        const callback = () => {
            if (!state.current.element)
                return;
            const { left, top, width, height, bottom, right, x, y } = state.current.element.getBoundingClientRect();
            const size = {
                left,
                top,
                width,
                height,
                bottom,
                right,
                x,
                y
            };
            if (state.current.element instanceof HTMLElement && offsetSize) {
                size.height = state.current.element.offsetHeight;
                size.width = state.current.element.offsetWidth;
            }
            Object.freeze(size);
            if (mounted.current && !areBoundsEqual(state.current.lastBounds, size))
                set(state.current.lastBounds = size);
        };
        return [callback, resizeDebounce ? debounce__WEBPACK_IMPORTED_MODULE_1___default()(callback, resizeDebounce) : callback, scrollDebounce ? debounce__WEBPACK_IMPORTED_MODULE_1___default()(callback, scrollDebounce) : callback];
    }, [set, offsetSize, scrollDebounce, resizeDebounce]);
    function removeListeners() {
        if (state.current.scrollContainers) {
            state.current.scrollContainers.forEach(element => element.removeEventListener('scroll', scrollChange, true));
            state.current.scrollContainers = null;
        }
        if (state.current.resizeObserver) {
            state.current.resizeObserver.disconnect();
            state.current.resizeObserver = null;
        }
    }
    function addListeners() {
        if (!state.current.element)
            return;
        state.current.resizeObserver = new ResizeObserver(scrollChange);
        state.current.resizeObserver.observe(state.current.element);
        if (scroll && state.current.scrollContainers) {
            state.current.scrollContainers.forEach(scrollContainer => scrollContainer.addEventListener('scroll', scrollChange, {
                capture: true,
                passive: true
            }));
        }
    }
    const ref = node => {
        if (!node || node === state.current.element)
            return;
        removeListeners();
        state.current.element = node;
        state.current.scrollContainers = findScrollContainers(node);
        addListeners();
    };
    useOnWindowScroll(scrollChange, Boolean(scroll));
    useOnWindowResize(resizeChange);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        removeListeners();
        addListeners();
    }, [scroll, scrollChange, resizeChange]);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => removeListeners, []);
    return [ref, bounds, forceRefresh];
}
function useOnWindowResize(onWindowResize) {
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        const cb = onWindowResize;
        window.addEventListener('resize', cb);
        return () => void window.removeEventListener('resize', cb);
    }, [onWindowResize]);
}
function useOnWindowScroll(onScroll, enabled) {
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        if (enabled) {
            const cb = onScroll;
            window.addEventListener('scroll', cb, {
                capture: true,
                passive: true
            });
            return () => void window.removeEventListener('scroll', cb, true);
        }
    }, [onScroll, enabled]);
}
function findScrollContainers(element) {
    const result = [];
    if (!element || element === document.body)
        return result;
    const { overflow, overflowX, overflowY } = window.getComputedStyle(element);
    if ([overflow, overflowX, overflowY].some(prop => prop === 'auto' || prop === 'scroll'))
        result.push(element);
    return [...result, ...findScrollContainers(element.parentElement)];
}
const keys = ['x', 'y', 'top', 'bottom', 'left', 'right', 'width', 'height'];
const areBoundsEqual = (a, b) => keys.every(key => a[key] === b[key]);



/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-runtime.development.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-runtime.development.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


if (true) {
    (function () {
        'use strict';
        var React = __webpack_require__(/*! react */ "react");
        var _assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");
        var REACT_ELEMENT_TYPE = 0xeac7;
        var REACT_PORTAL_TYPE = 0xeaca;
        exports.Fragment = 0xeacb;
        var REACT_STRICT_MODE_TYPE = 0xeacc;
        var REACT_PROFILER_TYPE = 0xead2;
        var REACT_PROVIDER_TYPE = 0xeacd;
        var REACT_CONTEXT_TYPE = 0xeace;
        var REACT_FORWARD_REF_TYPE = 0xead0;
        var REACT_SUSPENSE_TYPE = 0xead1;
        var REACT_SUSPENSE_LIST_TYPE = 0xead8;
        var REACT_MEMO_TYPE = 0xead3;
        var REACT_LAZY_TYPE = 0xead4;
        var REACT_BLOCK_TYPE = 0xead9;
        var REACT_SERVER_BLOCK_TYPE = 0xeada;
        var REACT_FUNDAMENTAL_TYPE = 0xead5;
        var REACT_SCOPE_TYPE = 0xead7;
        var REACT_OPAQUE_ID_TYPE = 0xeae0;
        var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
        var REACT_OFFSCREEN_TYPE = 0xeae2;
        var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;
        if (typeof Symbol === 'function' && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor('react.element');
            REACT_PORTAL_TYPE = symbolFor('react.portal');
            exports.Fragment = symbolFor('react.fragment');
            REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
            REACT_PROFILER_TYPE = symbolFor('react.profiler');
            REACT_PROVIDER_TYPE = symbolFor('react.provider');
            REACT_CONTEXT_TYPE = symbolFor('react.context');
            REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
            REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
            REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
            REACT_MEMO_TYPE = symbolFor('react.memo');
            REACT_LAZY_TYPE = symbolFor('react.lazy');
            REACT_BLOCK_TYPE = symbolFor('react.block');
            REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
            REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
            REACT_SCOPE_TYPE = symbolFor('react.scope');
            REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
            REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
            REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = '@@iterator';
        function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== 'object') {
                return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === 'function') {
                return maybeIterator;
            }
            return null;
        }
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
            {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                    args[_key2 - 1] = arguments[_key2];
                }
                printWarning('error', format, args);
            }
        }
        function printWarning(level, format, args) {
            {
                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame.getStackAddendum();
                if (stack !== '') {
                    format += '%s';
                    args = args.concat([stack]);
                }
                var argsWithFormat = args.map(function (item) {
                    return '' + item;
                });
                argsWithFormat.unshift('Warning: ' + format);
                Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
        }
        var enableScopeAPI = false;
        function isValidElementType(type) {
            if (typeof type === 'string' || typeof type === 'function') {
                return true;
            }
            if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
                return true;
            }
            if (typeof type === 'object' && type !== null) {
                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                    return true;
                }
            }
            return false;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || '';
            return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
            return type.displayName || 'Context';
        }
        function getComponentName(type) {
            if (type == null) {
                return null;
            }
            {
                if (typeof type.tag === 'number') {
                    error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
                }
            }
            if (typeof type === 'function') {
                return type.displayName || type.name || null;
            }
            if (typeof type === 'string') {
                return type;
            }
            switch (type) {
                case exports.Fragment:
                    return 'Fragment';
                case REACT_PORTAL_TYPE:
                    return 'Portal';
                case REACT_PROFILER_TYPE:
                    return 'Profiler';
                case REACT_STRICT_MODE_TYPE:
                    return 'StrictMode';
                case REACT_SUSPENSE_TYPE:
                    return 'Suspense';
                case REACT_SUSPENSE_LIST_TYPE:
                    return 'SuspenseList';
            }
            if (typeof type === 'object') {
                switch (type.$$typeof) {
                    case REACT_CONTEXT_TYPE:
                        var context = type;
                        return getContextName(context) + '.Consumer';
                    case REACT_PROVIDER_TYPE:
                        var provider = type;
                        return getContextName(provider._context) + '.Provider';
                    case REACT_FORWARD_REF_TYPE:
                        return getWrappedName(type, type.render, 'ForwardRef');
                    case REACT_MEMO_TYPE:
                        return getComponentName(type.type);
                    case REACT_BLOCK_TYPE:
                        return getComponentName(type._render);
                    case REACT_LAZY_TYPE:
                        {
                            var lazyComponent = type;
                            var payload = lazyComponent._payload;
                            var init = lazyComponent._init;
                            try {
                                return getComponentName(init(payload));
                            }
                            catch (x) {
                                return null;
                            }
                        }
                }
            }
            return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() { }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
            {
                if (disabledDepth === 0) {
                    prevLog = console.log;
                    prevInfo = console.info;
                    prevWarn = console.warn;
                    prevError = console.error;
                    prevGroup = console.group;
                    prevGroupCollapsed = console.groupCollapsed;
                    prevGroupEnd = console.groupEnd;
                    var props = {
                        configurable: true,
                        enumerable: true,
                        value: disabledLog,
                        writable: true
                    };
                    Object.defineProperties(console, {
                        info: props,
                        log: props,
                        warn: props,
                        error: props,
                        group: props,
                        groupCollapsed: props,
                        groupEnd: props
                    });
                }
                disabledDepth++;
            }
        }
        function reenableLogs() {
            {
                disabledDepth--;
                if (disabledDepth === 0) {
                    var props = {
                        configurable: true,
                        enumerable: true,
                        writable: true
                    };
                    Object.defineProperties(console, {
                        log: _assign({}, props, {
                            value: prevLog
                        }),
                        info: _assign({}, props, {
                            value: prevInfo
                        }),
                        warn: _assign({}, props, {
                            value: prevWarn
                        }),
                        error: _assign({}, props, {
                            value: prevError
                        }),
                        group: _assign({}, props, {
                            value: prevGroup
                        }),
                        groupCollapsed: _assign({}, props, {
                            value: prevGroupCollapsed
                        }),
                        groupEnd: _assign({}, props, {
                            value: prevGroupEnd
                        })
                    });
                }
                if (disabledDepth < 0) {
                    error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
                }
            }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
                if (prefix === undefined) {
                    try {
                        throw Error();
                    }
                    catch (x) {
                        var match = x.stack.trim().match(/\n( *(at )?)/);
                        prefix = match && match[1] || '';
                    }
                }
                return '\n' + prefix + name;
            }
        }
        var reentry = false;
        var componentFrameCache;
        {
            var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
                return '';
            }
            {
                var frame = componentFrameCache.get(fn);
                if (frame !== undefined) {
                    return frame;
                }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = undefined;
            var previousDispatcher;
            {
                previousDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = null;
                disableLogs();
            }
            try {
                if (construct) {
                    var Fake = function () {
                        throw Error();
                    };
                    Object.defineProperty(Fake.prototype, 'props', {
                        set: function () {
                            throw Error();
                        }
                    });
                    if (typeof Reflect === 'object' && Reflect.construct) {
                        try {
                            Reflect.construct(Fake, []);
                        }
                        catch (x) {
                            control = x;
                        }
                        Reflect.construct(fn, [], Fake);
                    }
                    else {
                        try {
                            Fake.call();
                        }
                        catch (x) {
                            control = x;
                        }
                        fn.call(Fake.prototype);
                    }
                }
                else {
                    try {
                        throw Error();
                    }
                    catch (x) {
                        control = x;
                    }
                    fn();
                }
            }
            catch (sample) {
                if (sample && control && typeof sample.stack === 'string') {
                    var sampleLines = sample.stack.split('\n');
                    var controlLines = control.stack.split('\n');
                    var s = sampleLines.length - 1;
                    var c = controlLines.length - 1;
                    while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                        c--;
                    }
                    for (; s >= 1 && c >= 0; s--, c--) {
                        if (sampleLines[s] !== controlLines[c]) {
                            if (s !== 1 || c !== 1) {
                                do {
                                    s--;
                                    c--;
                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                                        var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                                        {
                                            if (typeof fn === 'function') {
                                                componentFrameCache.set(fn, _frame);
                                            }
                                        }
                                        return _frame;
                                    }
                                } while (s >= 1 && c >= 0);
                            }
                            break;
                        }
                    }
                }
            }
            finally {
                reentry = false;
                {
                    ReactCurrentDispatcher.current = previousDispatcher;
                    reenableLogs();
                }
                Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : '';
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
            {
                if (typeof fn === 'function') {
                    componentFrameCache.set(fn, syntheticFrame);
                }
            }
            return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
                return describeNativeComponentFrame(fn, false);
            }
        }
        function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
                return '';
            }
            if (typeof type === 'function') {
                {
                    return describeNativeComponentFrame(type, shouldConstruct(type));
                }
            }
            if (typeof type === 'string') {
                return describeBuiltInComponentFrame(type);
            }
            switch (type) {
                case REACT_SUSPENSE_TYPE:
                    return describeBuiltInComponentFrame('Suspense');
                case REACT_SUSPENSE_LIST_TYPE:
                    return describeBuiltInComponentFrame('SuspenseList');
            }
            if (typeof type === 'object') {
                switch (type.$$typeof) {
                    case REACT_FORWARD_REF_TYPE:
                        return describeFunctionComponentFrame(type.render);
                    case REACT_MEMO_TYPE:
                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                    case REACT_BLOCK_TYPE:
                        return describeFunctionComponentFrame(type._render);
                    case REACT_LAZY_TYPE:
                        {
                            var lazyComponent = type;
                            var payload = lazyComponent._payload;
                            var init = lazyComponent._init;
                            try {
                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                            }
                            catch (x) { }
                        }
                }
            }
            return '';
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
            {
                if (element) {
                    var owner = element._owner;
                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                    ReactDebugCurrentFrame.setExtraStackFrame(stack);
                }
                else {
                    ReactDebugCurrentFrame.setExtraStackFrame(null);
                }
            }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
                var has = Function.call.bind(Object.prototype.hasOwnProperty);
                for (var typeSpecName in typeSpecs) {
                    if (has(typeSpecs, typeSpecName)) {
                        var error$1 = void 0;
                        try {
                            if (typeof typeSpecs[typeSpecName] !== 'function') {
                                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                                err.name = 'Invariant Violation';
                                throw err;
                            }
                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
                        }
                        catch (ex) {
                            error$1 = ex;
                        }
                        if (error$1 && !(error$1 instanceof Error)) {
                            setCurrentlyValidatingElement(element);
                            error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
                            setCurrentlyValidatingElement(null);
                        }
                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                            loggedTypeFailures[error$1.message] = true;
                            setCurrentlyValidatingElement(element);
                            error('Failed %s type: %s', location, error$1.message);
                            setCurrentlyValidatingElement(null);
                        }
                    }
                }
            }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        var didWarnAboutStringRefs;
        {
            didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
            {
                if (hasOwnProperty.call(config, 'ref')) {
                    var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
                    if (getter && getter.isReactWarning) {
                        return false;
                    }
                }
            }
            return config.ref !== undefined;
        }
        function hasValidKey(config) {
            {
                if (hasOwnProperty.call(config, 'key')) {
                    var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
                    if (getter && getter.isReactWarning) {
                        return false;
                    }
                }
            }
            return config.key !== undefined;
        }
        function warnIfStringRefCannotBeAutoConverted(config, self) {
            {
                if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
                    var componentName = getComponentName(ReactCurrentOwner.current.type);
                    if (!didWarnAboutStringRefs[componentName]) {
                        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);
                        didWarnAboutStringRefs[componentName] = true;
                    }
                }
            }
        }
        function defineKeyPropWarningGetter(props, displayName) {
            {
                var warnAboutAccessingKey = function () {
                    if (!specialPropKeyWarningShown) {
                        specialPropKeyWarningShown = true;
                        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
                    }
                };
                warnAboutAccessingKey.isReactWarning = true;
                Object.defineProperty(props, 'key', {
                    get: warnAboutAccessingKey,
                    configurable: true
                });
            }
        }
        function defineRefPropWarningGetter(props, displayName) {
            {
                var warnAboutAccessingRef = function () {
                    if (!specialPropRefWarningShown) {
                        specialPropRefWarningShown = true;
                        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
                    }
                };
                warnAboutAccessingRef.isReactWarning = true;
                Object.defineProperty(props, 'ref', {
                    get: warnAboutAccessingRef,
                    configurable: true
                });
            }
        }
        var ReactElement = function (type, key, ref, self, source, owner, props) {
            var element = {
                $$typeof: REACT_ELEMENT_TYPE,
                type: type,
                key: key,
                ref: ref,
                props: props,
                _owner: owner
            };
            {
                element._store = {};
                Object.defineProperty(element._store, 'validated', {
                    configurable: false,
                    enumerable: false,
                    writable: true,
                    value: false
                });
                Object.defineProperty(element, '_self', {
                    configurable: false,
                    enumerable: false,
                    writable: false,
                    value: self
                });
                Object.defineProperty(element, '_source', {
                    configurable: false,
                    enumerable: false,
                    writable: false,
                    value: source
                });
                if (Object.freeze) {
                    Object.freeze(element.props);
                    Object.freeze(element);
                }
            }
            return element;
        };
        function jsxDEV(type, config, maybeKey, source, self) {
            {
                var propName;
                var props = {};
                var key = null;
                var ref = null;
                if (maybeKey !== undefined) {
                    key = '' + maybeKey;
                }
                if (hasValidKey(config)) {
                    key = '' + config.key;
                }
                if (hasValidRef(config)) {
                    ref = config.ref;
                    warnIfStringRefCannotBeAutoConverted(config, self);
                }
                for (propName in config) {
                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                        props[propName] = config[propName];
                    }
                }
                if (type && type.defaultProps) {
                    var defaultProps = type.defaultProps;
                    for (propName in defaultProps) {
                        if (props[propName] === undefined) {
                            props[propName] = defaultProps[propName];
                        }
                    }
                }
                if (key || ref) {
                    var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
                    if (key) {
                        defineKeyPropWarningGetter(props, displayName);
                    }
                    if (ref) {
                        defineRefPropWarningGetter(props, displayName);
                    }
                }
                return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
            }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element) {
            {
                if (element) {
                    var owner = element._owner;
                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
                }
                else {
                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);
                }
            }
        }
        var propTypesMisspellWarningShown;
        {
            propTypesMisspellWarningShown = false;
        }
        function isValidElement(object) {
            {
                return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
        }
        function getDeclarationErrorAddendum() {
            {
                if (ReactCurrentOwner$1.current) {
                    var name = getComponentName(ReactCurrentOwner$1.current.type);
                    if (name) {
                        return '\n\nCheck the render method of `' + name + '`.';
                    }
                }
                return '';
            }
        }
        function getSourceInfoErrorAddendum(source) {
            {
                if (source !== undefined) {
                    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
                    var lineNumber = source.lineNumber;
                    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
                }
                return '';
            }
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
            {
                var info = getDeclarationErrorAddendum();
                if (!info) {
                    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
                    if (parentName) {
                        info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                    }
                }
                return info;
            }
        }
        function validateExplicitKey(element, parentType) {
            {
                if (!element._store || element._store.validated || element.key != null) {
                    return;
                }
                element._store.validated = true;
                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                    return;
                }
                ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
                var childOwner = '';
                if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
                }
                setCurrentlyValidatingElement$1(element);
                error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
                setCurrentlyValidatingElement$1(null);
            }
        }
        function validateChildKeys(node, parentType) {
            {
                if (typeof node !== 'object') {
                    return;
                }
                if (Array.isArray(node)) {
                    for (var i = 0; i < node.length; i++) {
                        var child = node[i];
                        if (isValidElement(child)) {
                            validateExplicitKey(child, parentType);
                        }
                    }
                }
                else if (isValidElement(node)) {
                    if (node._store) {
                        node._store.validated = true;
                    }
                }
                else if (node) {
                    var iteratorFn = getIteratorFn(node);
                    if (typeof iteratorFn === 'function') {
                        if (iteratorFn !== node.entries) {
                            var iterator = iteratorFn.call(node);
                            var step;
                            while (!(step = iterator.next()).done) {
                                if (isValidElement(step.value)) {
                                    validateExplicitKey(step.value, parentType);
                                }
                            }
                        }
                    }
                }
            }
        }
        function validatePropTypes(element) {
            {
                var type = element.type;
                if (type === null || type === undefined || typeof type === 'string') {
                    return;
                }
                var propTypes;
                if (typeof type === 'function') {
                    propTypes = type.propTypes;
                }
                else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE ||
                    type.$$typeof === REACT_MEMO_TYPE)) {
                    propTypes = type.propTypes;
                }
                else {
                    return;
                }
                if (propTypes) {
                    var name = getComponentName(type);
                    checkPropTypes(propTypes, element.props, 'prop', name, element);
                }
                else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
                    propTypesMisspellWarningShown = true;
                    var _name = getComponentName(type);
                    error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
                }
                if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
                    error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
                }
            }
        }
        function validateFragmentProps(fragment) {
            {
                var keys = Object.keys(fragment.props);
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    if (key !== 'children' && key !== 'key') {
                        setCurrentlyValidatingElement$1(fragment);
                        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
                        setCurrentlyValidatingElement$1(null);
                        break;
                    }
                }
                if (fragment.ref !== null) {
                    setCurrentlyValidatingElement$1(fragment);
                    error('Invalid attribute `ref` supplied to `React.Fragment`.');
                    setCurrentlyValidatingElement$1(null);
                }
            }
        }
        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
            {
                var validType = isValidElementType(type);
                if (!validType) {
                    var info = '';
                    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
                    }
                    var sourceInfo = getSourceInfoErrorAddendum(source);
                    if (sourceInfo) {
                        info += sourceInfo;
                    }
                    else {
                        info += getDeclarationErrorAddendum();
                    }
                    var typeString;
                    if (type === null) {
                        typeString = 'null';
                    }
                    else if (Array.isArray(type)) {
                        typeString = 'array';
                    }
                    else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                        typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                        info = ' Did you accidentally export a JSX literal instead of a component?';
                    }
                    else {
                        typeString = typeof type;
                    }
                    error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
                }
                var element = jsxDEV(type, props, key, source, self);
                if (element == null) {
                    return element;
                }
                if (validType) {
                    var children = props.children;
                    if (children !== undefined) {
                        if (isStaticChildren) {
                            if (Array.isArray(children)) {
                                for (var i = 0; i < children.length; i++) {
                                    validateChildKeys(children[i], type);
                                }
                                if (Object.freeze) {
                                    Object.freeze(children);
                                }
                            }
                            else {
                                error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
                            }
                        }
                        else {
                            validateChildKeys(children, type);
                        }
                    }
                }
                if (type === exports.Fragment) {
                    validateFragmentProps(element);
                }
                else {
                    validatePropTypes(element);
                }
                return element;
            }
        }
        function jsxWithValidationStatic(type, props, key) {
            {
                return jsxWithValidation(type, props, key, true);
            }
        }
        function jsxWithValidationDynamic(type, props, key) {
            {
                return jsxWithValidation(type, props, key, false);
            }
        }
        var jsx = jsxWithValidationDynamic;
        var jsxs = jsxWithValidationStatic;
        exports.jsx = jsx;
        exports.jsxs = jsxs;
    })();
}


/***/ }),

/***/ "./node_modules/react/jsx-runtime.js":
/*!*******************************************!*\
  !*** ./node_modules/react/jsx-runtime.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


if (false) {}
else {
    module.exports = __webpack_require__(/*! ./cjs/react-jsx-runtime.development.js */ "./node_modules/react/cjs/react-jsx-runtime.development.js");
}


/***/ }),

/***/ "./node_modules/rp-prompt/dist/index.js":
/*!**********************************************!*\
  !*** ./node_modules/rp-prompt/dist/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


!function (e, t) {  true ? module.exports = t(__webpack_require__(/*! react */ "react"), __webpack_require__(/*! liqvid */ "liqvid")) : 0; }(self, (function (e, t) { return (() => {
    "use strict";
    var r = { 153: (e, t, r) => { r.d(t, { Z: () => s }); var n = r(318), o = r.n(n), i = r(433), a = r.n(i)()(o()); a.push([e.id, ".rp-prompt{border-radius:2px;color:#fff;position:absolute;width:35em}.rp-prompt > :first-child,.rp-prompt > .rp-prompt-cue.active{border-radius:2px 2px 0 0}.rp-prompt > :last-child{border-radius:0 0 2px 2px}.rp-prompt > *{display:none}.rp-prompt > .active,.rp-prompt .active ~ *{display:block}.rp-prompt > :not(.active){opacity:.2}.rp-prompt-cue{background:#ffa500;font-family:monospace;font-size:.625em;padding:2px 0 2px 1em}.rp-prompt-line{padding:.1em .5em}.rp-prompt-line:nth-of-type(odd){background:#555}.rp-prompt-line:nth-of-type(even){background:#333}.rp-prompt-measure{display:block !important;padding:.1em .5em}", ""]); const s = a; }, 433: e => { e.exports = function (e) { var t = []; return t.toString = function () { return this.map((function (t) { var r = "", n = void 0 !== t[5]; return t[4] && (r += "@supports (".concat(t[4], ") {")), t[2] && (r += "@media ".concat(t[2], " {")), n && (r += "@layer".concat(t[5].length > 0 ? " ".concat(t[5]) : "", " {")), r += e(t), n && (r += "}"), t[2] && (r += "}"), t[4] && (r += "}"), r; })).join(""); }, t.i = function (e, r, n, o, i) { "string" == typeof e && (e = [[null, e, void 0]]); var a = {}; if (n)
            for (var s = 0; s < this.length; s++) {
                var c = this[s][0];
                null != c && (a[c] = !0);
            } for (var p = 0; p < e.length; p++) {
            var l = [].concat(e[p]);
            n && a[l[0]] || (void 0 !== i && (void 0 === l[5] || (l[1] = "@layer".concat(l[5].length > 0 ? " ".concat(l[5]) : "", " {").concat(l[1], "}")), l[5] = i), r && (l[2] ? (l[1] = "@media ".concat(l[2], " {").concat(l[1], "}"), l[2] = r) : l[2] = r), o && (l[4] ? (l[1] = "@supports (".concat(l[4], ") {").concat(l[1], "}"), l[4] = o) : l[4] = "".concat(o)), t.push(l));
        } }, t; }; }, 318: e => { e.exports = function (e) { return e[1]; }; }, 767: e => { var t = Object.getOwnPropertySymbols, r = Object.prototype.hasOwnProperty, n = Object.prototype.propertyIsEnumerable; function o(e) { if (null == e)
            throw new TypeError("Object.assign cannot be called with null or undefined"); return Object(e); } e.exports = function () { try {
            if (!Object.assign)
                return !1;
            var e = new String("abc");
            if (e[5] = "de", "5" === Object.getOwnPropertyNames(e)[0])
                return !1;
            for (var t = {}, r = 0; r < 10; r++)
                t["_" + String.fromCharCode(r)] = r;
            if ("0123456789" !== Object.getOwnPropertyNames(t).map((function (e) { return t[e]; })).join(""))
                return !1;
            var n = {};
            return "abcdefghijklmnopqrst".split("").forEach((function (e) { n[e] = e; })), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, n)).join("");
        }
        catch (o) {
            return !1;
        } }() ? Object.assign : function (e, i) { for (var a, s, c = o(e), p = 1; p < arguments.length; p++) {
            for (var l in a = Object(arguments[p]))
                r.call(a, l) && (c[l] = a[l]);
            if (t) {
                s = t(a);
                for (var u = 0; u < s.length; u++)
                    n.call(a, s[u]) && (c[s[u]] = a[s[u]]);
            }
        } return c; }; }, 945: (e, t, r) => { r(767); var n = r(359), o = 60103; if (60107, "function" == typeof Symbol && Symbol.for) {
            var i = Symbol.for;
            o = i("react.element"), i("react.fragment");
        } var a = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, s = Object.prototype.hasOwnProperty, c = { key: !0, ref: !0, __self: !0, __source: !0 }; function p(e, t, r) { var n, i = {}, p = null, l = null; for (n in void 0 !== r && (p = "" + r), void 0 !== t.key && (p = "" + t.key), void 0 !== t.ref && (l = t.ref), t)
            s.call(t, n) && !c.hasOwnProperty(n) && (i[n] = t[n]); if (e && e.defaultProps)
            for (n in t = e.defaultProps)
                void 0 === i[n] && (i[n] = t[n]); return { $$typeof: o, type: e, key: p, ref: l, props: i, _owner: a.current }; } t.jsx = p, t.jsxs = p; }, 637: (e, t, r) => { e.exports = r(945); }, 941: e => { var t = []; function r(e) { for (var r = -1, n = 0; n < t.length; n++)
            if (t[n].identifier === e) {
                r = n;
                break;
            } return r; } function n(e, n) { for (var i = {}, a = [], s = 0; s < e.length; s++) {
            var c = e[s], p = n.base ? c[0] + n.base : c[0], l = i[p] || 0, u = "".concat(p, " ").concat(l);
            i[p] = l + 1;
            var f = r(u), d = { css: c[1], media: c[2], sourceMap: c[3], supports: c[4], layer: c[5] };
            if (-1 !== f)
                t[f].references++, t[f].updater(d);
            else {
                var h = o(d, n);
                n.byIndex = s, t.splice(s, 0, { identifier: u, updater: h, references: 1 });
            }
            a.push(u);
        } return a; } function o(e, t) { var r = t.domAPI(t); r.update(e); return function (t) { if (t) {
            if (t.css === e.css && t.media === e.media && t.sourceMap === e.sourceMap && t.supports === e.supports && t.layer === e.layer)
                return;
            r.update(e = t);
        }
        else
            r.remove(); }; } e.exports = function (e, o) { var i = n(e = e || [], o = o || {}); return function (e) { e = e || []; for (var a = 0; a < i.length; a++) {
            var s = r(i[a]);
            t[s].references--;
        } for (var c = n(e, o), p = 0; p < i.length; p++) {
            var l = r(i[p]);
            0 === t[l].references && (t[l].updater(), t.splice(l, 1));
        } i = c; }; }; }, 765: e => { var t = {}; e.exports = function (e, r) { var n = function (e) { if (void 0 === t[e]) {
            var r = document.querySelector(e);
            if (window.HTMLIFrameElement && r instanceof window.HTMLIFrameElement)
                try {
                    r = r.contentDocument.head;
                }
                catch (n) {
                    r = null;
                }
            t[e] = r;
        } return t[e]; }(e); if (!n)
            throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid."); n.appendChild(r); }; }, 801: e => { e.exports = function (e) { var t = document.createElement("style"); return e.setAttributes(t, e.attributes), e.insert(t, e.options), t; }; }, 24: (e, t, r) => { e.exports = function (e) { var t = r.nc; t && e.setAttribute("nonce", t); }; }, 836: e => { e.exports = function (e) { var t = e.insertStyleElement(e); return { update: function (r) { !function (e, t, r) { var n = ""; r.supports && (n += "@supports (".concat(r.supports, ") {")), r.media && (n += "@media ".concat(r.media, " {")); var o = void 0 !== r.layer; o && (n += "@layer".concat(r.layer.length > 0 ? " ".concat(r.layer) : "", " {")), n += r.css, o && (n += "}"), r.media && (n += "}"), r.supports && (n += "}"); var i = r.sourceMap; i && "undefined" != typeof btoa && (n += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i)))), " */")), t.styleTagTransform(n, e, t.options); }(t, e, r); }, remove: function () { !function (e) { if (null === e.parentNode)
                return !1; e.parentNode.removeChild(e); }(t); } }; }; }, 938: e => { e.exports = function (e, t) { if (t.styleSheet)
            t.styleSheet.cssText = e;
        else {
            for (; t.firstChild;)
                t.removeChild(t.firstChild);
            t.appendChild(document.createTextNode(e));
        } }; }, 995: e => { e.exports = t; }, 359: t => { t.exports = e; } }, n = {};
    function o(e) { var t = n[e]; if (void 0 !== t)
        return t.exports; var i = n[e] = { id: e, exports: {} }; return r[e](i, i.exports, o), i.exports; }
    o.n = e => { var t = e && e.__esModule ? () => e.default : () => e; return o.d(t, { a: t }), t; }, o.d = (e, t) => { for (var r in t)
        o.o(t, r) && !o.o(e, r) && Object.defineProperty(e, r, { enumerable: !0, get: t[r] }); }, o.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t), o.r = e => { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 }); };
    var i = {};
    return (() => { o.r(i), o.d(i, { Cue: () => n, Prompt: () => l }); var e = o(637), t = o(359); const r = "rp-prompt"; class n extends t.PureComponent {
        constructor(e) { super(e), this.state = { lines: null }; }
        componentDidMount() { if (!this.props.children)
            return; this.ref.normalize(); const e = []; for (const t of Array.from(this.ref.childNodes)) {
            if (!a(t))
                continue;
            const r = t.wholeText.split(" ");
            let n = r.shift(), o = n;
            t.replaceData(0, t.wholeText.length, o);
            let i = this.ref.getBoundingClientRect().height;
            for (const a of r) {
                t.replaceData(0, t.wholeText.length, `${o} ${a}`);
                const r = this.ref.getBoundingClientRect().height;
                r !== i ? (i = r, e.push(n), n = a) : n += ` ${a}`, o += ` ${a}`;
            }
            e.push(n);
        } this.setState({ lines: e }); }
        render() { if (!this.props.children)
            return " | "; const n = [`${r}-cue`], o = [`${r}-line`]; return this.props.active && (n.push("active"), o.push("active")), (0, e.jsxs)(t.Fragment, { children: [(0, e.jsx)("span", Object.assign({ className: n.join(" ") }, { children: this.props.on }), void 0), this.state.lines ? this.state.lines.map(((t, r) => (0, e.jsx)("div", Object.assign({ className: o.join(" ") }, { children: t }), r))) : (0, e.jsx)("div", Object.assign({ className: `${r}-measure`, ref: e => this.ref = e }, { children: this.props.children }), void 0)] }, void 0); }
    } function a(e) { return e.nodeType === e.TEXT_NODE; } var s = o(995), c = function (e, t) { var r = {}; for (var n in e)
        Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (r[n] = e[n]); if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
        var o = 0;
        for (n = Object.getOwnPropertySymbols(e); o < n.length; o++)
            t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (r[n[o]] = e[n[o]]);
    } return r; }; const { dragHelperReact: p } = s.Utils.interactivity; function l(r) { const { script: n } = (0, s.usePlayer)(), o = (0, t.useRef)(), { children: i } = r, a = c(r, ["children"]), [l, u] = (0, t.useState)(t.Children.toArray(i).map((e => e.props.children && n.markerNumberOf(e.props.on) <= n.markerIndex)).lastIndexOf(!0)); (0, t.useEffect)((() => { o.current.style.left || Object.assign(o.current.style, { left: "0%", top: "0%" }), n.hub.on("markerupdate", (() => { u(t.Children.toArray(i).map((e => e.props.children && n.markerNumberOf(e.props.on) <= n.markerIndex)).lastIndexOf(!0)); })); })); const f = (0, t.useMemo)((() => { let e, t; return p(((r, n) => { const i = function (e) { if (void 0 !== e.offsetLeft && void 0 !== e.offsetTop)
        return { left: e.offsetLeft, top: e.offsetTop, width: e.offsetParent.getBoundingClientRect().width, height: e.offsetParent.getBoundingClientRect().height }; const t = e.getBoundingClientRect(); let r = e; for (; r = r.parentNode;) {
        if (!["absolute", "relative"].includes(getComputedStyle(r).position))
            continue;
        const e = r.getBoundingClientRect();
        return { left: t.left - e.left, top: t.top - e.top, width: e.width, height: e.height };
    } return { left: t.left, top: t.top, width: innerWidth, height: innerHeight }; }(o.current), a = i.left + n.x - e, s = i.top + n.y - t, c = a / i.width * 100, p = s / i.height * 100; e = n.x, t = n.y, Object.assign(o.current.style, { left: `${c}%`, top: `${p}%` }); }), ((r, n) => { e = n.x, t = n.y; })); }), []); return (0, e.jsx)("div", Object.assign({ className: "rp-prompt" }, a, f, { ref: o }, { children: t.Children.map(r.children, ((e, r) => t.cloneElement(e, { active: l === r }))) }), void 0); } var u = o(941), f = o.n(u), d = o(836), h = o.n(d), m = o(765), v = o.n(m), y = o(24), g = o.n(y), b = o(801), x = o.n(b), O = o(938), j = o.n(O), w = o(153), P = {}; P.styleTagTransform = j(), P.setAttributes = g(), P.insert = v().bind(null, "head"), P.domAPI = h(), P.insertStyleElement = x(); f()(w.Z, P); w.Z && w.Z.locals && w.Z.locals; })(), i;
})(); }));


/***/ }),

/***/ "./node_modules/rp-recording/dist/rp-recording.js":
/*!********************************************************!*\
  !*** ./node_modules/rp-recording/dist/rp-recording.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


(function webpackUniversalModuleDefinition(root, factory) {
    if (true)
        module.exports = factory(__webpack_require__(/*! react */ "react"), __webpack_require__(/*! liqvid */ "liqvid"));
    else {}
})(self, function (__WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_liqvid__) {
    return (() => {
        "use strict";
        var __webpack_modules__ = ({
            "./node_modules/.pnpm/css-loader@6.7.1_webpack@5.70.0/node_modules/css-loader/dist/cjs.js!./style.css": ((module, __webpack_exports__, __nested_webpack_require_833__) => {
                __nested_webpack_require_833__.r(__webpack_exports__);
                __nested_webpack_require_833__.d(__webpack_exports__, {
                    "default": () => (__WEBPACK_DEFAULT_EXPORT__)
                });
                var _node_modules_pnpm_css_loader_6_7_1_webpack_5_70_0_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_833__("./node_modules/.pnpm/css-loader@6.7.1_webpack@5.70.0/node_modules/css-loader/dist/runtime/noSourceMaps.js");
                var _node_modules_pnpm_css_loader_6_7_1_webpack_5_70_0_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = __nested_webpack_require_833__.n(_node_modules_pnpm_css_loader_6_7_1_webpack_5_70_0_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
                var _node_modules_pnpm_css_loader_6_7_1_webpack_5_70_0_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_833__("./node_modules/.pnpm/css-loader@6.7.1_webpack@5.70.0/node_modules/css-loader/dist/runtime/api.js");
                var _node_modules_pnpm_css_loader_6_7_1_webpack_5_70_0_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = __nested_webpack_require_833__.n(_node_modules_pnpm_css_loader_6_7_1_webpack_5_70_0_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
                var ___CSS_LOADER_EXPORT___ = _node_modules_pnpm_css_loader_6_7_1_webpack_5_70_0_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_pnpm_css_loader_6_7_1_webpack_5_70_0_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
                ___CSS_LOADER_EXPORT___.push([module.id, "@media (any-hover:none){#rp-recording{display:none}}#rp-recording{position:relative}#rp-recording-dialog{background-color:#2a2a2a;border-radius:2px 2px 0 0;box-shadow:2px -2px 2px 2px rgba(0,0,0,0.3);box-sizing:border-box;color:#fff;font-family:sans-serif;line-height:1;position:absolute;bottom:calc(var(--rp-controls-height) - 2px);right:0;z-index:3;max-height:20rem;overflow-y:auto;padding:.5em;width:23rem}#rp-recording-dialog > h3{color:#1a69b5;margin:.5em 0 .2em}#rp-recording-configuration{border-spacing:0 1em;width:100%}#rp-recording-configuration > tbody > tr > th,#rp-recording-configuration > tbody > tr > td{vertical-align:top}#rp-recording-configuration > tbody > tr > th{text-align:right}#rp-recording-configuration > tbody > tr td{padding-left:1em}#rp-recording-configuration > tbody > tr > th[colspan=\"2\"]{color:#1a69b5;text-align:center}#rp-recording-configuration > tbody > tr > th:not([colspan=\"2\"]){font-size:1em;font-weight:normal;padding-right:.2em;text-align:right}.recorder-plugin{display:inline-block;font-family:sans-serif;font-size:.8em;margin:0 .25em;text-align:center}.recorder-plugin-icon{background-color:#222;border-radius:5px;cursor:pointer;display:block}.recorder-plugin-icon.active{background-color:#f00}.recorder-plugin-icon text{user-select:none;-webkit-user-select:none}.recordings{font-size:1.5em;list-style-position:inside}.recording-results{border-collapse:collapse;font-size:.6em;width:100%}.recording-results > tbody > tr{background-color:#333}.recording-results > tbody > tr > th{padding:6px;width:36px}.recording-results > tbody > tr > td{padding:6px}.recording-results textarea{width:100%}.recording-results :link{background-color:#1a69b5;box-sizing:border-box;color:#fff !important;display:block;padding:.5em;text-align:center;text-decoration:none;width:100%}.shortcut{font-family:monospace;font-size:1em;width:18ch}", ""]);
                const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);
            }),
            "./style.css": ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_4670__) => {
                __nested_webpack_require_4670__.r(__webpack_exports__);
                __nested_webpack_require_4670__.d(__webpack_exports__, {
                    "default": () => (__WEBPACK_DEFAULT_EXPORT__)
                });
                var _node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_4670__("./node_modules/.pnpm/style-loader@3.3.1_webpack@5.70.0/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
                var _node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = __nested_webpack_require_4670__.n(_node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
                var _node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_4670__("./node_modules/.pnpm/style-loader@3.3.1_webpack@5.70.0/node_modules/style-loader/dist/runtime/styleDomAPI.js");
                var _node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = __nested_webpack_require_4670__.n(_node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
                var _node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_4670__("./node_modules/.pnpm/style-loader@3.3.1_webpack@5.70.0/node_modules/style-loader/dist/runtime/insertBySelector.js");
                var _node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = __nested_webpack_require_4670__.n(_node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
                var _node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_4670__("./node_modules/.pnpm/style-loader@3.3.1_webpack@5.70.0/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
                var _node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = __nested_webpack_require_4670__.n(_node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
                var _node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_4670__("./node_modules/.pnpm/style-loader@3.3.1_webpack@5.70.0/node_modules/style-loader/dist/runtime/insertStyleElement.js");
                var _node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = __nested_webpack_require_4670__.n(_node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
                var _node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_4670__("./node_modules/.pnpm/style-loader@3.3.1_webpack@5.70.0/node_modules/style-loader/dist/runtime/styleTagTransform.js");
                var _node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = __nested_webpack_require_4670__.n(_node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
                var _node_modules_pnpm_css_loader_6_7_1_webpack_5_70_0_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_4670__("./node_modules/.pnpm/css-loader@6.7.1_webpack@5.70.0/node_modules/css-loader/dist/cjs.js!./style.css");
                var options = {};
                options.styleTagTransform = (_node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
                options.setAttributes = (_node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
                options.insert = _node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
                options.domAPI = (_node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
                options.insertStyleElement = (_node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());
                var update = _node_modules_pnpm_style_loader_3_3_1_webpack_5_70_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_pnpm_css_loader_6_7_1_webpack_5_70_0_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);
                const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_pnpm_css_loader_6_7_1_webpack_5_70_0_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_pnpm_css_loader_6_7_1_webpack_5_70_0_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_pnpm_css_loader_6_7_1_webpack_5_70_0_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);
            }),
            "./node_modules/.pnpm/style-loader@3.3.1_webpack@5.70.0/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js": ((module) => {
                var stylesInDOM = [];
                function getIndexByIdentifier(identifier) {
                    var result = -1;
                    for (var i = 0; i < stylesInDOM.length; i++) {
                        if (stylesInDOM[i].identifier === identifier) {
                            result = i;
                            break;
                        }
                    }
                    return result;
                }
                function modulesToDom(list, options) {
                    var idCountMap = {};
                    var identifiers = [];
                    for (var i = 0; i < list.length; i++) {
                        var item = list[i];
                        var id = options.base ? item[0] + options.base : item[0];
                        var count = idCountMap[id] || 0;
                        var identifier = "".concat(id, " ").concat(count);
                        idCountMap[id] = count + 1;
                        var indexByIdentifier = getIndexByIdentifier(identifier);
                        var obj = {
                            css: item[1],
                            media: item[2],
                            sourceMap: item[3],
                            supports: item[4],
                            layer: item[5]
                        };
                        if (indexByIdentifier !== -1) {
                            stylesInDOM[indexByIdentifier].references++;
                            stylesInDOM[indexByIdentifier].updater(obj);
                        }
                        else {
                            var updater = addElementStyle(obj, options);
                            options.byIndex = i;
                            stylesInDOM.splice(i, 0, {
                                identifier: identifier,
                                updater: updater,
                                references: 1
                            });
                        }
                        identifiers.push(identifier);
                    }
                    return identifiers;
                }
                function addElementStyle(obj, options) {
                    var api = options.domAPI(options);
                    api.update(obj);
                    var updater = function updater(newObj) {
                        if (newObj) {
                            if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
                                return;
                            }
                            api.update(obj = newObj);
                        }
                        else {
                            api.remove();
                        }
                    };
                    return updater;
                }
                module.exports = function (list, options) {
                    options = options || {};
                    list = list || [];
                    var lastIdentifiers = modulesToDom(list, options);
                    return function update(newList) {
                        newList = newList || [];
                        for (var i = 0; i < lastIdentifiers.length; i++) {
                            var identifier = lastIdentifiers[i];
                            var index = getIndexByIdentifier(identifier);
                            stylesInDOM[index].references--;
                        }
                        var newLastIdentifiers = modulesToDom(newList, options);
                        for (var _i = 0; _i < lastIdentifiers.length; _i++) {
                            var _identifier = lastIdentifiers[_i];
                            var _index = getIndexByIdentifier(_identifier);
                            if (stylesInDOM[_index].references === 0) {
                                stylesInDOM[_index].updater();
                                stylesInDOM.splice(_index, 1);
                            }
                        }
                        lastIdentifiers = newLastIdentifiers;
                    };
                };
            }),
            "./node_modules/.pnpm/style-loader@3.3.1_webpack@5.70.0/node_modules/style-loader/dist/runtime/insertBySelector.js": ((module) => {
                var memo = {};
                function getTarget(target) {
                    if (typeof memo[target] === "undefined") {
                        var styleTarget = document.querySelector(target);
                        if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
                            try {
                                styleTarget = styleTarget.contentDocument.head;
                            }
                            catch (e) {
                                styleTarget = null;
                            }
                        }
                        memo[target] = styleTarget;
                    }
                    return memo[target];
                }
                function insertBySelector(insert, style) {
                    var target = getTarget(insert);
                    if (!target) {
                        throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
                    }
                    target.appendChild(style);
                }
                module.exports = insertBySelector;
            }),
            "./node_modules/.pnpm/style-loader@3.3.1_webpack@5.70.0/node_modules/style-loader/dist/runtime/insertStyleElement.js": ((module) => {
                function insertStyleElement(options) {
                    var element = document.createElement("style");
                    options.setAttributes(element, options.attributes);
                    options.insert(element, options.options);
                    return element;
                }
                module.exports = insertStyleElement;
            }),
            "./node_modules/.pnpm/style-loader@3.3.1_webpack@5.70.0/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js": ((module, __unused_webpack_exports, __nested_webpack_require_17315__) => {
                function setAttributesWithoutAttributes(styleElement) {
                    var nonce =  true ? __nested_webpack_require_17315__.nc : 0;
                    if (nonce) {
                        styleElement.setAttribute("nonce", nonce);
                    }
                }
                module.exports = setAttributesWithoutAttributes;
            }),
            "./node_modules/.pnpm/style-loader@3.3.1_webpack@5.70.0/node_modules/style-loader/dist/runtime/styleDomAPI.js": ((module) => {
                function apply(styleElement, options, obj) {
                    var css = "";
                    if (obj.supports) {
                        css += "@supports (".concat(obj.supports, ") {");
                    }
                    if (obj.media) {
                        css += "@media ".concat(obj.media, " {");
                    }
                    var needLayer = typeof obj.layer !== "undefined";
                    if (needLayer) {
                        css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
                    }
                    css += obj.css;
                    if (needLayer) {
                        css += "}";
                    }
                    if (obj.media) {
                        css += "}";
                    }
                    if (obj.supports) {
                        css += "}";
                    }
                    var sourceMap = obj.sourceMap;
                    if (sourceMap && typeof btoa !== "undefined") {
                        css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
                    }
                    options.styleTagTransform(css, styleElement, options.options);
                }
                function removeStyleElement(styleElement) {
                    if (styleElement.parentNode === null) {
                        return false;
                    }
                    styleElement.parentNode.removeChild(styleElement);
                }
                function domAPI(options) {
                    var styleElement = options.insertStyleElement(options);
                    return {
                        update: function update(obj) {
                            apply(styleElement, options, obj);
                        },
                        remove: function remove() {
                            removeStyleElement(styleElement);
                        }
                    };
                }
                module.exports = domAPI;
            }),
            "./node_modules/.pnpm/style-loader@3.3.1_webpack@5.70.0/node_modules/style-loader/dist/runtime/styleTagTransform.js": ((module) => {
                function styleTagTransform(css, styleElement) {
                    if (styleElement.styleSheet) {
                        styleElement.styleSheet.cssText = css;
                    }
                    else {
                        while (styleElement.firstChild) {
                            styleElement.removeChild(styleElement.firstChild);
                        }
                        styleElement.appendChild(document.createTextNode(css));
                    }
                }
                module.exports = styleTagTransform;
            }),
            "./node_modules/.pnpm/css-loader@6.7.1_webpack@5.70.0/node_modules/css-loader/dist/runtime/api.js": ((module) => {
                module.exports = function (cssWithMappingToString) {
                    var list = [];
                    list.toString = function toString() {
                        return this.map(function (item) {
                            var content = "";
                            var needLayer = typeof item[5] !== "undefined";
                            if (item[4]) {
                                content += "@supports (".concat(item[4], ") {");
                            }
                            if (item[2]) {
                                content += "@media ".concat(item[2], " {");
                            }
                            if (needLayer) {
                                content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
                            }
                            content += cssWithMappingToString(item);
                            if (needLayer) {
                                content += "}";
                            }
                            if (item[2]) {
                                content += "}";
                            }
                            if (item[4]) {
                                content += "}";
                            }
                            return content;
                        }).join("");
                    };
                    list.i = function i(modules, media, dedupe, supports, layer) {
                        if (typeof modules === "string") {
                            modules = [[null, modules, undefined]];
                        }
                        var alreadyImportedModules = {};
                        if (dedupe) {
                            for (var k = 0; k < this.length; k++) {
                                var id = this[k][0];
                                if (id != null) {
                                    alreadyImportedModules[id] = true;
                                }
                            }
                        }
                        for (var _k = 0; _k < modules.length; _k++) {
                            var item = [].concat(modules[_k]);
                            if (dedupe && alreadyImportedModules[item[0]]) {
                                continue;
                            }
                            if (typeof layer !== "undefined") {
                                if (typeof item[5] === "undefined") {
                                    item[5] = layer;
                                }
                                else {
                                    item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
                                    item[5] = layer;
                                }
                            }
                            if (media) {
                                if (!item[2]) {
                                    item[2] = media;
                                }
                                else {
                                    item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
                                    item[2] = media;
                                }
                            }
                            if (supports) {
                                if (!item[4]) {
                                    item[4] = "".concat(supports);
                                }
                                else {
                                    item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
                                    item[4] = supports;
                                }
                            }
                            list.push(item);
                        }
                    };
                    return list;
                };
            }),
            "./node_modules/.pnpm/css-loader@6.7.1_webpack@5.70.0/node_modules/css-loader/dist/runtime/noSourceMaps.js": ((module) => {
                module.exports = function (i) {
                    return i[1];
                };
            }),
            "./node_modules/.pnpm/events@3.3.0/node_modules/events/events.js": ((module) => {
                var R = typeof Reflect === 'object' ? Reflect : null;
                var ReflectApply = R && typeof R.apply === 'function'
                    ? R.apply
                    : function ReflectApply(target, receiver, args) {
                        return Function.prototype.apply.call(target, receiver, args);
                    };
                var ReflectOwnKeys;
                if (R && typeof R.ownKeys === 'function') {
                    ReflectOwnKeys = R.ownKeys;
                }
                else if (Object.getOwnPropertySymbols) {
                    ReflectOwnKeys = function ReflectOwnKeys(target) {
                        return Object.getOwnPropertyNames(target)
                            .concat(Object.getOwnPropertySymbols(target));
                    };
                }
                else {
                    ReflectOwnKeys = function ReflectOwnKeys(target) {
                        return Object.getOwnPropertyNames(target);
                    };
                }
                function ProcessEmitWarning(warning) {
                    if (console && console.warn)
                        console.warn(warning);
                }
                var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
                    return value !== value;
                };
                function EventEmitter() {
                    EventEmitter.init.call(this);
                }
                module.exports = EventEmitter;
                module.exports.once = once;
                EventEmitter.EventEmitter = EventEmitter;
                EventEmitter.prototype._events = undefined;
                EventEmitter.prototype._eventsCount = 0;
                EventEmitter.prototype._maxListeners = undefined;
                var defaultMaxListeners = 10;
                function checkListener(listener) {
                    if (typeof listener !== 'function') {
                        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
                    }
                }
                Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
                    enumerable: true,
                    get: function () {
                        return defaultMaxListeners;
                    },
                    set: function (arg) {
                        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
                            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
                        }
                        defaultMaxListeners = arg;
                    }
                });
                EventEmitter.init = function () {
                    if (this._events === undefined ||
                        this._events === Object.getPrototypeOf(this)._events) {
                        this._events = Object.create(null);
                        this._eventsCount = 0;
                    }
                    this._maxListeners = this._maxListeners || undefined;
                };
                EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
                    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
                        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
                    }
                    this._maxListeners = n;
                    return this;
                };
                function _getMaxListeners(that) {
                    if (that._maxListeners === undefined)
                        return EventEmitter.defaultMaxListeners;
                    return that._maxListeners;
                }
                EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
                    return _getMaxListeners(this);
                };
                EventEmitter.prototype.emit = function emit(type) {
                    var args = [];
                    for (var i = 1; i < arguments.length; i++)
                        args.push(arguments[i]);
                    var doError = (type === 'error');
                    var events = this._events;
                    if (events !== undefined)
                        doError = (doError && events.error === undefined);
                    else if (!doError)
                        return false;
                    if (doError) {
                        var er;
                        if (args.length > 0)
                            er = args[0];
                        if (er instanceof Error) {
                            throw er;
                        }
                        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
                        err.context = er;
                        throw err;
                    }
                    var handler = events[type];
                    if (handler === undefined)
                        return false;
                    if (typeof handler === 'function') {
                        ReflectApply(handler, this, args);
                    }
                    else {
                        var len = handler.length;
                        var listeners = arrayClone(handler, len);
                        for (var i = 0; i < len; ++i)
                            ReflectApply(listeners[i], this, args);
                    }
                    return true;
                };
                function _addListener(target, type, listener, prepend) {
                    var m;
                    var events;
                    var existing;
                    checkListener(listener);
                    events = target._events;
                    if (events === undefined) {
                        events = target._events = Object.create(null);
                        target._eventsCount = 0;
                    }
                    else {
                        if (events.newListener !== undefined) {
                            target.emit('newListener', type, listener.listener ? listener.listener : listener);
                            events = target._events;
                        }
                        existing = events[type];
                    }
                    if (existing === undefined) {
                        existing = events[type] = listener;
                        ++target._eventsCount;
                    }
                    else {
                        if (typeof existing === 'function') {
                            existing = events[type] =
                                prepend ? [listener, existing] : [existing, listener];
                        }
                        else if (prepend) {
                            existing.unshift(listener);
                        }
                        else {
                            existing.push(listener);
                        }
                        m = _getMaxListeners(target);
                        if (m > 0 && existing.length > m && !existing.warned) {
                            existing.warned = true;
                            var w = new Error('Possible EventEmitter memory leak detected. ' +
                                existing.length + ' ' + String(type) + ' listeners ' +
                                'added. Use emitter.setMaxListeners() to ' +
                                'increase limit');
                            w.name = 'MaxListenersExceededWarning';
                            w.emitter = target;
                            w.type = type;
                            w.count = existing.length;
                            ProcessEmitWarning(w);
                        }
                    }
                    return target;
                }
                EventEmitter.prototype.addListener = function addListener(type, listener) {
                    return _addListener(this, type, listener, false);
                };
                EventEmitter.prototype.on = EventEmitter.prototype.addListener;
                EventEmitter.prototype.prependListener =
                    function prependListener(type, listener) {
                        return _addListener(this, type, listener, true);
                    };
                function onceWrapper() {
                    if (!this.fired) {
                        this.target.removeListener(this.type, this.wrapFn);
                        this.fired = true;
                        if (arguments.length === 0)
                            return this.listener.call(this.target);
                        return this.listener.apply(this.target, arguments);
                    }
                }
                function _onceWrap(target, type, listener) {
                    var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
                    var wrapped = onceWrapper.bind(state);
                    wrapped.listener = listener;
                    state.wrapFn = wrapped;
                    return wrapped;
                }
                EventEmitter.prototype.once = function once(type, listener) {
                    checkListener(listener);
                    this.on(type, _onceWrap(this, type, listener));
                    return this;
                };
                EventEmitter.prototype.prependOnceListener =
                    function prependOnceListener(type, listener) {
                        checkListener(listener);
                        this.prependListener(type, _onceWrap(this, type, listener));
                        return this;
                    };
                EventEmitter.prototype.removeListener =
                    function removeListener(type, listener) {
                        var list, events, position, i, originalListener;
                        checkListener(listener);
                        events = this._events;
                        if (events === undefined)
                            return this;
                        list = events[type];
                        if (list === undefined)
                            return this;
                        if (list === listener || list.listener === listener) {
                            if (--this._eventsCount === 0)
                                this._events = Object.create(null);
                            else {
                                delete events[type];
                                if (events.removeListener)
                                    this.emit('removeListener', type, list.listener || listener);
                            }
                        }
                        else if (typeof list !== 'function') {
                            position = -1;
                            for (i = list.length - 1; i >= 0; i--) {
                                if (list[i] === listener || list[i].listener === listener) {
                                    originalListener = list[i].listener;
                                    position = i;
                                    break;
                                }
                            }
                            if (position < 0)
                                return this;
                            if (position === 0)
                                list.shift();
                            else {
                                spliceOne(list, position);
                            }
                            if (list.length === 1)
                                events[type] = list[0];
                            if (events.removeListener !== undefined)
                                this.emit('removeListener', type, originalListener || listener);
                        }
                        return this;
                    };
                EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
                EventEmitter.prototype.removeAllListeners =
                    function removeAllListeners(type) {
                        var listeners, events, i;
                        events = this._events;
                        if (events === undefined)
                            return this;
                        if (events.removeListener === undefined) {
                            if (arguments.length === 0) {
                                this._events = Object.create(null);
                                this._eventsCount = 0;
                            }
                            else if (events[type] !== undefined) {
                                if (--this._eventsCount === 0)
                                    this._events = Object.create(null);
                                else
                                    delete events[type];
                            }
                            return this;
                        }
                        if (arguments.length === 0) {
                            var keys = Object.keys(events);
                            var key;
                            for (i = 0; i < keys.length; ++i) {
                                key = keys[i];
                                if (key === 'removeListener')
                                    continue;
                                this.removeAllListeners(key);
                            }
                            this.removeAllListeners('removeListener');
                            this._events = Object.create(null);
                            this._eventsCount = 0;
                            return this;
                        }
                        listeners = events[type];
                        if (typeof listeners === 'function') {
                            this.removeListener(type, listeners);
                        }
                        else if (listeners !== undefined) {
                            for (i = listeners.length - 1; i >= 0; i--) {
                                this.removeListener(type, listeners[i]);
                            }
                        }
                        return this;
                    };
                function _listeners(target, type, unwrap) {
                    var events = target._events;
                    if (events === undefined)
                        return [];
                    var evlistener = events[type];
                    if (evlistener === undefined)
                        return [];
                    if (typeof evlistener === 'function')
                        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
                    return unwrap ?
                        unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
                }
                EventEmitter.prototype.listeners = function listeners(type) {
                    return _listeners(this, type, true);
                };
                EventEmitter.prototype.rawListeners = function rawListeners(type) {
                    return _listeners(this, type, false);
                };
                EventEmitter.listenerCount = function (emitter, type) {
                    if (typeof emitter.listenerCount === 'function') {
                        return emitter.listenerCount(type);
                    }
                    else {
                        return listenerCount.call(emitter, type);
                    }
                };
                EventEmitter.prototype.listenerCount = listenerCount;
                function listenerCount(type) {
                    var events = this._events;
                    if (events !== undefined) {
                        var evlistener = events[type];
                        if (typeof evlistener === 'function') {
                            return 1;
                        }
                        else if (evlistener !== undefined) {
                            return evlistener.length;
                        }
                    }
                    return 0;
                }
                EventEmitter.prototype.eventNames = function eventNames() {
                    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
                };
                function arrayClone(arr, n) {
                    var copy = new Array(n);
                    for (var i = 0; i < n; ++i)
                        copy[i] = arr[i];
                    return copy;
                }
                function spliceOne(list, index) {
                    for (; index + 1 < list.length; index++)
                        list[index] = list[index + 1];
                    list.pop();
                }
                function unwrapListeners(arr) {
                    var ret = new Array(arr.length);
                    for (var i = 0; i < ret.length; ++i) {
                        ret[i] = arr[i].listener || arr[i];
                    }
                    return ret;
                }
                function once(emitter, name) {
                    return new Promise(function (resolve, reject) {
                        function errorListener(err) {
                            emitter.removeListener(name, resolver);
                            reject(err);
                        }
                        function resolver() {
                            if (typeof emitter.removeListener === 'function') {
                                emitter.removeListener('error', errorListener);
                            }
                            resolve([].slice.call(arguments));
                        }
                        ;
                        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
                        if (name !== 'error') {
                            addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
                        }
                    });
                }
                function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
                    if (typeof emitter.on === 'function') {
                        eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
                    }
                }
                function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
                    if (typeof emitter.on === 'function') {
                        if (flags.once) {
                            emitter.once(name, listener);
                        }
                        else {
                            emitter.on(name, listener);
                        }
                    }
                    else if (typeof emitter.addEventListener === 'function') {
                        emitter.addEventListener(name, function wrapListener(arg) {
                            if (flags.once) {
                                emitter.removeEventListener(name, wrapListener);
                            }
                            listener(arg);
                        });
                    }
                    else {
                        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
                    }
                }
            }),
            "./src/Control.tsx": ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_44458__) => {
                __nested_webpack_require_44458__.r(__webpack_exports__);
                __nested_webpack_require_44458__.d(__webpack_exports__, {
                    "default": () => (Control)
                });
                var react__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_44458__("react");
                var react__WEBPACK_IMPORTED_MODULE_0___default = __nested_webpack_require_44458__.n(react__WEBPACK_IMPORTED_MODULE_0__);
                var liqvid__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_44458__("liqvid");
                var liqvid__WEBPACK_IMPORTED_MODULE_1___default = __nested_webpack_require_44458__.n(liqvid__WEBPACK_IMPORTED_MODULE_1__);
                var _recording_manager__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_44458__("./src/recording-manager.ts");
                var _RecordingRow__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_44458__("./src/RecordingRow.tsx");
                var _recorders_audio_recorder__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_44458__("./src/recorders/audio-recorder.tsx");
                var _recorders_marker_recorder__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_44458__("./src/recorders/marker-recorder.tsx");
                const { onClick } = liqvid__WEBPACK_IMPORTED_MODULE_1__.Utils.mobile;
                const { useForceUpdate } = liqvid__WEBPACK_IMPORTED_MODULE_1__.Utils.react;
                const mac = navigator.platform === "MacIntel";
                const bindings = {
                    start: mac ? "Alt+Meta+2" : "Ctrl+Alt+2",
                    pause: mac ? "Alt+Meta+3" : "Ctrl+Alt+3",
                    discard: mac ? "Alt+Meta+4" : "Ctrl+Alt+4"
                };
                function Control(props) {
                    var _a, _b;
                    const player = (0, liqvid__WEBPACK_IMPORTED_MODULE_1__.usePlayer)();
                    const [recordings, setRecordings] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
                    const forceUpdate = useForceUpdate();
                    const plugins = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
                        var _a;
                        return [
                            _recorders_audio_recorder__WEBPACK_IMPORTED_MODULE_4__.AudioRecorderPlugin, _recorders_marker_recorder__WEBPACK_IMPORTED_MODULE_5__.MarkerRecorderPlugin, ...((_a = props.plugins) !== null && _a !== void 0 ? _a : [])
                        ];
                    }, [props.plugins]);
                    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
                        player.hub.on("canvasClick", () => false);
                    }, []);
                    const manager = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
                    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
                        var _a;
                        manager.current = (_a = props.manager) !== null && _a !== void 0 ? _a : new _recording_manager__WEBPACK_IMPORTED_MODULE_2__["default"](player);
                        manager.current.hub.on("finalize", forceUpdate);
                        manager.current.hub.on("start", forceUpdate);
                        manager.current.hub.on("pause", forceUpdate);
                        manager.current.hub.on("resume", forceUpdate);
                    }, []);
                    const activePlugins = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
                    if (activePlugins.current === null) {
                        activePlugins.current = {};
                        for (const plugin of plugins) {
                            activePlugins.current[plugin.key] = false;
                        }
                    }
                    ;
                    const [pluginsByKey] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => {
                        const dict = {};
                        for (const plugin of plugins) {
                            dict[plugin.key] = plugin;
                        }
                        return dict;
                    });
                    const start = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
                        const { active, beginRecording, endRecording } = manager.current;
                        if (active) {
                            endRecording().then(recording => setRecordings(prev => prev.concat(recording)));
                        }
                        else {
                            beginRecording(plugins.filter(plugin => activePlugins.current[plugin.key]));
                        }
                    }, []);
                    const pause = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
                        const { active, paused, pauseRecording, resumeRecording } = manager.current;
                        if (active) {
                            paused ? resumeRecording() : pauseRecording();
                        }
                    }, []);
                    const discard = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
                        const { active, endRecording, hub } = manager.current;
                        if (active) {
                            const listeners = hub.listeners("finalize");
                            for (const listener of listeners) {
                                hub.off("finalize", listener);
                            }
                            try {
                                await endRecording();
                            }
                            catch (e) {
                                console.error(e);
                            }
                            for (const listener of listeners) {
                                hub.on("finalize", listener);
                            }
                            forceUpdate();
                        }
                    }, []);
                    const prevent = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => { }, []);
                    const callbacks = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({ start, pause, discard }), []);
                    const reducer = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((state, action) => {
                        player.keymap.unbind(state[action.command], callbacks[action.command]);
                        player.keymap.bind(action.seq, callbacks[action.command]);
                        return Object.assign(Object.assign({}, state), { [action.command]: action.seq });
                    }, []);
                    const [state, dispatch] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(reducer, bindings);
                    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
                        for (const key in state) {
                            player.keymap.bind(state[key], callbacks[key]);
                        }
                    }, []);
                    const onBlur = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {
                        e.preventDefault();
                        const name = e.currentTarget.getAttribute("name");
                        const seq = e.currentTarget.dataset.value;
                        dispatch({ command: name, seq });
                        player.resumeKeyCapture();
                    }, []);
                    const identifyKey = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {
                        e.preventDefault();
                        const seq = liqvid__WEBPACK_IMPORTED_MODULE_1__.KeyMap.identify(e);
                        e.currentTarget.dataset.value = seq;
                        e.currentTarget.value = fmtSeq(seq);
                    }, []);
                    const warn = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
                    warn.current = recordings.length > 0;
                    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
                        window.addEventListener("beforeunload", (e) => {
                            if (warn.current)
                                e.returnValue = "You have recording data";
                        });
                    }, []);
                    const [paneOpen, setPaneOpen] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
                    const togglePane = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => onClick(() => {
                        setPaneOpen(prev => !prev);
                    }), []);
                    const dialogStyle = {
                        display: paneOpen ? "block" : "none"
                    };
                    const setActive = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => onClick((e) => {
                        const key = e.currentTarget.dataset.plugin;
                        activePlugins.current[key] = !activePlugins.current[key];
                        forceUpdate();
                    }), []);
                    const commands = [
                        ["Start/Stop recording", "start"],
                        ["Pause recording", "pause"],
                        ["Discard recording", "discard"]
                    ];
                    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "rp-recording" }, react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "rp-recording-dialog", style: dialogStyle }, react__WEBPACK_IMPORTED_MODULE_0__.createElement("table", { id: "rp-recording-configuration" }, react__WEBPACK_IMPORTED_MODULE_0__.createElement("tbody", null, react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0__.createElement("th", { colSpan: 2 }, "Commands")), commands.map(([desc, key]) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", { key: key }, react__WEBPACK_IMPORTED_MODULE_0__.createElement("th", { scope: "row" }, desc), react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null, react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { onBlur: onBlur, readOnly: true, onFocus: player.suspendKeyCapture, onKeyDown: identifyKey, className: "shortcut", name: key, type: "text", value: fmtSeq(state[key]) }))))))), react__WEBPACK_IMPORTED_MODULE_0__.createElement("h3", null, "Configuration"), plugins.map((plugin, i) => {
                        const classNames = ["recorder-plugin-icon"];
                        if (activePlugins.current[plugin.key])
                            classNames.push("active");
                        const styles = {};
                        const enabled = typeof plugin.enabled === "undefined" || plugin.enabled();
                        if (!enabled) {
                            styles.opacity = 0.3;
                        }
                        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "recorder-plugin", key: plugin.key, title: plugin.title, style: styles }, react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", Object.assign({ className: classNames.join(" "), height: "36", width: "36", viewBox: "0 0 100 100", "data-plugin": plugin.key }, (enabled ? setActive : {})), react__WEBPACK_IMPORTED_MODULE_0__.createElement("rect", { height: "100", width: "100", fill: activePlugins.current[plugin.key] ? "red" : "#222" }), plugin.icon), react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { className: "recorder-plugin-name" }, plugin.name)));
                    }), react__WEBPACK_IMPORTED_MODULE_0__.createElement("h3", null, "Saved data"), react__WEBPACK_IMPORTED_MODULE_0__.createElement("ol", { className: "recordings" }, recordings.map((recording, i) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_RecordingRow__WEBPACK_IMPORTED_MODULE_3__["default"], { key: i, data: recording, pluginsByKey: pluginsByKey }))))), react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", Object.assign({ height: "36", width: "36", viewBox: "-50 -50 100 100" }, togglePane), react__WEBPACK_IMPORTED_MODULE_0__.createElement("circle", { cx: "0", cy: "0", r: "35", stroke: "white", strokeWidth: "5", fill: ((_a = manager.current) === null || _a === void 0 ? void 0 : _a.active) ? (((_b = manager.current) === null || _b === void 0 ? void 0 : _b.paused) ? "yellow" : "red") : "#666" }))));
                }
                function fmtSeq(str) {
                    if (navigator.platform !== "MacIntel")
                        return str;
                    if (str === void 0)
                        return str;
                    return str.split("+").map(k => {
                        if (k === "Ctrl")
                            return "^";
                        else if (k === "Alt")
                            return "⌥";
                        if (k === "Shift")
                            return "⇧";
                        if (k === "Meta")
                            return "⌘";
                        return k;
                    }).join("");
                }
            }),
            "./src/RecordingRow.tsx": ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_57472__) => {
                __nested_webpack_require_57472__.r(__webpack_exports__);
                __nested_webpack_require_57472__.d(__webpack_exports__, {
                    "default": () => (RecordingRow)
                });
                var react__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_57472__("react");
                var react__WEBPACK_IMPORTED_MODULE_0___default = __nested_webpack_require_57472__.n(react__WEBPACK_IMPORTED_MODULE_0__);
                var liqvid__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_57472__("liqvid");
                var liqvid__WEBPACK_IMPORTED_MODULE_1___default = __nested_webpack_require_57472__.n(liqvid__WEBPACK_IMPORTED_MODULE_1__);
                function RecordingRow(props) {
                    const player = (0, liqvid__WEBPACK_IMPORTED_MODULE_1__.usePlayer)();
                    const [name, setName] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)("Untitled");
                    const onChange = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {
                        setName(e.target.value);
                    }, []);
                    const { data, pluginsByKey } = props;
                    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { className: "recording-row" }, react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "recording-name", onBlur: player.resumeKeyCapture, onFocus: player.suspendKeyCapture, onChange: onChange, type: "text", value: name }), react__WEBPACK_IMPORTED_MODULE_0__.createElement("table", { className: "recording-results" }, react__WEBPACK_IMPORTED_MODULE_0__.createElement("tbody", null, Object.keys(data).map(pluginKey => {
                        const plugin = pluginsByKey[pluginKey], SaveComponent = plugin.saveComponent;
                        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", { key: pluginKey }, react__WEBPACK_IMPORTED_MODULE_0__.createElement("th", { key: "head", scope: "row" }, react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", { className: "recorder-plugin-icon", height: "36", width: "36", viewBox: "0 0 100 100" }, react__WEBPACK_IMPORTED_MODULE_0__.createElement("rect", { height: "100", width: "100", fill: "#222" }), plugin.icon)), react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", { key: "cell" }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(SaveComponent, { data: data[pluginKey] }))));
                    })))));
                }
            }),
            "./src/recorder.ts": ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_59980__) => {
                __nested_webpack_require_59980__.r(__webpack_exports__);
                __nested_webpack_require_59980__.d(__webpack_exports__, {
                    "Recorder": () => (Recorder)
                });
                class Recorder {
                    constructor() {
                        this.intransigent = false;
                    }
                    beginRecording() { }
                    pauseRecording() { }
                    resumeRecording() { }
                    endRecording() { }
                    finalizeRecording(data, startDelay = 0, stopDelay = 0) {
                        return data;
                    }
                    provide({ push, manager, player }) {
                        this.push = push;
                        this.manager = manager;
                        this.player = player;
                    }
                    getUpdate(data, lastDuration) { }
                }
            }),
            "./src/recorders/audio-recorder.tsx": ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_61038__) => {
                __nested_webpack_require_61038__.r(__webpack_exports__);
                __nested_webpack_require_61038__.d(__webpack_exports__, {
                    "AudioRecorder": () => (AudioRecorder),
                    "AudioRecorderPlugin": () => (AudioRecorderPlugin),
                    "AudioSaveComponent": () => (AudioSaveComponent)
                });
                var _types_MediaRecorder__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_61038__("./src/types/MediaRecorder.ts");
                var _types_MediaRecorder__WEBPACK_IMPORTED_MODULE_0___default = __nested_webpack_require_61038__.n(_types_MediaRecorder__WEBPACK_IMPORTED_MODULE_0__);
                var react__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_61038__("react");
                var react__WEBPACK_IMPORTED_MODULE_1___default = __nested_webpack_require_61038__.n(react__WEBPACK_IMPORTED_MODULE_1__);
                var _recorder__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_61038__("./src/recorder.ts");
                const icon = (react__WEBPACK_IMPORTED_MODULE_1__.createElement("g", { transform: "scale(0.126261032057) translate(164.575)" }, react__WEBPACK_IMPORTED_MODULE_1__.createElement("g", { stroke: "#FFF", transform: "translate(-140.62 -173.21)" }, react__WEBPACK_IMPORTED_MODULE_1__.createElement("path", { d: "m568.57 620.93c0 116.77-94.66 211.43-211.43 211.43s-211.43-94.66-211.43-211.43v-0.00001", fillOpacity: "0", transform: "translate(14.904)", strokeLinecap: "round", strokeWidth: "20" }), react__WEBPACK_IMPORTED_MODULE_1__.createElement("path", { d: "m568.57 620.93c0 116.77-94.66 211.43-211.43 211.43s-211.43-94.66-211.43-211.43v-0.00001", fillOpacity: "0", transform: "translate(14.904)", strokeLinecap: "round", strokeWidth: "40" }), react__WEBPACK_IMPORTED_MODULE_1__.createElement("path", { d: "m372.05 832.36v114.29", strokeWidth: "30", fill: "none" }), react__WEBPACK_IMPORTED_MODULE_1__.createElement("path", { fill: "#FFF", d: "m197.14 920.93c0.00001-18.935 59.482-34.286 132.86-34.286 73.375 0 132.86 15.35 132.86 34.286z", transform: "translate(42.047 34.286)", strokeLinecap: "round", strokeWidth: "20" }), react__WEBPACK_IMPORTED_MODULE_1__.createElement("path", { fill: "#FFF", strokeWidth: "21.455", strokeLinecap: "round", d: "m372.06 183.94c-77.019-0.00001-139.47 62.45-139.47 139.47v289.62c0 77.019 62.45 139.47 139.47 139.47 77.019 0 139.44-62.45 139.44-139.47v-289.62c0-77.02-62.42-139.47-139.44-139.47z" }))));
                class AudioRecorder extends _recorder__WEBPACK_IMPORTED_MODULE_2__.Recorder {
                    constructor() {
                        super();
                        this.intransigent = true;
                        let requestRecording = async function () {
                            window.removeEventListener("click", requestRecording);
                            try {
                                this.stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                            }
                            catch (e) {
                                console.log("no recording allowed");
                            }
                        }.bind(this);
                        window.addEventListener("click", requestRecording);
                    }
                    beginRecording() {
                        if (!this.stream)
                            throw new Error("Navigator stream not available");
                        this.promise = new Promise(async (resolve, reject) => {
                            this.mediaRecorder = new MediaRecorder(this.stream, { mimeType: "audio/webm" });
                            this.mediaRecorder.addEventListener("dataavailable", e => {
                                this.push(e.data);
                            });
                            let startDelay;
                            this.mediaRecorder.addEventListener("start", () => {
                                startDelay = this.manager.getTime();
                            });
                            this.mediaRecorder.addEventListener("stop", () => {
                                resolve([startDelay, this.manager.getTime()]);
                            });
                            this.mediaRecorder.start();
                        });
                    }
                    pauseRecording() {
                        this.mediaRecorder.pause();
                    }
                    resumeRecording() {
                        this.mediaRecorder.resume();
                    }
                    async endRecording() {
                        this.mediaRecorder.stop();
                        return this.promise;
                    }
                    finalizeRecording(chunks) {
                        return new Blob(chunks, { type: "audio/webm" });
                    }
                }
                function AudioSaveComponent(props) {
                    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, props.data ?
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("a", { download: "audio.webm", href: URL.createObjectURL(props.data) }, "Download Audio")
                        :
                            "Audio not yet available"));
                }
                const recorder = new AudioRecorder();
                const AudioRecorderPlugin = {
                    enabled: () => typeof recorder.stream !== "undefined",
                    icon,
                    key: "audio",
                    name: "Audio",
                    recorder,
                    saveComponent: AudioSaveComponent,
                    title: "Record audio"
                };
            }),
            "./src/recorders/marker-recorder.tsx": ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_66840__) => {
                __nested_webpack_require_66840__.r(__webpack_exports__);
                __nested_webpack_require_66840__.d(__webpack_exports__, {
                    "MarkerRecorder": () => (MarkerRecorder),
                    "MarkerRecorderPlugin": () => (MarkerRecorderPlugin),
                    "MarkerSaveComponent": () => (MarkerSaveComponent)
                });
                var react__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_66840__("react");
                var react__WEBPACK_IMPORTED_MODULE_0___default = __nested_webpack_require_66840__.n(react__WEBPACK_IMPORTED_MODULE_0__);
                var _recorder__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_66840__("./src/recorder.ts");
                var liqvid__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_66840__("liqvid");
                var liqvid__WEBPACK_IMPORTED_MODULE_2___default = __nested_webpack_require_66840__.n(liqvid__WEBPACK_IMPORTED_MODULE_2__);
                const { bind } = liqvid__WEBPACK_IMPORTED_MODULE_2__.Utils.misc, { onClick } = liqvid__WEBPACK_IMPORTED_MODULE_2__.Utils.mobile, { formatTimeMs } = liqvid__WEBPACK_IMPORTED_MODULE_2__.Utils.time;
                const icon = (react__WEBPACK_IMPORTED_MODULE_0__.createElement("text", { fill: "#FFF", fontFamily: "Helvetica", fontSize: "75", textAnchor: "middle", x: "50", y: "75" }, "M"));
                class MarkerRecorder extends _recorder__WEBPACK_IMPORTED_MODULE_1__.Recorder {
                    constructor() {
                        super();
                        bind(this, ["onMarkerUpdate"]);
                    }
                    beginRecording() {
                        this.lastTime = 0;
                        this.player.script.hub.on("markerupdate", this.onMarkerUpdate);
                    }
                    endRecording() {
                        this.player.script.hub.off("markerupdate", this.onMarkerUpdate);
                        this.captureMarker(this.player.script.markerName);
                    }
                    finalizeRecording(data, startDelay, stopDelay) {
                        data[0][1] -= startDelay;
                        data[data.length - 1][1] += stopDelay;
                        return data.map(cue => [cue[0], formatTimeMs(cue[1])]);
                    }
                    onMarkerUpdate(prevIndex) {
                        if (this.manager.paused)
                            return;
                        const { script } = this.player;
                        this.captureMarker(script.markers[prevIndex][0]);
                    }
                    captureMarker(markerName) {
                        const t = this.manager.getTime();
                        this.push([markerName, t - this.lastTime]);
                        this.lastTime = t;
                    }
                }
                function MarkerSaveComponent(props) {
                    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0__.createElement("textarea", { readOnly: true, value: format(props.data) })));
                }
                const MarkerRecorderPlugin = {
                    icon,
                    key: "markers",
                    name: "Markers",
                    recorder: new MarkerRecorder,
                    saveComponent: MarkerSaveComponent
                };
                function format(data) {
                    return JSON.stringify(data, null, 2).replace(/\[\s+"(.+?)",\s+"(.+?)"\s+\]/g, "[\"$1\", \"$2\"]");
                }
            }),
            "./src/recorders/replay-data-recorder.ts": ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_70508__) => {
                __nested_webpack_require_70508__.r(__webpack_exports__);
                __nested_webpack_require_70508__.d(__webpack_exports__, {
                    "ReplayDataRecorder": () => (ReplayDataRecorder)
                });
                var _recorder__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_70508__("./src/recorder.ts");
                var liqvid__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_70508__("liqvid");
                var liqvid__WEBPACK_IMPORTED_MODULE_1___default = __nested_webpack_require_70508__.n(liqvid__WEBPACK_IMPORTED_MODULE_1__);
                const { bind } = liqvid__WEBPACK_IMPORTED_MODULE_1__.Utils.misc, { onClick } = liqvid__WEBPACK_IMPORTED_MODULE_1__.Utils.mobile, { formatTimeMs, parseTime } = liqvid__WEBPACK_IMPORTED_MODULE_1__.Utils.time;
                class ReplayDataRecorder extends _recorder__WEBPACK_IMPORTED_MODULE_0__.Recorder {
                    constructor() {
                        super();
                        this.duration = 0;
                        this.index = -1;
                    }
                    beginRecording() {
                        this.duration = 0;
                        this.index = -1;
                    }
                    finalizeRecording(data, startDelay = 0, stopDelay = 0) {
                        for (let sum = 0, i = 0; i < data.length && sum < startDelay; ++i) {
                            const dur = data[i][0];
                            if (dur === 0) {
                                continue;
                            }
                            if (sum + dur >= startDelay) {
                                data[i][0] -= startDelay - sum;
                                break;
                            }
                            sum += dur;
                            data.splice(i, 1);
                            --i;
                        }
                        return data;
                    }
                    capture(time, data) {
                        if (time - this.duration < 0) {
                        }
                        this.push([time - this.duration, data]);
                        this.duration = time;
                    }
                }
                function formatNum(x) {
                    return parseFloat(x.toFixed(2));
                }
            }),
            "./src/recording-manager.ts": ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_72932__) => {
                __nested_webpack_require_72932__.r(__webpack_exports__);
                __nested_webpack_require_72932__.d(__webpack_exports__, {
                    "default": () => (RecordingManager)
                });
                var liqvid__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_72932__("liqvid");
                var liqvid__WEBPACK_IMPORTED_MODULE_0___default = __nested_webpack_require_72932__.n(liqvid__WEBPACK_IMPORTED_MODULE_0__);
                var events__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_72932__("./node_modules/.pnpm/events@3.3.0/node_modules/events/events.js");
                var events__WEBPACK_IMPORTED_MODULE_1___default = __nested_webpack_require_72932__.n(events__WEBPACK_IMPORTED_MODULE_1__);
                const { bind } = liqvid__WEBPACK_IMPORTED_MODULE_0__.Utils.misc;
                class RecordingManager {
                    constructor(player) {
                        this.player = player;
                        this.captureData = {};
                        this.hub = new events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
                        this.hub.setMaxListeners(0);
                        this.paused = false;
                        this.active = false;
                        bind(this, ["beginRecording", "endRecording", "pauseRecording", "resumeRecording", "capture"]);
                    }
                    beginRecording(plugins) {
                        this.plugins = plugins;
                        this.pauseTime = 0;
                        this.intransigentRecorder = void 0;
                        for (const plugin of this.plugins) {
                            const { recorder } = plugin;
                            recorder.provide({
                                push: (value) => this.capture(plugin.key, value),
                                manager: this,
                                player: this.player
                            });
                            this.captureData[plugin.key] = [];
                            if (recorder.intransigent) {
                                if (this.intransigentRecorder)
                                    throw new Error("At most one intransigent recorder is allowed");
                                this.intransigentRecorder = recorder;
                            }
                        }
                        this.baseTime = performance.now();
                        for (const plugin of this.plugins) {
                            plugin.recorder.beginRecording();
                        }
                        this.paused = false;
                        this.active = true;
                        this.hub.emit("start");
                    }
                    capture(key, value) {
                        this.captureData[key].push(value);
                        this.hub.emit("capture", key, value);
                    }
                    async endRecording() {
                        const endTime = this.getTime();
                        this.duration = endTime;
                        const recording = {};
                        let startDelay = 0, stopDelay = 0;
                        let promise;
                        if (this.intransigentRecorder) {
                            promise = this.intransigentRecorder.endRecording();
                        }
                        for (const plugin of this.plugins) {
                            if (plugin.recorder === this.intransigentRecorder)
                                continue;
                            plugin.recorder.endRecording();
                        }
                        if (this.intransigentRecorder) {
                            try {
                                const [startTime, stopTime] = await promise;
                                startDelay = startTime;
                                stopDelay = stopTime - endTime;
                                this.duration = this.duration + stopDelay - startDelay;
                            }
                            catch (e) {
                                startDelay = 0;
                                stopDelay = 0;
                                console.error(e);
                            }
                        }
                        for (const plugin of this.plugins) {
                            recording[plugin.key] = plugin.recorder.finalizeRecording(this.captureData[plugin.key], startDelay, stopDelay);
                            this.hub.emit("finalize", plugin.key, recording[plugin.key]);
                        }
                        this.active = false;
                        this.hub.emit("finalize", undefined, undefined);
                        return recording;
                    }
                    getTime() {
                        return performance.now() - this.baseTime - this.pauseTime;
                    }
                    pauseRecording() {
                        this.lastPauseTime = performance.now();
                        for (const plugin of this.plugins) {
                            plugin.recorder.pauseRecording();
                        }
                        this.paused = true;
                        this.hub.emit("pause");
                    }
                    setPlayer(player) {
                        this.player = player;
                    }
                    resumeRecording() {
                        this.pauseTime += performance.now() - this.lastPauseTime;
                        for (const plugin of this.plugins) {
                            plugin.recorder.resumeRecording();
                        }
                        this.paused = false;
                        this.hub.emit("resume");
                    }
                }
            }),
            "./src/types/MediaRecorder.ts": (() => {
            }),
            "liqvid": ((module) => {
                module.exports = __WEBPACK_EXTERNAL_MODULE_liqvid__;
            }),
            "react": ((module) => {
                module.exports = __WEBPACK_EXTERNAL_MODULE_react__;
            })
        });
        var __webpack_module_cache__ = {};
        function __nested_webpack_require_79086__(moduleId) {
            var cachedModule = __webpack_module_cache__[moduleId];
            if (cachedModule !== undefined) {
                return cachedModule.exports;
            }
            var module = __webpack_module_cache__[moduleId] = {
                id: moduleId,
                exports: {}
            };
            __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_79086__);
            return module.exports;
        }
        (() => {
            __nested_webpack_require_79086__.n = (module) => {
                var getter = module && module.__esModule ?
                    () => (module['default']) :
                    () => (module);
                __nested_webpack_require_79086__.d(getter, { a: getter });
                return getter;
            };
        })();
        (() => {
            __nested_webpack_require_79086__.d = (exports, definition) => {
                for (var key in definition) {
                    if (__nested_webpack_require_79086__.o(definition, key) && !__nested_webpack_require_79086__.o(exports, key)) {
                        Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
                    }
                }
            };
        })();
        (() => {
            __nested_webpack_require_79086__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop));
        })();
        (() => {
            __nested_webpack_require_79086__.r = (exports) => {
                if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
                    Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
                }
                Object.defineProperty(exports, '__esModule', { value: true });
            };
        })();
        var __webpack_exports__ = {};
        (() => {
            __nested_webpack_require_79086__.r(__webpack_exports__);
            __nested_webpack_require_79086__.d(__webpack_exports__, {
                "AudioRecorderPlugin": () => (_recorders_audio_recorder__WEBPACK_IMPORTED_MODULE_5__.AudioRecorderPlugin),
                "MarkerRecorderPlugin": () => (_recorders_marker_recorder__WEBPACK_IMPORTED_MODULE_6__.MarkerRecorderPlugin),
                "Recorder": () => (_recorder__WEBPACK_IMPORTED_MODULE_3__.Recorder),
                "RecordingControl": () => (_Control__WEBPACK_IMPORTED_MODULE_1__["default"]),
                "RecordingManager": () => (_recording_manager__WEBPACK_IMPORTED_MODULE_2__["default"]),
                "ReplayDataRecorder": () => (_recorders_replay_data_recorder__WEBPACK_IMPORTED_MODULE_4__.ReplayDataRecorder)
            });
            var _style_css__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_79086__("./style.css");
            var _Control__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_79086__("./src/Control.tsx");
            var _recording_manager__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_79086__("./src/recording-manager.ts");
            var _recorder__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_79086__("./src/recorder.ts");
            var _recorders_replay_data_recorder__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_79086__("./src/recorders/replay-data-recorder.ts");
            var _recorders_audio_recorder__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_79086__("./src/recorders/audio-recorder.tsx");
            var _recorders_marker_recorder__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_79086__("./src/recorders/marker-recorder.tsx");
        })();
        return __webpack_exports__;
    })();
});


/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler-tracing.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler-tracing.development.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {


if (true) {
    (function () {
        'use strict';
        var DEFAULT_THREAD_ID = 0;
        var interactionIDCounter = 0;
        var threadIDCounter = 0;
        exports.__interactionsRef = null;
        exports.__subscriberRef = null;
        {
            exports.__interactionsRef = {
                current: new Set()
            };
            exports.__subscriberRef = {
                current: null
            };
        }
        function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = new Set();
            try {
                return callback();
            }
            finally {
                exports.__interactionsRef.current = prevInteractions;
            }
        }
        function unstable_getCurrent() {
            {
                return exports.__interactionsRef.current;
            }
        }
        function unstable_getThreadID() {
            return ++threadIDCounter;
        }
        function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
                __count: 1,
                id: interactionIDCounter++,
                name: name,
                timestamp: timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
                if (subscriber !== null) {
                    subscriber.onInteractionTraced(interaction);
                }
            }
            finally {
                try {
                    if (subscriber !== null) {
                        subscriber.onWorkStarted(interactions, threadID);
                    }
                }
                finally {
                    try {
                        returnValue = callback();
                    }
                    finally {
                        exports.__interactionsRef.current = prevInteractions;
                        try {
                            if (subscriber !== null) {
                                subscriber.onWorkStopped(interactions, threadID);
                            }
                        }
                        finally {
                            interaction.__count--;
                            if (subscriber !== null && interaction.__count === 0) {
                                subscriber.onInteractionScheduledWorkCompleted(interaction);
                            }
                        }
                    }
                }
            }
            return returnValue;
        }
        function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
                subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function (interaction) {
                interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
                var prevInteractions = exports.__interactionsRef.current;
                exports.__interactionsRef.current = wrappedInteractions;
                subscriber = exports.__subscriberRef.current;
                try {
                    var returnValue;
                    try {
                        if (subscriber !== null) {
                            subscriber.onWorkStarted(wrappedInteractions, threadID);
                        }
                    }
                    finally {
                        try {
                            returnValue = callback.apply(undefined, arguments);
                        }
                        finally {
                            exports.__interactionsRef.current = prevInteractions;
                            if (subscriber !== null) {
                                subscriber.onWorkStopped(wrappedInteractions, threadID);
                            }
                        }
                    }
                    return returnValue;
                }
                finally {
                    if (!hasRun) {
                        hasRun = true;
                        wrappedInteractions.forEach(function (interaction) {
                            interaction.__count--;
                            if (subscriber !== null && interaction.__count === 0) {
                                subscriber.onInteractionScheduledWorkCompleted(interaction);
                            }
                        });
                    }
                }
            }
            wrapped.cancel = function cancel() {
                subscriber = exports.__subscriberRef.current;
                try {
                    if (subscriber !== null) {
                        subscriber.onWorkCanceled(wrappedInteractions, threadID);
                    }
                }
                finally {
                    wrappedInteractions.forEach(function (interaction) {
                        interaction.__count--;
                        if (subscriber && interaction.__count === 0) {
                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                        }
                    });
                }
            };
            return wrapped;
        }
        var subscribers = null;
        {
            subscribers = new Set();
        }
        function unstable_subscribe(subscriber) {
            {
                subscribers.add(subscriber);
                if (subscribers.size === 1) {
                    exports.__subscriberRef.current = {
                        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
                        onInteractionTraced: onInteractionTraced,
                        onWorkCanceled: onWorkCanceled,
                        onWorkScheduled: onWorkScheduled,
                        onWorkStarted: onWorkStarted,
                        onWorkStopped: onWorkStopped
                    };
                }
            }
        }
        function unstable_unsubscribe(subscriber) {
            {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    exports.__subscriberRef.current = null;
                }
            }
        }
        function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function (subscriber) {
                try {
                    subscriber.onInteractionTraced(interaction);
                }
                catch (error) {
                    if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                    }
                }
            });
            if (didCatchError) {
                throw caughtError;
            }
        }
        function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function (subscriber) {
                try {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
                catch (error) {
                    if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                    }
                }
            });
            if (didCatchError) {
                throw caughtError;
            }
        }
        function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function (subscriber) {
                try {
                    subscriber.onWorkScheduled(interactions, threadID);
                }
                catch (error) {
                    if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                    }
                }
            });
            if (didCatchError) {
                throw caughtError;
            }
        }
        function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function (subscriber) {
                try {
                    subscriber.onWorkStarted(interactions, threadID);
                }
                catch (error) {
                    if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                    }
                }
            });
            if (didCatchError) {
                throw caughtError;
            }
        }
        function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function (subscriber) {
                try {
                    subscriber.onWorkStopped(interactions, threadID);
                }
                catch (error) {
                    if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                    }
                }
            });
            if (didCatchError) {
                throw caughtError;
            }
        }
        function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function (subscriber) {
                try {
                    subscriber.onWorkCanceled(interactions, threadID);
                }
                catch (error) {
                    if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                    }
                }
            });
            if (didCatchError) {
                throw caughtError;
            }
        }
        exports.unstable_clear = unstable_clear;
        exports.unstable_getCurrent = unstable_getCurrent;
        exports.unstable_getThreadID = unstable_getThreadID;
        exports.unstable_subscribe = unstable_subscribe;
        exports.unstable_trace = unstable_trace;
        exports.unstable_unsubscribe = unstable_unsubscribe;
        exports.unstable_wrap = unstable_wrap;
    })();
}


/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler.development.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {


if (true) {
    (function () {
        'use strict';
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var requestHostCallback;
        var requestHostTimeout;
        var cancelHostTimeout;
        var requestPaint;
        var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
        if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function () {
                return localPerformance.now();
            };
        }
        else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function () {
                return localDate.now() - initialTime;
            };
        }
        if (typeof window === 'undefined' ||
            typeof MessageChannel !== 'function') {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function () {
                if (_callback !== null) {
                    try {
                        var currentTime = exports.unstable_now();
                        var hasRemainingTime = true;
                        _callback(hasRemainingTime, currentTime);
                        _callback = null;
                    }
                    catch (e) {
                        setTimeout(_flushCallback, 0);
                        throw e;
                    }
                }
            };
            requestHostCallback = function (cb) {
                if (_callback !== null) {
                    setTimeout(requestHostCallback, 0, cb);
                }
                else {
                    _callback = cb;
                    setTimeout(_flushCallback, 0);
                }
            };
            requestHostTimeout = function (cb, ms) {
                _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function () {
                clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function () {
                return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function () { };
        }
        else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== 'undefined') {
                var requestAnimationFrame = window.requestAnimationFrame;
                var cancelAnimationFrame = window.cancelAnimationFrame;
                if (typeof requestAnimationFrame !== 'function') {
                    console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
                }
                if (typeof cancelAnimationFrame !== 'function') {
                    console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
                }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
                exports.unstable_shouldYield = function () {
                    return exports.unstable_now() >= deadline;
                };
                requestPaint = function () { };
            }
            exports.unstable_forceFrameRate = function (fps) {
                if (fps < 0 || fps > 125) {
                    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
                    return;
                }
                if (fps > 0) {
                    yieldInterval = Math.floor(1000 / fps);
                }
                else {
                    yieldInterval = 5;
                }
            };
            var performWorkUntilDeadline = function () {
                if (scheduledHostCallback !== null) {
                    var currentTime = exports.unstable_now();
                    deadline = currentTime + yieldInterval;
                    var hasTimeRemaining = true;
                    try {
                        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                        if (!hasMoreWork) {
                            isMessageLoopRunning = false;
                            scheduledHostCallback = null;
                        }
                        else {
                            port.postMessage(null);
                        }
                    }
                    catch (error) {
                        port.postMessage(null);
                        throw error;
                    }
                }
                else {
                    isMessageLoopRunning = false;
                }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function (callback) {
                scheduledHostCallback = callback;
                if (!isMessageLoopRunning) {
                    isMessageLoopRunning = true;
                    port.postMessage(null);
                }
            };
            requestHostTimeout = function (callback, ms) {
                taskTimeoutID = _setTimeout(function () {
                    callback(exports.unstable_now());
                }, ms);
            };
            cancelHostTimeout = function () {
                _clearTimeout(taskTimeoutID);
                taskTimeoutID = -1;
            };
        }
        function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
        }
        function peek(heap) {
            var first = heap[0];
            return first === undefined ? null : first;
        }
        function pop(heap) {
            var first = heap[0];
            if (first !== undefined) {
                var last = heap.pop();
                if (last !== first) {
                    heap[0] = last;
                    siftDown(heap, last, 0);
                }
                return first;
            }
            else {
                return null;
            }
        }
        function siftUp(heap, node, i) {
            var index = i;
            while (true) {
                var parentIndex = index - 1 >>> 1;
                var parent = heap[parentIndex];
                if (parent !== undefined && compare(parent, node) > 0) {
                    heap[parentIndex] = node;
                    heap[index] = parent;
                    index = parentIndex;
                }
                else {
                    return;
                }
            }
        }
        function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            while (index < length) {
                var leftIndex = (index + 1) * 2 - 1;
                var left = heap[leftIndex];
                var rightIndex = leftIndex + 1;
                var right = heap[rightIndex];
                if (left !== undefined && compare(left, node) < 0) {
                    if (right !== undefined && compare(right, left) < 0) {
                        heap[index] = right;
                        heap[rightIndex] = node;
                        index = rightIndex;
                    }
                    else {
                        heap[index] = left;
                        heap[leftIndex] = node;
                        index = leftIndex;
                    }
                }
                else if (right !== undefined && compare(right, node) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                }
                else {
                    return;
                }
            }
        }
        function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5000;
        var LOW_PRIORITY_TIMEOUT = 10000;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
                if (timer.callback === null) {
                    pop(timerQueue);
                }
                else if (timer.startTime <= currentTime) {
                    pop(timerQueue);
                    timer.sortIndex = timer.expirationTime;
                    push(taskQueue, timer);
                }
                else {
                    return;
                }
                timer = peek(timerQueue);
            }
        }
        function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
                if (peek(taskQueue) !== null) {
                    isHostCallbackScheduled = true;
                    requestHostCallback(flushWork);
                }
                else {
                    var firstTimer = peek(timerQueue);
                    if (firstTimer !== null) {
                        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                    }
                }
            }
        }
        function flushWork(hasTimeRemaining, initialTime) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
                isHostTimeoutScheduled = false;
                cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
                if (enableProfiling) {
                    try {
                        return workLoop(hasTimeRemaining, initialTime);
                    }
                    catch (error) {
                        if (currentTask !== null) {
                            var currentTime = exports.unstable_now();
                            markTaskErrored(currentTask, currentTime);
                            currentTask.isQueued = false;
                        }
                        throw error;
                    }
                }
                else {
                    return workLoop(hasTimeRemaining, initialTime);
                }
            }
            finally {
                currentTask = null;
                currentPriorityLevel = previousPriorityLevel;
                isPerformingWork = false;
            }
        }
        function workLoop(hasTimeRemaining, initialTime) {
            var currentTime = initialTime;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !(enableSchedulerDebugging)) {
                if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                    break;
                }
                var callback = currentTask.callback;
                if (typeof callback === 'function') {
                    currentTask.callback = null;
                    currentPriorityLevel = currentTask.priorityLevel;
                    var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                    var continuationCallback = callback(didUserCallbackTimeout);
                    currentTime = exports.unstable_now();
                    if (typeof continuationCallback === 'function') {
                        currentTask.callback = continuationCallback;
                    }
                    else {
                        if (currentTask === peek(taskQueue)) {
                            pop(taskQueue);
                        }
                    }
                    advanceTimers(currentTime);
                }
                else {
                    pop(taskQueue);
                }
                currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
                return true;
            }
            else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                    requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
                return false;
            }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
                case ImmediatePriority:
                case UserBlockingPriority:
                case NormalPriority:
                case LowPriority:
                case IdlePriority:
                    break;
                default:
                    priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
                return eventHandler();
            }
            finally {
                currentPriorityLevel = previousPriorityLevel;
            }
        }
        function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
                case ImmediatePriority:
                case UserBlockingPriority:
                case NormalPriority:
                    priorityLevel = NormalPriority;
                    break;
                default:
                    priorityLevel = currentPriorityLevel;
                    break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
                return eventHandler();
            }
            finally {
                currentPriorityLevel = previousPriorityLevel;
            }
        }
        function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function () {
                var previousPriorityLevel = currentPriorityLevel;
                currentPriorityLevel = parentPriorityLevel;
                try {
                    return callback.apply(this, arguments);
                }
                finally {
                    currentPriorityLevel = previousPriorityLevel;
                }
            };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === 'object' && options !== null) {
                var delay = options.delay;
                if (typeof delay === 'number' && delay > 0) {
                    startTime = currentTime + delay;
                }
                else {
                    startTime = currentTime;
                }
            }
            else {
                startTime = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
                case ImmediatePriority:
                    timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                    break;
                case UserBlockingPriority:
                    timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                    break;
                case IdlePriority:
                    timeout = IDLE_PRIORITY_TIMEOUT;
                    break;
                case LowPriority:
                    timeout = LOW_PRIORITY_TIMEOUT;
                    break;
                case NormalPriority:
                default:
                    timeout = NORMAL_PRIORITY_TIMEOUT;
                    break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
                id: taskIdCounter++,
                callback: callback,
                priorityLevel: priorityLevel,
                startTime: startTime,
                expirationTime: expirationTime,
                sortIndex: -1
            };
            if (startTime > currentTime) {
                newTask.sortIndex = startTime;
                push(timerQueue, newTask);
                if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                    if (isHostTimeoutScheduled) {
                        cancelHostTimeout();
                    }
                    else {
                        isHostTimeoutScheduled = true;
                    }
                    requestHostTimeout(handleTimeout, startTime - currentTime);
                }
            }
            else {
                newTask.sortIndex = expirationTime;
                push(taskQueue, newTask);
                if (!isHostCallbackScheduled && !isPerformingWork) {
                    isHostCallbackScheduled = true;
                    requestHostCallback(flushWork);
                }
            }
            return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
            task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_wrapCallback = unstable_wrapCallback;
    })();
}


/***/ }),

/***/ "./node_modules/scheduler/index.js":
/*!*****************************************!*\
  !*** ./node_modules/scheduler/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


if (false) {}
else {
    module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ "./node_modules/scheduler/cjs/scheduler.development.js");
}


/***/ }),

/***/ "./node_modules/scheduler/tracing.js":
/*!*******************************************!*\
  !*** ./node_modules/scheduler/tracing.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


if (false) {}
else {
    module.exports = __webpack_require__(/*! ./cjs/scheduler-tracing.development.js */ "./node_modules/scheduler/cjs/scheduler-tracing.development.js");
}


/***/ }),

/***/ "./node_modules/use-asset/dist/index.js":
/*!**********************************************!*\
  !*** ./node_modules/use-asset/dist/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAsset": () => (/* binding */ createAsset),
/* harmony export */   "useAsset": () => (/* binding */ useAsset)
/* harmony export */ });
/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-deep-equal */ "./node_modules/fast-deep-equal/index.js");
/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_0__);

const globalCache = [];
function handleAsset(fn, cache, args, lifespan = 0, preload = false) {
    for (const entry of cache) {
        if (fast_deep_equal__WEBPACK_IMPORTED_MODULE_0___default()(args, entry.args)) {
            if (preload)
                return;
            if (entry.error)
                throw entry.error;
            if (entry.response)
                return entry.response;
            throw entry.promise;
        }
    }
    const entry = {
        args,
        promise: fn(...args)
            .then(response => entry.response = response != null ? response : true).catch(e => entry.error = e != null ? e : 'unknown error').then(() => {
            if (lifespan > 0) {
                setTimeout(() => {
                    const index = cache.indexOf(entry);
                    if (index !== -1)
                        cache.splice(index, 1);
                }, lifespan);
            }
        })
    };
    cache.push(entry);
    if (!preload)
        throw entry.promise;
}
function clear(cache, ...args) {
    if (args === undefined || args.length === 0)
        cache.splice(0, cache.length);
    else {
        const entry = cache.find(entry => fast_deep_equal__WEBPACK_IMPORTED_MODULE_0___default()(args, entry.args));
        if (entry) {
            const index = cache.indexOf(entry);
            if (index !== -1)
                cache.splice(index, 1);
        }
    }
}
function createAsset(fn, lifespan = 0) {
    const cache = [];
    return {
        read: (...args) => handleAsset(fn, cache, args, lifespan),
        preload: (...args) => void handleAsset(fn, cache, args, lifespan, true),
        clear: (...args) => clear(cache, ...args),
        peek: (...args) => {
            var _cache$find;
            return (_cache$find = cache.find(entry => fast_deep_equal__WEBPACK_IMPORTED_MODULE_0___default()(args, entry.args))) == null ? void 0 : _cache$find.response;
        }
    };
}
function useAsset(fn, ...args) {
    return handleAsset(fn, globalCache, args, useAsset.lifespan);
}
useAsset.lifespan = 0;
useAsset.clear = (...args) => clear(globalCache, ...args);
useAsset.preload = (fn, ...args) => void handleAsset(fn, globalCache, args, useAsset.lifespan, true);
useAsset.peek = (...args) => {
    var _globalCache$find;
    return (_globalCache$find = globalCache.find(entry => fast_deep_equal__WEBPACK_IMPORTED_MODULE_0___default()(args, entry.args))) == null ? void 0 : _globalCache$find.response;
};



/***/ }),

/***/ "./node_modules/zustand/esm/index.js":
/*!*******************************************!*\
  !*** ./node_modules/zustand/esm/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ create)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

function createStore(createState) {
    let state;
    const listeners = new Set();
    const setState = (partial, replace) => {
        const nextState = typeof partial === "function" ? partial(state) : partial;
        if (nextState !== state) {
            const previousState = state;
            state = replace ? nextState : Object.assign({}, state, nextState);
            listeners.forEach((listener) => listener(state, previousState));
        }
    };
    const getState = () => state;
    const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {
        console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
        let currentSlice = selector(state);
        function listenerToAdd() {
            const nextSlice = selector(state);
            if (!equalityFn(currentSlice, nextSlice)) {
                const previousSlice = currentSlice;
                listener(currentSlice = nextSlice, previousSlice);
            }
        }
        listeners.add(listenerToAdd);
        return () => listeners.delete(listenerToAdd);
    };
    const subscribe = (listener, selector, equalityFn) => {
        if (selector || equalityFn) {
            return subscribeWithSelector(listener, selector, equalityFn);
        }
        listeners.add(listener);
        return () => listeners.delete(listener);
    };
    const destroy = () => listeners.clear();
    const api = { setState, getState, subscribe, destroy };
    state = createState(setState, getState, api);
    return api;
}
const isSSR = typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
const useIsomorphicLayoutEffect = isSSR ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;
function create(createState) {
    const api = typeof createState === "function" ? createStore(createState) : createState;
    const useStore = (selector = api.getState, equalityFn = Object.is) => {
        const [, forceUpdate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)((c) => c + 1, 0);
        const state = api.getState();
        const stateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(state);
        const selectorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(selector);
        const equalityFnRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(equalityFn);
        const erroredRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
        const currentSliceRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
        if (currentSliceRef.current === void 0) {
            currentSliceRef.current = selector(state);
        }
        let newStateSlice;
        let hasNewStateSlice = false;
        if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {
            newStateSlice = selector(state);
            hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);
        }
        useIsomorphicLayoutEffect(() => {
            if (hasNewStateSlice) {
                currentSliceRef.current = newStateSlice;
            }
            stateRef.current = state;
            selectorRef.current = selector;
            equalityFnRef.current = equalityFn;
            erroredRef.current = false;
        });
        const stateBeforeSubscriptionRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(state);
        useIsomorphicLayoutEffect(() => {
            const listener = () => {
                try {
                    const nextState = api.getState();
                    const nextStateSlice = selectorRef.current(nextState);
                    if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {
                        stateRef.current = nextState;
                        currentSliceRef.current = nextStateSlice;
                        forceUpdate();
                    }
                }
                catch (error) {
                    erroredRef.current = true;
                    forceUpdate();
                }
            };
            const unsubscribe = api.subscribe(listener);
            if (api.getState() !== stateBeforeSubscriptionRef.current) {
                listener();
            }
            return unsubscribe;
        }, []);
        const sliceToReturn = hasNewStateSlice ? newStateSlice : currentSliceRef.current;
        (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(sliceToReturn);
        return sliceToReturn;
    };
    Object.assign(useStore, api);
    useStore[Symbol.iterator] = function () {
        console.warn("[useStore, api] = create() is deprecated and will be removed in v4");
        const items = [useStore, api];
        return {
            next() {
                const done = items.length <= 0;
                return { value: items.shift(), done };
            }
        };
    };
    return useStore;
}



/***/ }),

/***/ "./src/3d/Arrow.tsx":
/*!**************************!*\
  !*** ./src/3d/Arrow.tsx ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Arrow)
/* harmony export */ });
/* harmony import */ var _lib_svg_extrude__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lib/svg-extrude */ "./lib/svg-extrude.ts");
/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @react-three/fiber */ "./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(liqvid__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _markers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../markers */ "./src/markers.ts");
/* harmony import */ var _env_media_url__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @env/media-url */ "./src/@development/media-url.ts");







const arrowIndex = _markers__WEBPACK_IMPORTED_MODULE_4__.script.markerNumberOf("3d/svg");
function Arrow() {
    const { scene } = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_6__.useThree)();
    const ref = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)();
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {
        (0,_lib_svg_extrude__WEBPACK_IMPORTED_MODULE_0__["default"])(`${_env_media_url__WEBPACK_IMPORTED_MODULE_5__.MEDIA_URL}/img/arrow.svg`).then(group => {
            group.rotation.set(Math.PI / 2, 0, 0);
            const box = new three__WEBPACK_IMPORTED_MODULE_3__.Box3().setFromObject(group);
            const size = new three__WEBPACK_IMPORTED_MODULE_3__.Vector3();
            box.getSize(size);
            group.position.set(-size.x / 2, 0, size.z);
            ref.current = group;
            group.visible = (_markers__WEBPACK_IMPORTED_MODULE_4__.script.markerIndex >= arrowIndex);
            scene.add(group);
        });
    }, []);
    (0,liqvid__WEBPACK_IMPORTED_MODULE_1__.useMarkerUpdate)(() => {
        if (!ref.current)
            return;
        ref.current.visible = (_markers__WEBPACK_IMPORTED_MODULE_4__.script.markerIndex >= arrowIndex);
    }, []);
    return null;
}


/***/ }),

/***/ "./src/3d/Cylinder.tsx":
/*!*****************************!*\
  !*** ./src/3d/Cylinder.tsx ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Cylinder)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var _lib_ThreeFiber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lib/ThreeFiber */ "./lib/ThreeFiber.tsx");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(liqvid__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_4__);






const { constrain } = liqvid__WEBPACK_IMPORTED_MODULE_2__.Utils.misc, { anyHover } = liqvid__WEBPACK_IMPORTED_MODULE_2__.Utils.mobile;
const TWOPI = 2 * Math.PI;
function Cylinder() {
    const { script } = (0,liqvid__WEBPACK_IMPORTED_MODULE_2__.usePlayer)();
    const radius = 3;
    const height = 8;
    const cylinder = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();
    const slider = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();
    const fat = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();
    const api = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(_lib_ThreeFiber__WEBPACK_IMPORTED_MODULE_1__.R3FContext);
    const plane = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(new three__WEBPACK_IMPORTED_MODULE_4__.Plane());
    const move = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((e) => {
        const pos = api.screenToScene(e.clientX, e.clientY, plane.current);
        const h = constrain(-height / 2, pos.z, height / 2);
        slider.current.position.setZ(h);
        if (!anyHover)
            fat.current.position.setZ(h);
    }, []);
    const down = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((e) => {
        const int = e.intersections.find(_ => _.object.name === "cylinder");
        if (!int)
            return;
        const normalMatrix = new three__WEBPACK_IMPORTED_MODULE_4__.Matrix3().getNormalMatrix(int.object.matrixWorld);
        const normal = int.face.normal;
        normal.applyMatrix3(normalMatrix).normalize();
        plane.current.setFromNormalAndCoplanarPoint(normal, int.point).normalize();
    }, []);
    const events = (0,_lib_ThreeFiber__WEBPACK_IMPORTED_MODULE_1__.useDraggable)(move, down);
    const index = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => script.markerNumberOf("3d/drag"), []);
    (0,liqvid__WEBPACK_IMPORTED_MODULE_2__.useMarkerUpdate)(() => {
        slider.current.visible = script.markerIndex >= index;
        if (fat.current) {
            fat.current.visible = script.markerIndex >= index;
        }
    }, []);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("mesh", Object.assign({ name: "cylinder", ref: cylinder, position: [-6, 0, 0], rotation: [TWOPI / 4, 0, 0] }, _lib_ThreeFiber__WEBPACK_IMPORTED_MODULE_1__.intercept, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("cylinderBufferGeometry", { args: [radius, radius, height, 32, 1, true] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("meshPhongMaterial", { color: 0xAE81FF, side: three__WEBPACK_IMPORTED_MODULE_4__.DoubleSide, clipShadows: true })] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("mesh", Object.assign({ name: "slider", position: [-6, 0, 0], ref: slider }, events, { visible: script.markerIndex >= index }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("torusBufferGeometry", { args: [radius, 0.1, 8, 32] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("meshBasicMaterial", { color: 0xFFAA00 })] })), anyHover ? null : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("mesh", Object.assign({ name: "fat-slider", position: [-6, 0, 0], ref: fat }, events, { visible: script.markerIndex >= index }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("torusBufferGeometry", { args: [radius, 0.5, 8, 32] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("meshBasicMaterial", { opacity: 0, transparent: true })] }))] }));
}


/***/ }),

/***/ "./src/3d/HelpControl.tsx":
/*!********************************!*\
  !*** ./src/3d/HelpControl.tsx ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HelpControl)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(liqvid__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);



const { anyHover, onClick } = liqvid__WEBPACK_IMPORTED_MODULE_1__.Utils.mobile;
function HelpControl() {
    const { script } = (0,liqvid__WEBPACK_IMPORTED_MODULE_1__.usePlayer)();
    const classNames = ["rp-3d-help-wrap"];
    const [open, setOpen] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(true);
    const events = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(() => onClick(() => {
        setOpen(prev => !prev);
    }), []);
    if (open)
        classNames.push("open");
    const ref = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)();
    (0,liqvid__WEBPACK_IMPORTED_MODULE_1__.useMarkerUpdate)(() => {
        ref.current.classList.toggle("relevant", script.markerName.startsWith("3d/"));
    }, []);
    if (script.markerName.startsWith("3d/"))
        classNames.push("relevant");
    const controls = anyHover ? [
        ["Left mouse", "Orbit"],
        ["Scroll wheel", "Zoom"],
        ["Right mouse", "Pan"]
    ] : [
        ["Swipe", "Orbit"],
        ["Pinch", "Zoom"],
        ["Two fingers", "Pan"],
    ];
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", Object.assign({ className: classNames.join(" "), ref: ref }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("aside", Object.assign({ className: "rp-3d-help" }, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("table", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("caption", { children: "3d controls" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("tbody", { children: controls.map(([key, action]) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("tr", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("th", { children: key }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("td", { children: action })] }, key))) })] }) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("svg", Object.assign({ className: "rp-controls-help", viewBox: "0 0 20 20" }, events, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("path", { d: "m 10.896484,3.8652344 c -1.2309996,0 -1.7499996,0.8536094 -1.7499996,1.4746094 -0.026,0.737 0.39525,1.1816406 1.2812496,1.1816406 1.059,0 1.679688,-0.7171875 1.679688,-1.4921875 0,-0.621 -0.274938,-1.1640625 -1.210938,-1.1640625 z", fill: "#FFF", stroke: "none" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("path", { d: "m 10.847656,8.0332031 c -0.765,0 -2.5524216,0.7615469 -4.1074216,2.0605469 l 0.3183594,0.523438 c 0.49,-0.33 1.3207187,-0.664063 1.5117187,-0.664063 0.148,0 0.127,0.193734 0,0.677734 L 7.8378906,13.65625 c -0.447,1.705 0.020156,2.09375 0.6601563,2.09375 0.639,0 2.2877811,-0.58175 3.8007811,-2.09375 L 11.9375,13.169922 c -0.618,0.487 -1.247453,0.71875 -1.439453,0.71875 -0.149,0 -0.2115,-0.19386 -0.0625,-0.75586 l 0.839844,-3.179687 c 0.319,-1.164 0.212265,-1.9199219 -0.427735,-1.9199219 z", fill: "#FFF", stroke: "none" })] }))] })));
}


/***/ }),

/***/ "./src/3d/Parametric.tsx":
/*!*******************************!*\
  !*** ./src/3d/Parametric.tsx ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Parametric)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(liqvid__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _markers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../markers */ "./src/markers.ts");





const { cos, sin } = Math;
const r = 2;
const TWOPI = 2 * Math.PI;
const index = _markers__WEBPACK_IMPORTED_MODULE_4__.script.markerNumberOf("3d/parametric");
function Parametric() {
    const curve = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((u, v, dest) => {
        u = -TWOPI / 2 + u * 2 * TWOPI;
        v = -TWOPI / 2 + v * 2 * TWOPI;
        const x = r * sin(3 * u) / (2 + cos(v));
        const y = r * (sin(u) + 2 * sin(2 * u)) / (2 + cos(v + TWOPI / 3));
        const z = r / 2 * (cos(u) - 2 * cos(2 * u)) * (2 + cos(v)) * (2 + cos(v + TWOPI / 3)) / 4;
        dest.set(x, y, z);
        return dest;
    }, []);
    const ref = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)();
    (0,liqvid__WEBPACK_IMPORTED_MODULE_1__.useMarkerUpdate)(() => {
        ref.current.visible = _markers__WEBPACK_IMPORTED_MODULE_4__.script.markerIndex >= index;
    }, []);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("mesh", Object.assign({ ref: ref, position: [8, 0, 0], rotation: [0, 0, TWOPI / 4], visible: _markers__WEBPACK_IMPORTED_MODULE_4__.script.markerIndex >= index }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("parametricGeometry", { args: [curve, 100, 100] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("meshPhongMaterial", { color: 0x1a69b5, side: three__WEBPACK_IMPORTED_MODULE_3__.DoubleSide })] })));
}


/***/ }),

/***/ "./src/3d/Sphere.tsx":
/*!***************************!*\
  !*** ./src/3d/Sphere.tsx ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Sphere)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(liqvid__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _markers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../markers */ "./src/markers.ts");






const { animate, bezier, easings } = liqvid__WEBPACK_IMPORTED_MODULE_1__.Utils.animation;
const grow = animate({
    duration: 1000,
    easing: bezier(...easings.easeInCubic),
    endValue: 3,
    startTime: _markers__WEBPACK_IMPORTED_MODULE_4__.script.parseStart("3d/anim"),
});
function Sphere() {
    const ref = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)();
    (0,liqvid__WEBPACK_IMPORTED_MODULE_1__.useTime)(r => {
        if (r === 0) {
            ref.current.visible = false;
        }
        else {
            ref.current.visible = _markers__WEBPACK_IMPORTED_MODULE_4__.script.markerName.startsWith("3d/");
            ref.current.geometry = new three__WEBPACK_IMPORTED_MODULE_3__.SphereBufferGeometry(r, 64, 64);
        }
    }, grow, []);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("mesh", Object.assign({ name: "sphere", position: [0, 8, 0], ref: ref, visible: false }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("sphereBufferGeometry", { args: [0, 64, 64] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("meshPhongMaterial", { color: 0x1BBB68, side: three__WEBPACK_IMPORTED_MODULE_3__.DoubleSide })] })));
}


/***/ }),

/***/ "./src/5d/Elliptic.tsx":
/*!*****************************!*\
  !*** ./src/5d/Elliptic.tsx ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Elliptic)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var _lib_graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lib/graphics */ "./lib/graphics.ts");


function Elliptic(props) {
    const edges = (0,_lib_graphics__WEBPACK_IMPORTED_MODULE_1__.marchingSquares)(-5, 5, -5, 5, (x, y) => y ** 2 - x ** 3 - props.a * x - props.b, 0, 128);
    const path = [];
    for (let i = 0; i < edges.length; i += 2) {
        path.push(`M ${edges[i][0]} ${edges[i][1]}`);
        path.push(`L ${edges[i + 1][0]} ${edges[i + 1][1]}`);
    }
    const curve = path.join(" ");
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("svg", Object.assign({ viewBox: "-5 -5 10 10" }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("line", { x1: "0", x2: "0", y1: "-5", y2: "5", stroke: "#EEE", strokeWidth: "0.01" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("line", { x1: "-5", x2: "5", y1: "0", y2: "0", stroke: "#EEE", strokeWidth: "0.01" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("path", { d: curve, fill: "none", stroke: "#FF0070", strokeWidth: "0.1" })] })));
}


/***/ }),

/***/ "./src/5d/Moduli.tsx":
/*!***************************!*\
  !*** ./src/5d/Moduli.tsx ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Moduli)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var _lib_graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lib/graphics */ "./lib/graphics.ts");
/* harmony import */ var _liqvid_react_three__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @liqvid/react-three */ "./node_modules/@liqvid/react-three/dist/index.mjs");
/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-three/fiber */ "./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);





function CameraControls() {
    const $three = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_3__.useThree)();
    const { camera, gl: { domElement } } = $three;
    domElement.$three = $three;
    camera.up.set(0, 0, 1);
    const controls = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)();
    (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_3__.useFrame)(() => { var _a; return (_a = controls.current) === null || _a === void 0 ? void 0 : _a.update(); });
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {
    }, [controls.current]);
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {
        camera.position.set(4.3, -9.5, 6);
        camera.lookAt(new THREE.Vector3(0, 0, 0));
        camera.up.set(0, 0, 1);
    }, []);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("orbitControls", { ref: controls, args: [camera, domElement] }));
}
function Moduli(props) {
    const moduliGeometry = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(() => (0,_lib_graphics__WEBPACK_IMPORTED_MODULE_1__.marchingCubes)((x, y, z) => y ** 2 - x ** 3 - z * x - props.b, -5, 5, 32), [props.b]);
    const section = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(() => {
        const edges = (0,_lib_graphics__WEBPACK_IMPORTED_MODULE_1__.marchingSquares)(-5, 5, -5, 5, (x, y) => y ** 2 - x ** 3 - props.a * x - props.b + props.a, props.a, 64);
        const lineGeometry = new THREE.LineSegmentsGeometry().setPositions(edges.reduce((a, b) => a.concat(b)));
        const lineMaterial = new THREE.LineMaterial({ color: 0xFF0070, linewidth: 6 });
        lineMaterial.resolution.set(window.innerWidth, window.innerHeight);
        const linePavement = new THREE.LineSegments2(lineGeometry, lineMaterial);
        return linePavement;
    }, [props.a, props.b]);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_liqvid_react_three__WEBPACK_IMPORTED_MODULE_4__.Canvas, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("ambientLight", {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("pointLight", { position: [10, 10, 10] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CameraControls, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("mesh", Object.assign({ geometry: moduliGeometry }, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("meshPhongMaterial", { color: 0x1BBB68, side: THREE.DoubleSide }) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("primitive", { object: section })] }));
}


/***/ }),

/***/ "./src/@development/controls.tsx":
/*!***************************************!*\
  !*** ./src/@development/controls.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UI": () => (/* binding */ UI)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(liqvid__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var rp_recording__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rp-recording */ "./node_modules/rp-recording/dist/rp-recording.js");
/* harmony import */ var rp_recording__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(rp_recording__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _3d_HelpControl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../3d/HelpControl */ "./src/3d/HelpControl.tsx");
/* harmony import */ var _markers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../markers */ "./src/markers.ts");





const controls = [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_recording__WEBPACK_IMPORTED_MODULE_2__.RecordingControl, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_3d_HelpControl__WEBPACK_IMPORTED_MODULE_3__["default"], {})];
const UI = (props) => {
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(liqvid__WEBPACK_IMPORTED_MODULE_1__.Player, Object.assign({ controls: controls, script: _markers__WEBPACK_IMPORTED_MODULE_4__.script }, { children: props.children })));
};


/***/ }),

/***/ "./src/@development/media-url.ts":
/*!***************************************!*\
  !*** ./src/@development/media-url.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MEDIA_URL": () => (/* binding */ MEDIA_URL)
/* harmony export */ });
const MEDIA_URL = ".";


/***/ }),

/***/ "./src/@development/prompts.tsx":
/*!**************************************!*\
  !*** ./src/@development/prompts.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FiveDPrompt": () => (/* binding */ FiveDPrompt),
/* harmony export */   "IntroPrompt": () => (/* binding */ IntroPrompt),
/* harmony export */   "KaTeXPrompt": () => (/* binding */ KaTeXPrompt),
/* harmony export */   "MathJaxPrompt": () => (/* binding */ MathJaxPrompt),
/* harmony export */   "ThreeDPrompt": () => (/* binding */ ThreeDPrompt),
/* harmony export */   "TwoDPrompt": () => (/* binding */ TwoDPrompt),
/* harmony export */   "XyJaxPrompt": () => (/* binding */ XyJaxPrompt)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var rp_prompt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rp-prompt */ "./node_modules/rp-prompt/dist/index.js");
/* harmony import */ var rp_prompt__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(rp_prompt__WEBPACK_IMPORTED_MODULE_1__);


const IntroPrompt = (props) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Prompt, Object.assign({}, props, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "intro/toc" }, { children: "Liqvid is a tool for creating interactive videos out of HTML. In this video, I'm going to demonstrate how to achieve various effects that you might want when using this tool for mathematical content." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "intro/main" }, { children: "This supplements the general-purpose tutorial; you might want to watch that first. That's a link that you can click on. That'll" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "intro/explain" }, { children: "explain what this library is, the main concepts behind ractives and how to record them. In particular, if you want to" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "intro/codebooth" }, { children: ["include coding activities, or if ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, { on: "intro/paint" }), " you want to write out formulas by hand, the general purpose tutorial covers the plugins for doing that. Here we're going to focus on rendered formulas and on graphics."] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "intro/clone" }, { children: "The way to use this tutorial is to clone the repository, and then you can follow along in the source code to see how I achieved various things." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "intro/links" }, { children: "Some other helpful links: this does require a pretty solid command of frontend web development, so" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "intro/js" }, { children: "here's a Javascript course that I like. This is actually written in" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "intro/ts" }, { children: "TypeScript, which is a superset of Javascript that adds more typing. And it's built on top of" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "intro/react" }, { children: "software called React, which makes it a lot easier to do dynamic things with HTML. So here's the documentation for that." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "intro/node" }, { children: ["To transpile Typescript and React into normal Javascript, you'll need to install Node.js.", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("br", {}), "These tools are all pretty standard in web development, but not as familiar to mathematicians."] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "intro/epiplexis" }, { children: "Finally, you can see examples of this used for actual math lessons on my website." }))] })));
const KaTeXPrompt = (props) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Prompt, Object.assign({}, props, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "ktx/" }, { children: "So let's get started. These formulas are rendered using KaTeX; you can use inline" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "ktx/display" }, { children: "or display equations. If you want to" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "ktx/ex" }, { children: "successively reveal parts of an equation, you can use ractive-player's built-in show/hiding functionality, but you'll see in the source that you kind of have to attach it by hand." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "ktx/macros" }, { children: "The library also provides a way to load macro definitions from a file; this is intended to make it easy to reuse macros across a lot of diferent videos. So here THH was a macro defined in the file symbols.tex." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "ktx/docs" }, { children: "Finally, here's the KaTeX documentation." }))] })));
const MathJaxPrompt = (props) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Prompt, Object.assign({}, props, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "mjx/" }, { children: "You can also render your formulas using MathJax. Again you've got inline" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "mjx/display" }, { children: "or display equations, you can do equation reveals;" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "mjx/extn" }, { children: "unlike KaTeX, you do need a MathJax extension to do the equation-revealing, but that's provided in the source for this video." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "mjx/macros" }, { children: "MathJax will load macros from the same file as KaTeX, you can use them side by side." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "mjx/docs" }, { children: ["And then here's the documentation for MathJax. Note this is not the latest version of MathJax.", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("br", {}), "So, I usually use KaTeX for my formulas, because it's faster (partly because of the older version). But there are some complicated formulas that only MathJax can render, in particular, commutative diagrams."] }))] })));
const XyJaxPrompt = (props) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Prompt, Object.assign({}, props, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "xyjx/" }, { children: "So there's an amazing MathJax package called XyJax that lets you use xymatrix in MathJax. Here's" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "xyjx/diagram" }, { children: "a basic commutative diagram. Now, doing effects with XyJax, even some things that would be easy to do in normal xymatrix, is really hard. It's much harder than the 2d / 3d animation that we'll cover next. But it can be done." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "xyjx/pullback" }, { children: "So here are some diagrams using macros for pullback and pushout decorations." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "xyjx/color" }, { children: "Here's a diagram with colored arrows." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "xyjx/arrows" }, { children: "Here's how to animate arrows in a diagram." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "xyjx/brouwer" }, { children: "And then here's a fade animation: so this is supposed to be a proof of the Brouwer fixed point theorem: S^1 can't be a retract of D^2, because if it were," })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "xyjx/pi1" }, { children: "you could apply \\pi_1" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "xyjx/apply" }, { children: "and get this diagram in the category of abelian groups, which is" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "xyjx/contradiction" }, { children: ["clearly nonsensical.", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("br", {}), "So that's how you do formulas; now let's talk about graphics."] }))] })));
const TwoDPrompt = (props) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Prompt, Object.assign({}, props, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "2d/" }, { children: "Here's an example of 2d graphics, using SVG. You can move the point on the parabola and it'll show the tangent line and the equation for that tangent line. You can also set the position using the textbox." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "2d/consider" }, { children: "Now, one of the challenges of using this format is, most of the time clicking on the video will pause it, so how do you signify to the user which parts are interactive?" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "2d/signify" }, { children: "Here I used an orange pulse to signify that the point is movable, and I've also provided explicit instuctions. And I've got the controls on these gray panels that won't pause the video when clicked. So you want to try to establish and stick to some visual conventions." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "2d/fat" }, { children: "Another thing you have to watch out for is, on mobile, it's very hard to precisely hit the circle with your finger. So you have to make a transparent circle with a much larger radius to increase the clickable area. Any time you see \"fat-fingers\" in the code, that's what it's referring to." }))] })));
const ThreeDPrompt = (props) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Prompt, Object.assign({}, props, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "3d/" }, { children: "Now for 3d graphics. Here we have an interactive scene, so the controls are listed down there. You can close the help dialog if you want." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "3d/three" }, { children: "This is done using an amazing Javascript library called THREE.js, and you will definitely want to bookmark the documentation for that." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "3d/r3f" }, { children: ["And here I'm also using a library called react-three-fiber, which lets you create scenes in a much more declarative way.", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("br", {}), "Anyway,"] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "3d/hide" }, { children: "here we have a cylinder. And now," })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "3d/drag" }, { children: "here's an example of a movable object. So you can try moving the orange ring. I'll pause so you can try that out." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "3d/pause" }, { children: ["And then here's an example of animating a shape: ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, { on: "3d/anim" })] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "3d/parametric" }, { children: "Then here's a parametric surface, this is a trefoil knot." })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "3d/svg" }, { children: "Then here's an example of combining 2d formulas with 3d graphics. You render your LaTeX formulas to SVG, and then you can import them into a 3d scene." }))] })));
const FiveDPrompt = (props) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Prompt, Object.assign({}, props, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(rp_prompt__WEBPACK_IMPORTED_MODULE_1__.Cue, Object.assign({ on: "5d/" }, { children: "Finally, here's an example of mixing 2d and 3d graphics. So this is supposed to be illustrating the moduli stack of elliptic curves, to first approximation. So you can adjust the values of a and b, we've really got a 4-dimensional space and then we get elliptic curves as 2-dimensional cross sections of it. This example shows how to use graph implicit equations in two or three dimensions. So hopefully that's helpful for getting up and running; I look forward to seeing what you create with this tool." })) })));


/***/ }),

/***/ "./src/FiveD.tsx":
/*!***********************!*\
  !*** ./src/FiveD.tsx ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FiveD)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _liqvid_katex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @liqvid/katex */ "./node_modules/@liqvid/katex/dist/index.mjs");
/* harmony import */ var _lib_Input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/Input */ "./lib/Input.tsx");
/* harmony import */ var _env_prompts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @env/prompts */ "./src/@development/prompts.tsx");
/* harmony import */ var _5d_Elliptic__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./5d/Elliptic */ "./src/5d/Elliptic.tsx");
/* harmony import */ var _5d_Moduli__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./5d/Moduli */ "./src/5d/Moduli.tsx");







function FiveD() {
    const [a, setA] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);
    const [b, setB] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);
    const onChangeA = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e) => {
        setA(parseFloat(e.currentTarget.value));
    }, []);
    const onChangeB = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e) => {
        setB(parseFloat(e.currentTarget.value));
    }, []);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("section", Object.assign({ id: "sec-5d", "data-during": "5d/" }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("figure", Object.assign({ id: "elliptic", "data-affords": "click" }, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_5d_Elliptic__WEBPACK_IMPORTED_MODULE_5__["default"], Object.assign({}, { a, b })) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", Object.assign({ id: "fived-controls", "data-affords": "click" }, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("table", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("caption", { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_katex__WEBPACK_IMPORTED_MODULE_2__.KTX, { children: "y^2 = x^3 + ax + b" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("tbody", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("tr", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("td", { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_katex__WEBPACK_IMPORTED_MODULE_2__.KTX, { children: "a" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("td", { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("input", { min: -5, max: 5, step: "0.01", type: "range", onChange: onChangeA, value: a.toString() }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("td", { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Input__WEBPACK_IMPORTED_MODULE_3__["default"], { min: -5, max: 5, step: "0.01", type: "number", onChange: onChangeA, value: a.toString() }) })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("tr", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("td", { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_katex__WEBPACK_IMPORTED_MODULE_2__.KTX, { children: "b" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("td", { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Input__WEBPACK_IMPORTED_MODULE_3__["default"], { min: -5, max: 5, step: "0.01", type: "range", onChange: onChangeB, value: b.toString() }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("td", { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Input__WEBPACK_IMPORTED_MODULE_3__["default"], { min: -5, max: 5, step: "0.01", type: "number", onChange: onChangeB, value: b.toString() }) })] })] })] }) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("figure", Object.assign({ id: "moduli" }, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_5d_Moduli__WEBPACK_IMPORTED_MODULE_6__["default"], Object.assign({}, { a, b })) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_env_prompts__WEBPACK_IMPORTED_MODULE_4__.FiveDPrompt, {})] })));
}


/***/ }),

/***/ "./src/Intro.tsx":
/*!***********************!*\
  !*** ./src/Intro.tsx ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Intro)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var _env_prompts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @env/prompts */ "./src/@development/prompts.tsx");
/* harmony import */ var _lib_Link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lib/Link */ "./lib/Link.tsx");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(liqvid__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _markers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./markers */ "./src/markers.ts");






const { from } = liqvid__WEBPACK_IMPORTED_MODULE_3__.Utils.authoring, { onClick } = liqvid__WEBPACK_IMPORTED_MODULE_3__.Utils.mobile, { formatTime, formatTimeMs } = liqvid__WEBPACK_IMPORTED_MODULE_3__.Utils.time;
const contents = [
    ["Introduction", _markers__WEBPACK_IMPORTED_MODULE_5__.script.parseStart("intro/toc")],
    ["KaTeX", _markers__WEBPACK_IMPORTED_MODULE_5__.script.parseStart("ktx/")],
    ["MathJax", _markers__WEBPACK_IMPORTED_MODULE_5__.script.parseStart("mjx/")],
    ["XyJax", _markers__WEBPACK_IMPORTED_MODULE_5__.script.parseStart("xyjx/")],
    ["2D graphics", _markers__WEBPACK_IMPORTED_MODULE_5__.script.parseStart("2d/")],
    ["3D graphics", _markers__WEBPACK_IMPORTED_MODULE_5__.script.parseStart("3d/")]
];
function Intro() {
    const seek = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => onClick((e) => {
        e.preventDefault();
        _markers__WEBPACK_IMPORTED_MODULE_5__.playback.seek(e.currentTarget.getAttribute("href").slice(3));
    }), []);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("section", Object.assign({ id: "sec-intro", "data-during": "intro/" }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h1", { children: "Liqvid math tutorial" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("table", Object.assign({ className: "toc", "data-during": "intro/toc" }, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("tbody", { children: contents.map((row, i) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("tr", Object.assign({ "data-affords": "click" }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("th", { children: [i + 1, "."] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("td", Object.assign({ className: "name" }, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("a", Object.assign({ href: `?t=${formatTimeMs(row[1])}` }, seek, { children: row[0] })) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("td", Object.assign({ className: "time" }, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("a", Object.assign({ href: `?t=${formatTimeMs(row[1])}` }, seek, { children: formatTime(row[1]) })) }))] }), row[0]))) }) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("section", Object.assign({}, from("intro/main"), { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Link__WEBPACK_IMPORTED_MODULE_2__["default"], Object.assign({ href: "https://liqvidjs.org/" }, { children: "General-purpose tutorial" })) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("ul", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", Object.assign({}, from("intro/explain"), { children: "explains what ractives are, how to write and record them" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", Object.assign({}, from("intro/codebooth"), { children: "coding plugin" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", Object.assign({}, from("intro/paint"), { children: "freehand drawing plugin" }))] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p", Object.assign({}, from("intro/clone"), { children: ["Clone this tutorial: ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Link__WEBPACK_IMPORTED_MODULE_2__["default"], Object.assign({ href: "https://github.com/ysulyma/rp-tutorial-math" }, { children: "https://github.com/ysulyma/rp-tutorial-math" }))] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h3", Object.assign({}, from("intro/links"), { children: "Links" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("ul", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", Object.assign({}, from("intro/js"), { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Link__WEBPACK_IMPORTED_MODULE_2__["default"], Object.assign({ href: "https://javascript.info/" }, { children: "Javascript.info course" })) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", Object.assign({}, from("intro/ts"), { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Link__WEBPACK_IMPORTED_MODULE_2__["default"], Object.assign({ href: "https://www.typescriptlang.org/" }, { children: "TypeScript documentation" })) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", Object.assign({}, from("intro/react"), { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Link__WEBPACK_IMPORTED_MODULE_2__["default"], Object.assign({ href: "https://reactjs.org/" }, { children: "React documentation" })) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", Object.assign({}, from("intro/node"), { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Link__WEBPACK_IMPORTED_MODULE_2__["default"], Object.assign({ href: "https://nodejs.org/en/" }, { children: "Node.js" })) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("li", Object.assign({}, from("intro/epiplexis"), { children: ["Inspiration: ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Link__WEBPACK_IMPORTED_MODULE_2__["default"], Object.assign({ href: "https://epiplexis.xyz/" }, { children: "Epiplexis" }))] }))] })] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_env_prompts__WEBPACK_IMPORTED_MODULE_1__.IntroPrompt, {})] })));
}


/***/ }),

/***/ "./src/KaTeX.tsx":
/*!***********************!*\
  !*** ./src/KaTeX.tsx ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ KaTeXSlide)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var _env_prompts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @env/prompts */ "./src/@development/prompts.tsx");
/* harmony import */ var _lib_Block__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lib/Block */ "./lib/Block.tsx");
/* harmony import */ var _lib_Link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/Link */ "./lib/Link.tsx");
/* harmony import */ var _liqvid_katex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @liqvid/katex */ "./node_modules/@liqvid/katex/dist/index.mjs");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(liqvid__WEBPACK_IMPORTED_MODULE_5__);






const { from } = liqvid__WEBPACK_IMPORTED_MODULE_5__.Utils.authoring;
const { raw } = String;
function KaTeXSlide() {
    const m1 = raw `\htmlData{from-first=ktx/align-1}`;
    const m2 = raw `\htmlData{from-first=ktx/align-2}`;
    const m3 = raw `\htmlData{from-first=ktx/align-3}`;
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("section", Object.assign({ id: "sec-katex", "data-during": "ktx/" }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_lib_Block__WEBPACK_IMPORTED_MODULE_2__.Definition, Object.assign({ blockTitle: "Derivative of a function" }, { children: ["The ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("dfn", { children: ["derivative of ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_katex__WEBPACK_IMPORTED_MODULE_4__.KTX, { children: "f" }), " at ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_katex__WEBPACK_IMPORTED_MODULE_4__.KTX, { children: "x" }), ","] }), " denoted ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_katex__WEBPACK_IMPORTED_MODULE_4__.KTX, { children: "f'(x)," }), " is", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_katex__WEBPACK_IMPORTED_MODULE_4__.KTX, Object.assign({ display: true }, from("ktx/display"), { children: raw `f'(x) := \lim_{\epsilon\to0}\frac{f(x+\epsilon)-f(x)}{\epsilon}.` }))] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Block__WEBPACK_IMPORTED_MODULE_2__.Example, Object.assign({ blockTitle: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: ["The derivative of ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_katex__WEBPACK_IMPORTED_MODULE_4__.KTX, { children: "x^2" })] }) }, from("ktx/ex"), { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_katex__WEBPACK_IMPORTED_MODULE_4__.KTX, Object.assign({ display: true, reparse: true }, { children: raw `\begin{aligned}
        \lim_{\epsilon\to0}\frac{(x+\epsilon)^2-x^2}{\epsilon}
        &${m1}{= \lim_{\epsilon\to0}\frac{(x^2 + 2\epsilon x + \epsilon^2)-x^2}{\epsilon}}\\[1em]
        &${m2}{= \lim_{\epsilon\to0}\Big(2x + \epsilon\Big)}\\[1em]
        &${m3}{= 2x.}
      \end{aligned}` })) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_lib_Block__WEBPACK_IMPORTED_MODULE_2__.Example, Object.assign({}, from("ktx/macros"), { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p", { children: ["Can load macros from file: ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_katex__WEBPACK_IMPORTED_MODULE_4__.KTX, { children: raw `\THH(R;\Z_p)` })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", Object.assign({}, from("ktx/docs"), { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Link__WEBPACK_IMPORTED_MODULE_3__["default"], Object.assign({ href: "https://katex.org/" }, { children: "KaTeX documentation" })) }))] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_env_prompts__WEBPACK_IMPORTED_MODULE_1__.KaTeXPrompt, {})] })));
}


/***/ }),

/***/ "./src/MathJax.tsx":
/*!*************************!*\
  !*** ./src/MathJax.tsx ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MathJaxSlide)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var _env_prompts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @env/prompts */ "./src/@development/prompts.tsx");
/* harmony import */ var _lib_Block__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lib/Block */ "./lib/Block.tsx");
/* harmony import */ var _lib_Link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/Link */ "./lib/Link.tsx");
/* harmony import */ var _liqvid_mathjax__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @liqvid/mathjax */ "./node_modules/@liqvid/mathjax/dist/index.mjs");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(liqvid__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);







const { from } = liqvid__WEBPACK_IMPORTED_MODULE_5__.Utils.authoring;
const { raw } = String;
function MathJaxSlide() {
    const m1 = raw `\data{from-first="mjx/align-1"}`;
    const m2 = raw `\data{from-first="mjx/align-2"}`;
    const m3 = raw `\data{from-first="mjx/align-3"}`;
    const ref = (0,react__WEBPACK_IMPORTED_MODULE_6__.useRef)();
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("section", Object.assign({ id: "sec-mathjax", "data-during": "mjx/" }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_lib_Block__WEBPACK_IMPORTED_MODULE_2__.Definition, Object.assign({ blockTitle: "Derivative of a function" }, { children: ["The ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("dfn", { children: ["derivative of ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_mathjax__WEBPACK_IMPORTED_MODULE_4__.MJX, { children: "f" }), " at ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_mathjax__WEBPACK_IMPORTED_MODULE_4__.MJX, { children: "x" }), ","] }), " denoted ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_mathjax__WEBPACK_IMPORTED_MODULE_4__.MJX, { children: "f'(x)," }), " is", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_mathjax__WEBPACK_IMPORTED_MODULE_4__.MJX, Object.assign({ className: "goose", display: true }, from("mjx/display"), { reparse: true }, { children: raw `f'(x) := \lim_{\epsilon\to0}\frac{f(x+\epsilon)-f(x)}{\epsilon}.` }))] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_lib_Block__WEBPACK_IMPORTED_MODULE_2__.Example, Object.assign({ blockTitle: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: ["The derivative of ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_mathjax__WEBPACK_IMPORTED_MODULE_4__.MJX, { children: "x^2" })] }) }, from("mjx/ex"), { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_mathjax__WEBPACK_IMPORTED_MODULE_4__.MJX, Object.assign({ display: true, reparse: true, ref: ref }, { children: raw `\begin{aligned}
        \lim_{\epsilon\to0}\frac{(x+\epsilon)^2-x^2}{\epsilon}
        &${m1}{= \lim_{\epsilon\to0}\frac{(x^2 + 2\epsilon x + \epsilon^2)-x^2}{\epsilon}}\\[1em]
        &${m2}{= \lim_{\epsilon\to0}\Big(2x + \epsilon\Big)}\\[1em]
        &${m3}{= 2x.}
      \end{aligned}` })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p", Object.assign({}, from("mjx/extn"), { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("code", { children: "\\data" }), " command provided by MathJax extension ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Link__WEBPACK_IMPORTED_MODULE_3__["default"], Object.assign({ href: "https://github.com/ysulyma/mathjax-extensions/" }, { children: "annotations.js" }))] }))] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_lib_Block__WEBPACK_IMPORTED_MODULE_2__.Example, Object.assign({}, from("mjx/macros"), { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p", { children: ["Can load macros from file: ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_mathjax__WEBPACK_IMPORTED_MODULE_4__.MJX, { children: raw `\THH(R;\Z_p)` })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", Object.assign({}, from("mjx/docs"), { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Link__WEBPACK_IMPORTED_MODULE_3__["default"], Object.assign({ href: "https://docs.mathjax.org/en/latest/" }, { children: "MathJax documentation" })) }))] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_env_prompts__WEBPACK_IMPORTED_MODULE_1__.MathJaxPrompt, {})] })));
}


/***/ }),

/***/ "./src/ThreeD.tsx":
/*!************************!*\
  !*** ./src/ThreeD.tsx ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Scene)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var _env_prompts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @env/prompts */ "./src/@development/prompts.tsx");
/* harmony import */ var _lib_Link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lib/Link */ "./lib/Link.tsx");
/* harmony import */ var _lib_ThreeFiber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/ThreeFiber */ "./lib/ThreeFiber.tsx");
/* harmony import */ var _liqvid_react_three__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @liqvid/react-three */ "./node_modules/@liqvid/react-three/dist/index.mjs");
/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @react-three/fiber */ "./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(liqvid__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _3d_Arrow__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./3d/Arrow */ "./src/3d/Arrow.tsx");
/* harmony import */ var _3d_Cylinder__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./3d/Cylinder */ "./src/3d/Cylinder.tsx");
/* harmony import */ var _3d_Parametric__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./3d/Parametric */ "./src/3d/Parametric.tsx");
/* harmony import */ var _3d_Sphere__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./3d/Sphere */ "./src/3d/Sphere.tsx");
/* harmony import */ var _markers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./markers */ "./src/markers.ts");













const { from } = liqvid__WEBPACK_IMPORTED_MODULE_4__.Utils.authoring, { between } = liqvid__WEBPACK_IMPORTED_MODULE_4__.Utils.misc;
function CameraControls() {
    const $three = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_11__.useThree)();
    const context = (0,_lib_ThreeFiber__WEBPACK_IMPORTED_MODULE_3__.useApi)();
    const { camera, gl: { domElement } } = $three;
    domElement.$three = $three;
    camera.up.set(0, 0, 1);
    const controls = (0,react__WEBPACK_IMPORTED_MODULE_5__.useRef)();
    (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_11__.useFrame)(() => { var _a; return (_a = controls.current) === null || _a === void 0 ? void 0 : _a.update(); });
    (0,react__WEBPACK_IMPORTED_MODULE_5__.useEffect)(() => {
        context.controls = controls.current;
    }, [controls.current]);
    (0,react__WEBPACK_IMPORTED_MODULE_5__.useEffect)(() => {
        camera.position.set(4.3, -9.5, 6);
        camera.lookAt(new THREE.Vector3(0, 0, 0));
        camera.up.set(0, 0, 1);
    }, []);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("orbitControls", { ref: controls, args: [camera, domElement] }));
}
const m = _markers__WEBPACK_IMPORTED_MODULE_10__.script.parseStart("3d/pause");
const arrowIndex = _markers__WEBPACK_IMPORTED_MODULE_10__.script.markerNumberOf("3d/svg");
function Scene() {
    const helperRef = (0,react__WEBPACK_IMPORTED_MODULE_5__.useRef)();
    (0,liqvid__WEBPACK_IMPORTED_MODULE_4__.useMarkerUpdate)(() => {
        if (!helperRef.current)
            return;
        helperRef.current.visible = (_markers__WEBPACK_IMPORTED_MODULE_10__.script.markerIndex < arrowIndex);
    }, []);
    const prev = (0,react__WEBPACK_IMPORTED_MODULE_5__.useRef)(_markers__WEBPACK_IMPORTED_MODULE_10__.playback.currentTime);
    const EPSILON = 300;
    (0,liqvid__WEBPACK_IMPORTED_MODULE_4__.useTime)(t => {
        if (between(m - EPSILON, prev.current, m) && between(m, t, m + EPSILON)) {
            _markers__WEBPACK_IMPORTED_MODULE_10__.playback.pause();
        }
        prev.current = t;
    }, []);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("figure", Object.assign({ id: "three-d", "data-during": "3d/" }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("aside", Object.assign({ id: "three-explain" }, from("3d/three", "3d/hide"), { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Link__WEBPACK_IMPORTED_MODULE_2__["default"], Object.assign({ href: "https://threejs.org/docs/" }, { children: "THREE.js" })), " for 3d graphics"] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p", Object.assign({}, from("3d/r3f"), { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Link__WEBPACK_IMPORTED_MODULE_2__["default"], Object.assign({ href: "https://docs.pmnd.rs/react-three-fiber/" }, { children: "@react-three/fiber" })), " for use with React"] }))] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_react_three__WEBPACK_IMPORTED_MODULE_12__.Canvas, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_lib_ThreeFiber__WEBPACK_IMPORTED_MODULE_3__.APIHelper, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("ambientLight", {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("pointLight", { position: [10, 10, 10] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CameraControls, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("axesHelper", { args: [5], ref: helperRef }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_3d_Cylinder__WEBPACK_IMPORTED_MODULE_7__["default"], {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_3d_Sphere__WEBPACK_IMPORTED_MODULE_9__["default"], {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_3d_Parametric__WEBPACK_IMPORTED_MODULE_8__["default"], {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_3d_Arrow__WEBPACK_IMPORTED_MODULE_6__["default"], {})] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_env_prompts__WEBPACK_IMPORTED_MODULE_1__.ThreeDPrompt, {})] })));
}


/***/ }),

/***/ "./src/TwoD.tsx":
/*!**********************!*\
  !*** ./src/TwoD.tsx ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TwoD)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var _env_prompts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @env/prompts */ "./src/@development/prompts.tsx");
/* harmony import */ var _lib_FatFingers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lib/FatFingers */ "./lib/FatFingers.tsx");
/* harmony import */ var _lib_GlowOrb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/GlowOrb */ "./lib/GlowOrb.tsx");
/* harmony import */ var _lib_Input__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lib/Input */ "./lib/Input.tsx");
/* harmony import */ var _liqvid_katex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @liqvid/katex */ "./node_modules/@liqvid/katex/dist/index.mjs");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(liqvid__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__);








const { from } = liqvid__WEBPACK_IMPORTED_MODULE_6__.Utils.authoring, { dragHelperReact } = liqvid__WEBPACK_IMPORTED_MODULE_6__.Utils.interactivity, { constrain, range } = liqvid__WEBPACK_IMPORTED_MODULE_6__.Utils.misc, { anyHover } = liqvid__WEBPACK_IMPORTED_MODULE_6__.Utils.mobile, { screenToSVG } = liqvid__WEBPACK_IMPORTED_MODULE_6__.Utils.svg;
const { raw } = String;
const a = -4, b = 4;
const minX = -5, maxX = 5;
const negF = (x) => [x, 2 - x * x];
const f = (x) => [x, x * x - 2];
const df = (x) => 2 * x;
function TwoD() {
    const [x, setX] = (0,react__WEBPACK_IMPORTED_MODULE_7__.useState)(1);
    const svgRef = (0,react__WEBPACK_IMPORTED_MODULE_7__.useRef)();
    const [showOrb, setShowOrb] = (0,react__WEBPACK_IMPORTED_MODULE_7__.useState)(true);
    (0,react__WEBPACK_IMPORTED_MODULE_7__.useEffect)(() => {
        for (const target of Array.from(svgRef.current.querySelectorAll("circle"))) {
            target.addEventListener("touchstart", e => e.preventDefault(), { passive: false });
        }
    }, [svgRef.current]);
    const onDown = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)((e) => {
        setShowOrb(false);
        document.body.classList.add("dragging");
    }, []);
    const onUp = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(() => {
        document.body.classList.remove("dragging");
    }, []);
    const onMoveA = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)((...[e, hit]) => {
        const [svgX, svgY] = screenToSVG(svgRef.current, hit.x, hit.y);
        setX(constrain(a, closestPoint(svgX, -svgY), b));
    }, [svgRef]);
    const A = f(x);
    const slope = df(x), intercept = A[1] - slope * A[0];
    let tangentEqn;
    if (slope === 0) {
        tangentEqn = fmt(intercept);
    }
    else {
        tangentEqn = fmt(slope) + "x";
        if (intercept > 0) {
            tangentEqn += "+" + fmt(intercept);
        }
        else if (intercept < 0) {
            tangentEqn += fmt(intercept);
        }
    }
    const inputA = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)((e) => {
        const val = parseFloat(e.currentTarget.value);
        if (!isNaN(val))
            setX(constrain(a, val, b));
    }, []);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("section", Object.assign({ id: "sec-2d", "data-during": "2d/" }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("svg", Object.assign({ id: "tangent-demo", ref: svgRef, viewBox: "-5.3 -5.3 10.6 10.6", "data-affords": "click" }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CartesianGrid, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("path", { className: "plot", d: graph(negF, a, b, 200) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("line", { className: "tangent-line", x1: minX, y1: -(minX * slope + intercept), x2: maxX, y2: -(maxX * slope + intercept) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_FatFingers__WEBPACK_IMPORTED_MODULE_2__["default"], Object.assign({ className: "draggable point-A", cx: A[0], cy: -A[1], r: "0.1", fatR: "0.4" }, dragHelperReact(onMoveA, onDown, onUp))), showOrb && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_GlowOrb__WEBPACK_IMPORTED_MODULE_3__["default"], { className: "glow", cx: A[0], cy: -A[1], dur: "1s", r1: 0.1, r2: 0.3 })] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", Object.assign({ id: "explain", "data-affords": "click" }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_katex__WEBPACK_IMPORTED_MODULE_5__.KTX, Object.assign({ display: true, id: "defn" }, { children: raw `
          \begin{aligned}
            \htmlClass{plot}{y} &\htmlClass{plot}{= x^2-2}\\
            \htmlClass{tangent-line}{y} &\htmlClass{tangent-line}{= ${tangentEqn}}
          \end{aligned}
        ` })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("table", { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("tbody", { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("tr", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("td", { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_katex__WEBPACK_IMPORTED_MODULE_5__.KTX, Object.assign({ id: "val-c" }, { children: raw `\htmlClass{pt1}{c =}` })) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("td", { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Input__WEBPACK_IMPORTED_MODULE_4__["default"], { onChange: inputA, type: "text", value: fmt(x).toString() }, x) })] }) }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p", { children: ["Try moving the point on the graph with your ", anyHover ? "mouse" : "finger", "."] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h3", Object.assign({}, from("2d/consider"), { children: "Considerations" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("ul", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", Object.assign({}, from("2d/signify"), { children: "use consistent signifiers to indicate interactive components" })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("li", Object.assign({}, from("2d/fat"), { children: ["need larger hit area for mobile (", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("code", { children: "fat-fingers" }), " in the code)"] }))] })] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_env_prompts__WEBPACK_IMPORTED_MODULE_1__.TwoDPrompt, {})] })));
}
function CartesianGrid() {
    const minY = -5, maxY = 5;
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("g", { children: [range(minX, maxX + 1).map(n => n !== 0 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_7__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("line", { className: "gridline", x1: n, x2: n, y1: -maxY, y2: -minY }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("line", { className: "axis-tick", x1: n, x2: n, y1: "-0.15", y2: "0.15" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("text", Object.assign({ className: "axis-label", x: n, y: 0, dx: 0.15, dy: .5 }, { children: n.toString().replace("-", "–") }))] }, `x_${n}`))), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("text", Object.assign({ className: "axis-label", x: 0, y: 0, dx: 0.25, dy: 0.4 }, { children: "0" })), range(minY, maxY + 1).map(n => n !== 0 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_7__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("line", { className: "gridline", x1: minX, x2: maxX, y1: -n, y2: -n }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("line", { className: "axis-tick", x1: -.15, x2: .15, y1: -n, y2: -n }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("text", Object.assign({ className: "axis-label", x: 0, y: -n, dx: 0.4 }, { children: n.toString().replace("-", "–") }))] }, `y-${n}`))), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("line", { className: "major-axis", x1: minX, x2: maxX, y1: "0", y2: "0" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("line", { className: "major-axis", x1: "0", x2: "0", y1: -minY, y2: -maxY })] }));
}
function fmt(x, l = 4) {
    return parseFloat(x.toFixed(l));
}
function closestPoint(x0, y0) {
    const minX = a, maxX = b;
    const samples = 1000;
    const dx = (maxX - minX) / samples;
    let best = minX, minVal = (x0 - best) ** 2 + (y0 - f(best)[1]) ** 2;
    for (let i = 1; i <= samples; ++i) {
        const xi = minX + i * dx;
        const val = (x0 - xi) ** 2 + (y0 - f(xi)[1]) ** 2;
        if (val < minVal) {
            minVal = val;
            best = xi;
        }
    }
    return best;
}
function graph(f, a = 0, b = 1, sampling = 100) {
    const instructions = new Array(sampling + 1)
        .fill(null)
        .map((_, n) => {
        const [x, y] = f(a + (n / sampling) * (b - a));
        return (n === 0) ? `M ${x} ${y}` : `L ${x} ${y}`;
    });
    return instructions.join(" ");
}


/***/ }),

/***/ "./src/XyJax.tsx":
/*!***********************!*\
  !*** ./src/XyJax.tsx ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ XyJaxSlide)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var _lib_Block__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lib/Block */ "./lib/Block.tsx");
/* harmony import */ var _lib_Link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lib/Link */ "./lib/Link.tsx");
/* harmony import */ var _liqvid_mathjax__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @liqvid/mathjax */ "./node_modules/@liqvid/mathjax/dist/index.mjs");
/* harmony import */ var _liqvid_xyjax__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @liqvid/xyjax */ "./node_modules/@liqvid/xyjax/dist/index.mjs");
/* harmony import */ var _xyjax_AnimatedArrows__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./xyjax/AnimatedArrows */ "./src/xyjax/AnimatedArrows.tsx");
/* harmony import */ var _xyjax_Brouwer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./xyjax/Brouwer */ "./src/xyjax/Brouwer.tsx");
/* harmony import */ var _env_prompts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @env/prompts */ "./src/@development/prompts.tsx");








const { raw } = String;
function XyJaxSlide() {
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("section", Object.assign({ id: "sec-xyjax", "data-during": "xyjx/" }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Block__WEBPACK_IMPORTED_MODULE_1__.Remark, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p", { children: ["commutative diagrams (", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("code", { children: "xymatrix" }), " syntax) using ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_Link__WEBPACK_IMPORTED_MODULE_2__["default"], Object.assign({ href: "https://sonoisa.github.io/xyjax-v3/xyjax-v3.html" }, { children: "XyJax" }))] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("aside", Object.assign({ id: "xyjax-demos" }, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_mathjax__WEBPACK_IMPORTED_MODULE_3__.MJX, Object.assign({ "data-during": "xyjx/diagram" }, { children: raw `${"\\"}xymatrix{
          A \ar[r] \ar[d] & B \ar[d]\\
          C \ar[r] & D
        }` })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_mathjax__WEBPACK_IMPORTED_MODULE_3__.MJX, Object.assign({ "data-during": "xyjx/pullback" }, { children: raw `
          \vcenter{${"\\"}xymatrix{
            X \times_Z Y \pullback \ar[r] \ar[d] & Y \ar[d]\\\
            X \ar[r] & Z
          }}
          \quad
          \vcenter{${"\\"}xymatrix{
            Z \ar[d] \ar[r] & Y \ar[d]\\\
            X \ar[r] & X\cup_Z Y \pushout
          }}
          ` })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_mathjax__WEBPACK_IMPORTED_MODULE_3__.MJX, Object.assign({ "data-during": "xyjx/color" }, { children: raw `
        ${"\\"}xymatrix{
          H_n(X,A) \ar@[color${(0,_liqvid_xyjax__WEBPACK_IMPORTED_MODULE_4__.xyEncodeColor)("AF1866")}][r]^-{\color{#AF1866} \partial} & H_{n-1}(A)
        }
        ` })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_xyjax_AnimatedArrows__WEBPACK_IMPORTED_MODULE_5__.AnimatedArrows, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_xyjax_Brouwer__WEBPACK_IMPORTED_MODULE_6__.Brouwer, {})] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_env_prompts__WEBPACK_IMPORTED_MODULE_7__.XyJaxPrompt, {})] })));
}


/***/ }),

/***/ "./src/markers.ts":
/*!************************!*\
  !*** ./src/markers.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "highlights": () => (/* binding */ highlights),
/* harmony export */   "markers": () => (/* binding */ markers),
/* harmony export */   "playback": () => (/* binding */ playback),
/* harmony export */   "script": () => (/* binding */ script)
/* harmony export */ });
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(liqvid__WEBPACK_IMPORTED_MODULE_0__);

const markers = [
    ["intro/toc", "0:12.475"],
    ["intro/main", "0:08.619"],
    ["intro/explain", "0:06.572"],
    ["intro/codebooth", "0:02.740"],
    ["intro/paint", "0:08.239"],
    ["intro/clone", "0:09.802"],
    ["intro/links", "0:05.315"],
    ["intro/js", "0:03.866"],
    ["intro/ts", "0:04.530"],
    ["intro/react", "0:07.922"],
    ["intro/node", "0:12.258"],
    ["intro/epiplexis", "0:05.510"],
    ["ktx/", "0:05.211"],
    ["ktx/display", "0:02.478"],
    ["ktx/ex", "0:01.233"],
    ["ktx/align-1", "0:00.805"],
    ["ktx/align-2", "0:01.690"],
    ["ktx/align-3", "0:08.769"],
    ["ktx/macros", "0:19.377"],
    ["ktx/docs", "0:04.313"],
    ["mjx/", "0:04.922"],
    ["mjx/display", "0:02.389"],
    ["mjx/ex", "0:00.834"],
    ["mjx/align-1", "0:00.263"],
    ["mjx/align-2", "0:00.714"],
    ["mjx/align-3", "0:00.982"],
    ["mjx/extn", "0:11.211"],
    ["mjx/macros", "0:06.839"],
    ["mjx/docs", "0:19.265"],
    ["xyjx/", "0:07.763"],
    ["xyjx/diagram", "0:15.260"],
    ["xyjx/pullback", "0:05.948"],
    ["xyjx/color", "0:03.396"],
    ["xyjx/arrows", "0:02.146"],
    ["xyjx/arrows/anim", "0:02.407"],
    ["xyjx/brouwer", "0:08.851"],
    ["xyjx/pi1", "0:02.191"],
    ["xyjx/apply", "0:03.569"],
    ["xyjx/contradiction", "0:05.652"],
    ["2d/", "0:13.371"],
    ["2d/consider", "0:12.590"],
    ["2d/signify", "0:15.475"],
    ["2d/fat", "0:17.716"],
    ["3d/", "0:11.866"],
    ["3d/three", "0:08.654"],
    ["3d/r3f", "0:08.660"],
    ["3d/hide", "0:03.719"],
    ["3d/drag", "0:10.377"],
    ["3d/pause", "0:03.587"],
    ["3d/anim", "0:02.586"],
    ["3d/parametric", "0:05.215"],
    ["3d/svg", "0:11.541"],
    ["5d/", "0:43.52"]
];
const script = new liqvid__WEBPACK_IMPORTED_MODULE_0__.Script(markers);
const playback = script.playback;
const highlights = [
    { title: "KaTeX", time: script.parseStart("ktx/") },
    { title: "MathJax", time: script.parseStart("mjx/") },
    { title: "XyJax", time: script.parseStart("xyjx/") },
    { title: "2D graphics", time: script.parseStart("2d/") },
    { title: "3D graphics", time: script.parseStart("3d/") }
];


/***/ }),

/***/ "./src/xyjax/AnimatedArrows.tsx":
/*!**************************************!*\
  !*** ./src/xyjax/AnimatedArrows.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnimatedArrows": () => (/* binding */ AnimatedArrows)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var _liqvid_mathjax__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liqvid/mathjax */ "./node_modules/@liqvid/mathjax/dist/index.mjs");
/* harmony import */ var _liqvid_xyjax__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @liqvid/xyjax */ "./node_modules/@liqvid/xyjax/dist/index.mjs");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(liqvid__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _markers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../markers */ "./src/markers.ts");






const { animate, bezier, easings } = liqvid__WEBPACK_IMPORTED_MODULE_3__.Utils.animation;
const fadeTail = animate({
    startTime: _markers__WEBPACK_IMPORTED_MODULE_5__.script.parseStart("xyjx/arrows/anim"),
    duration: 800,
    easing: bezier(...easings.easeOutCubic)
});
const headFade = {
    delay: _markers__WEBPACK_IMPORTED_MODULE_5__.script.parseStart("xyjx/arrows/anim") + 500,
    duration: 200,
    easing: "ease-out",
    fill: "both"
};
const { raw } = String;
function AnimatedArrows() {
    const ref = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)();
    (0,_liqvid_xyjax__WEBPACK_IMPORTED_MODULE_2__.useAnimateArrows)({
        head: "*[data-anim] path",
        tail: "*[data-anim] line",
        label: ".fade",
        ref,
        tailFn: fadeTail,
        headFade,
        labelFade: headFade
    });
    const line = "\"anim\":true";
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_mathjax__WEBPACK_IMPORTED_MODULE_1__.MJX, Object.assign({ reparse: true, ref: ref, "data-during": "xyjx/arrows" }, { children: raw `
      ${"\\"}xymatrix{
        {*} \ar[d]_-0 \ar[r]^-{t_0} & \mathbb R \ar[d]^- p\\
        I \ar[r]_-{\alpha} \ar@[data${(0,_liqvid_xyjax__WEBPACK_IMPORTED_MODULE_2__.tob52)(line)}]@{..>}[ur]^-{\class{fade}{\exists!\ \widetilde\alpha}} & S^1
      }
    ` })));
}


/***/ }),

/***/ "./src/xyjax/Brouwer.tsx":
/*!*******************************!*\
  !*** ./src/xyjax/Brouwer.tsx ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Brouwer": () => (/* binding */ Brouwer)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var _liqvid_mathjax__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liqvid/mathjax */ "./node_modules/@liqvid/mathjax/dist/index.mjs");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(liqvid__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _markers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../markers */ "./src/markers.ts");





const { from } = liqvid__WEBPACK_IMPORTED_MODULE_2__.Utils.authoring;
const dur = {
    piFadeIn: 300,
    fadeOut: 400,
    fadeIn: 400
};
const times = {
    piFadeIn: _markers__WEBPACK_IMPORTED_MODULE_4__.script.parseStart("xyjx/pi1"),
    fadeOut: _markers__WEBPACK_IMPORTED_MODULE_4__.script.parseStart("xyjx/apply"),
    contradiction: _markers__WEBPACK_IMPORTED_MODULE_4__.script.parseStart("xyjx/contradiction"),
};
const piFadeIn = () => _markers__WEBPACK_IMPORTED_MODULE_4__.playback.newAnimation([{ opacity: 0 }, { opacity: 1 }], {
    delay: times.piFadeIn,
    duration: dur.piFadeIn,
    easing: "ease-in",
    fill: "both"
});
const fadeOut = () => _markers__WEBPACK_IMPORTED_MODULE_4__.playback.newAnimation([{ opacity: 1 }, { opacity: 0 }], {
    delay: times.fadeOut,
    duration: dur.fadeOut,
    easing: "ease-out",
    fill: "forwards"
});
const fadeIn = () => _markers__WEBPACK_IMPORTED_MODULE_4__.playback.newAnimation([{ opacity: 0 }, { opacity: 1 }], {
    delay: times.fadeOut + dur.fadeOut * 2 / 3,
    duration: dur.fadeIn,
    easing: "ease-in",
    fill: "backwards"
});
const { raw } = String;
function Brouwer() {
    const ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {
        ref.current.ready.then(() => {
            const node = ref.current.domElement;
            for (const term of getDelimiters(node, "pi")) {
                piFadeIn()(term);
            }
            for (const term of getDelimiters(node, "out")) {
                fadeOut()(term);
            }
            for (const term of getDelimiters(node, "in")) {
                fadeIn()(term);
            }
        });
    }, []);
    (0,liqvid__WEBPACK_IMPORTED_MODULE_2__.useTime)(val => ref.current.domElement.classList.toggle("contradiction", val), t => (t >= times.contradiction), []);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_liqvid_mathjax__WEBPACK_IMPORTED_MODULE_1__.MJX, Object.assign({ ref: ref }, from("xyjx/brouwer"), { children: raw `
      \class{pi-l}{}\pi_1\left(\class{pi-r}{}
      \vcenter{${"\\"}xymatrix@=1.5em{
        \class{out-l}{}S^1\class{out-r}{} \class{in-l}{}\hspace{-.8em}\Z\class{in-r}{} \ar@{=}[rr] \ar[ddr] &&
        \class{out-l}{}S^1\class{out-r}{} \class{in-l}{}\hspace{-1.15em}\Z\class{in-r}{}\\
        \\
        & \class{out-l}{}D^2\class{out-r}{} \class{in-l}{}\hspace{-1em}0\class{in-r}{} \hspace{.2em} \ar[uur]
      }}
      \hspace{.2em}
      \class{pi-l}{}\right)\class{pi-r}{}
    ` })));
}
function getDelimiters(node, name) {
    const nodes = [];
    const delimiters = Array.from(node.getElementsByClassName(`${name}-l`));
    for (const delimL of delimiters) {
        let next = delimL.nextElementSibling;
        while (true) {
            if (next.classList.contains(`${name}-r`)) {
                break;
            }
            if (next.childElementCount > 0) {
                next = next.firstElementChild;
            }
            nodes.push(next);
            let parent = next;
            while (!parent.nextElementSibling) {
                parent = parent.parentElement;
                if (parent === document.body) {
                    throw new Error(`Could not find matching delimiter for ${name}`);
                }
            }
            next = parent.nextElementSibling;
        }
    }
    return nodes;
}


/***/ }),

/***/ "liqvid":
/*!*************************!*\
  !*** external "Liqvid" ***!
  \*************************/
/***/ ((module) => {

module.exports = Liqvid;

/***/ }),

/***/ "rangetouch":
/*!*****************************!*\
  !*** external "RangeTouch" ***!
  \*****************************/
/***/ ((module) => {

module.exports = RangeTouch;

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "React" ***!
  \************************/
/***/ ((module) => {

module.exports = React;

/***/ }),

/***/ "react-dom":
/*!***************************!*\
  !*** external "ReactDOM" ***!
  \***************************/
/***/ ((module) => {

module.exports = ReactDOM;

/***/ }),

/***/ "three":
/*!************************!*\
  !*** external "THREE" ***!
  \************************/
/***/ ((module) => {

module.exports = THREE;

/***/ }),

/***/ "./node_modules/@liqvid/katex/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@liqvid/katex/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KTX": () => (/* binding */ KTX),
/* harmony export */   "KaTeXReady": () => (/* binding */ KaTeXReady),
/* harmony export */   "RenderGroup": () => (/* binding */ RenderGroup)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime.js */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var _liqvid_utils_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liqvid/utils/react */ "./node_modules/@liqvid/utils/dist/esm/react.js");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "react");





// option of loading KaTeX asynchronously
const KaTeXLoad = new Promise((resolve) => {
    const script = document.querySelector("script[src*=\"katex.js\"], script[src*=\"katex.min.js\"]");
    if (!script)
        return;
    if (window.hasOwnProperty("katex")) {
        resolve(katex);
    }
    else {
        script.addEventListener("load", () => resolve(katex));
    }
});
// load macros from <head>
const KaTeXMacros = new Promise((resolve) => {
    const macros = {};
    const scripts = Array.from(document.querySelectorAll("head > script[type='math/tex']"));
    return Promise.all(scripts.map(script => fetch(script.src)
        .then(res => {
        if (res.ok)
            return res.text();
        throw new Error(`${res.status} ${res.statusText}: ${script.src}`);
    })
        .then(tex => {
        Object.assign(macros, parseMacros(tex));
    }))).then(() => resolve(macros));
});
/**
 * Ready Promise
 */
const KaTeXReady = Promise.all([KaTeXLoad, KaTeXMacros]);
/**
 * Parse \newcommand macros in a file.
 * Also supports \ktxnewcommand (for use in conjunction with MathJax).
 * @param file TeX file to parse
*/
function parseMacros(file) {
    const macros = {};
    const rgx = /\\(?:ktx)?newcommand\{(.+?)\}(?:\[\d+\])?\{/g;
    let match;
    while (match = rgx.exec(file)) {
        let body = "";
        const macro = match[1];
        let braceCount = 1;
        for (let i = match.index + match[0].length; (braceCount > 0) && (i < file.length); ++i) {
            const char = file[i];
            if (char === "{") {
                braceCount++;
            }
            else if (char === "}") {
                braceCount--;
                if (braceCount === 0)
                    break;
            }
            else if (char === "\\") {
                body += file.slice(i, i + 2);
                ++i;
                continue;
            }
            body += char;
        }
        macros[macro] = body;
    }
    return macros;
}

/** Component for KaTeX code */
const KTX$1 = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function KTX(props, ref) {
    const spanRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();
    const { children, display = false, ...attrs } = props;
    const [ready, resolve] = (0,_liqvid_utils_react__WEBPACK_IMPORTED_MODULE_1__.usePromise)();
    // handle
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useImperativeHandle)(ref, () => ({
        domElement: spanRef.current,
        ready
    }));
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {
        KaTeXReady.then(([katex, macros]) => {
            katex.render(children.toString(), spanRef.current, {
                displayMode: !!display,
                macros,
                strict: "ignore",
                throwOnError: false,
                trust: true
            });
            /* move katex into placeholder element */
            const child = spanRef.current.firstElementChild;
            // copy classes
            for (let i = 0, len = child.classList.length; i < len; ++i) {
                spanRef.current.classList.add(child.classList.item(i));
            }
            // move children
            while (child.childNodes.length > 0) {
                spanRef.current.appendChild(child.firstChild);
            }
            // delete child
            child.remove();
            // resolve promise
            resolve();
        });
    }, [children]);
    // Google Chrome fails without this
    if (display) {
        if (!attrs.style)
            attrs.style = {};
        attrs.style.display = "block";
    }
    return ((0,react_jsx_runtime_js__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { ...attrs, ref: spanRef }));
});

/** Component for KaTeX code */
const KTX = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function KTX(props, ref) {
    const { obstruct = "canplay canplaythrough", reparse = false, ...attrs } = props;
    const plain = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();
    const combined = (0,_liqvid_utils_react__WEBPACK_IMPORTED_MODULE_1__.combineRefs)(plain, ref);
    const player = (0,liqvid__WEBPACK_IMPORTED_MODULE_2__.usePlayer)();
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {
        // obstruction
        if (obstruct.match(/\bcanplay\b/)) {
            player.obstruct("canplay", plain.current.ready);
        }
        if (obstruct.match("canplaythrough")) {
            player.obstruct("canplaythrough", plain.current.ready);
        }
        // reparsing
        if (reparse) {
            plain.current.ready.then(() => player.reparseTree(plain.current.domElement));
        }
    }, []);
    return ((0,react_jsx_runtime_js__WEBPACK_IMPORTED_MODULE_0__.jsx)(KTX$1, { ref: combined, ...attrs }));
});

/**
 * Wait for several things to be rendered
*/
const RenderGroup = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function RenderGroup(props, ref) {
    const [ready, resolve] = (0,_liqvid_utils_react__WEBPACK_IMPORTED_MODULE_1__.usePromise)();
    // handle
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useImperativeHandle)(ref, () => ({ ready }));
    const elements = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);
    const promises = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);
    // reparsing
    const player = (0,liqvid__WEBPACK_IMPORTED_MODULE_2__.usePlayer)();
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {
        // promises
        Promise.all(promises.current).then(() => {
            // reparse
            if (props.reparse) {
                player.reparseTree(leastCommonAncestor(elements.current));
            }
            // ready()
            resolve();
        });
    }, []);
    return (0,_liqvid_utils_react__WEBPACK_IMPORTED_MODULE_1__.recursiveMap)(props.children, node => {
        if (shouldInspect(node)) {
            const originalRef = node.ref;
            return (0,react__WEBPACK_IMPORTED_MODULE_3__.cloneElement)(node, {
                ref: (ref) => {
                    if (!ref)
                        return;
                    elements.current.push(ref.domElement);
                    promises.current.push(ref.ready);
                    // pass along original ref
                    if (typeof originalRef === "function") {
                        originalRef(ref);
                    }
                    else if (originalRef && typeof originalRef === "object") {
                        originalRef.current = ref;
                    }
                }
            });
        }
        return node;
    });
});
/**
 * Determine whether the node is a <KTX> element
 * @param node Element to check
 */
function shouldInspect(node) {
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.isValidElement)(node) && typeof node.type === "object" && (node.type === KTX || node.type === KTX$1);
}
/**
 * Find least common ancestor of an array of elements
 * @param elements Elements
 * @returns Deepest node containing all passed elements
 */
function leastCommonAncestor(elements) {
    if (elements.length === 0) {
        throw new Error("Must pass at least one element");
    }
    let ancestor = elements[0];
    let failing = elements.slice(1);
    while (failing.length > 0) {
        ancestor = ancestor.parentElement;
        failing = failing.filter(node => !ancestor.contains(node));
    }
    return ancestor;
}




/***/ }),

/***/ "./node_modules/@liqvid/mathjax/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@liqvid/mathjax/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MJX": () => (/* binding */ MJX),
/* harmony export */   "MJXText": () => (/* binding */ MJXText),
/* harmony export */   "MathJaxReady": () => (/* binding */ MathJaxReady),
/* harmony export */   "RenderGroup": () => (/* binding */ RenderGroup)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime.js */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var _liqvid_utils_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liqvid/utils/react */ "./node_modules/@liqvid/utils/dist/esm/react.js");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "react");





/**
 * Ready Promise
 */
const packages = MathJax._.components.package.Package.packages;
// output/svg doesn't load reliably for some reason...
const packageNames = Array.from(packages.keys()).filter(name => name !== "output/svg");
const MathJaxReady = Promise.all([MathJax.loader.ready(...packageNames), MathJax.startup.promise]);

/** Component for MathJax code */
const MJX$1 = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function MJX(props, ref) {
    const { children, display = false, resize = false, span = false, ...attrs } = props;
    const spanRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();
    const [ready, resolve] = (0,_liqvid_utils_react__WEBPACK_IMPORTED_MODULE_1__.usePromise)();
    /* typeset */
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {
        MathJaxReady.then(() => {
            MathJax.typeset([spanRef.current]);
            // replace wrapper span with content
            if (!span) {
                const element = spanRef.current.firstElementChild;
                // copy classes
                for (let i = 0, len = spanRef.current.classList.length; i < len; ++i) {
                    element.classList.add(spanRef.current.classList.item(i));
                }
                // copy dataset
                Object.assign(element.dataset, spanRef.current.dataset);
                // overwrite element
                spanRef.current.replaceWith(element);
                spanRef.current = element;
            }
            resolve();
        });
    }, [children]);
    // handle
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useImperativeHandle)(ref, () => ({
        get domElement() {
            return spanRef.current;
        },
        ready
    }));
    const [open, close] = display ? ["\\[", "\\]"] : ["\\(", "\\)"];
    // Google Chrome fails without this
    // if (display) {
    //   if (!attrs.style)
    //     attrs.style = {};
    //   attrs.style.display = "block";
    // }
    return ((0,react_jsx_runtime_js__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { ...attrs, ref: spanRef, children: open + children + close }));
});
//   constructor(props: Props) {
//     super(props);
//     this.hub = new EventEmitter();
//     // hub will have lots of listeners, turn off warning
//     this.hub.setMaxListeners(0);
//     this.ready = new Promise((resolve) => this.resolveReady = resolve);
//     for (const method of ["Rerender", "Text", "Typeset"]) {
//       this[method] = this[method].bind(this);
//     }
//   }
//   async componentDidMount() {
//     await MathJaxReady;
//     this.Typeset()
//     .then(() => this.jax = MathJax.Hub.getAllJax(this.domElement)[0])
//     .then(this.resolveReady);
//     if (this.props.resize) {
//       window.addEventListener("resize", this.Rerender);
//       onFullScreenChange(this.Rerender);
//     }
//   }
//   shouldComponentUpdate(nextProps: Props) {
//     const text = this.props.children instanceof Array ? this.props.children.join("") : this.props.children,
//           nextText = nextProps.children instanceof Array ? nextProps.children.join("") : nextProps.children;
//     // rerender?
//     if (this.jax && text !== nextText) {
//       this.Text(nextProps.children as string);
//     }
//     // classes changed?
//     if (this.props.className !== nextProps.className) {
//       const classes = this.props.className ? this.props.className.split(" ") : [],
//             newClasses = nextProps.className ? nextProps.className.split(" ") : [];
//       const add = newClasses.filter(_ => !classes.includes(_)),
//             remove = classes.filter(_ => !newClasses.includes(_));
//       for (const _ of remove)
//         this.domElement.classList.remove(_);
//       for (const _ of add)
//         this.domElement.classList.add(_);
//     }
//     // style attribute changed?
//     if (JSON.stringify(this.props.style) !== JSON.stringify(nextProps.style)) {
//       (Object.keys(this.props.style || {}) as (keyof React.CSSProperties)[])
//       .filter(_ => !(nextProps.style || {}).hasOwnProperty(_))
//       .forEach(_ => this.props.style[_] = null);
//       Object.assign(this.domElement.style, nextProps.style);
//     }
//     return false;
//   }
//   Rerender() {
//     MathJax.Hub.Queue(["Rerender", MathJax.Hub, this.domElement]);
//     MathJax.Hub.Queue(() => this.hub.emit("Rerender"));
//   }
//   Text(text: string): Promise<void> {
//     return new Promise((resolve) => {
//       const tasks: [] = [];
//       if (this.props.renderer) {
//         const renderer = MathJax.Hub.config.menuSettings.renderer;
//         tasks.push(["setRenderer", MathJax.Hub, this.props.renderer]);
//         tasks.push(["Text", this.jax, text]);
//         tasks.push(["setRenderer", MathJax.Hub, renderer]);
//       } else {
//         tasks.push(["Text", this.jax, text]);
//       }
//       tasks.push(() => this.hub.emit("Text"));
//       tasks.push(resolve);
//       MathJax.Hub.Queue(...tasks);
//     });
//   }
//   Typeset(): Promise<void> {
//     return new Promise((resolve) => {
//       const tasks = [];
//       if (this.props.renderer) {
//         const renderer = MathJax.Hub.config.menuSettings.renderer;
//         tasks.push(["setRenderer", MathJax.Hub, this.props.renderer]);
//         tasks.push(["Typeset", MathJax.Hub, this.domElement]);
//         tasks.push(["setRenderer", MathJax.Hub, renderer]);
//       } else {
//         tasks.push(["Typeset", MathJax.Hub, this.domElement]);
//       }
//       tasks.push(() => this.hub.emit("Typeset"));
//       tasks.push(resolve);
//       MathJax.Hub.Queue(...tasks);
//     });
//   }
// }
/**
 * Element which will render any MathJax contained inside
 */
const MJXText$1 = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function MJXText(props, ref) {
    const elt = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();
    const combined = (0,_liqvid_utils_react__WEBPACK_IMPORTED_MODULE_1__.combineRefs)(elt, ref);
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {
        MathJax.startup.promise.then(() => {
            MathJax.typeset([elt.current]);
        });
    }, []);
    const { tagName = "p", children, ...attrs } = props;
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.createElement)(tagName, { ...attrs, ref: combined }, children);
});

/** Component for MathJax code */
const MJX = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function MJX(props, ref) {
    const { obstruct = "canplay canplaythrough", reparse = false, ...attrs } = props;
    const plain = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();
    const combined = (0,_liqvid_utils_react__WEBPACK_IMPORTED_MODULE_1__.combineRefs)(plain, ref);
    const player = (0,liqvid__WEBPACK_IMPORTED_MODULE_2__.usePlayer)();
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {
        // obstruction
        const obstructions = obstruct.split(" ");
        if (obstructions.includes("canplay")) {
            player.obstruct("canplay", plain.current.ready);
        }
        if (obstructions.includes("canplaythrough")) {
            player.obstruct("canplaythrough", plain.current.ready);
        }
        // reparsing
        if (reparse) {
            plain.current.ready.then(() => player.reparseTree(plain.current.domElement));
        }
    }, []);
    return (0,react_jsx_runtime_js__WEBPACK_IMPORTED_MODULE_0__.jsx)(MJX$1, { ref: combined, ...attrs });
});
const MJXText = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function MJXText(props, ref) {
    const { ...attrs } = props;
    return (0,react_jsx_runtime_js__WEBPACK_IMPORTED_MODULE_0__.jsx)(MJXText$1, { tagName: "p", ...attrs });
});

/**
 * Wait for a bunch of things to be rendered
 */
// @ts-ignore we don't know how to type `recursiveMap` yet
const RenderGroup = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function RenderGroup(props, ref) {
    const [ready, resolve] = (0,_liqvid_utils_react__WEBPACK_IMPORTED_MODULE_1__.usePromise)();
    // handle
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useImperativeHandle)(ref, () => ({ ready }));
    const elements = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);
    const promises = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);
    // reparsing
    const player = (0,liqvid__WEBPACK_IMPORTED_MODULE_2__.usePlayer)();
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {
        // promises
        Promise.all(promises.current).then(() => {
            // reparse
            if (props.reparse) {
                player.reparseTree(leastCommonAncestor(elements.current));
            }
            // ready()
            resolve();
        });
    }, []);
    return (0,_liqvid_utils_react__WEBPACK_IMPORTED_MODULE_1__.recursiveMap)(props.children, node => {
        if (shouldInspect(node)) {
            const originalRef = node.ref;
            return (0,react__WEBPACK_IMPORTED_MODULE_3__.cloneElement)(node, {
                ref: (ref) => {
                    if (!ref)
                        return;
                    elements.current.push(ref.domElement);
                    promises.current.push(ref.ready);
                    // pass along original ref
                    if (typeof originalRef === "function") {
                        originalRef(ref);
                    }
                    else if (originalRef && typeof originalRef === "object") {
                        originalRef.current = ref;
                    }
                }
            });
        }
        return node;
    });
});
/** Whether the element is an <MJX> */
function shouldInspect(node) {
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.isValidElement)(node) && typeof node.type === "object" && (node.type === MJX || node.type === MJX$1);
}
/**
 * Find least common ancestor of an array of elements
 * @param elements Elements
 * @returns Deepest node containing all passed elements
 */
function leastCommonAncestor(elements) {
    if (elements.length === 0) {
        throw new Error("Must pass at least one element");
    }
    let ancestor = elements[0];
    let failing = elements.slice(1);
    while (failing.length > 0) {
        ancestor = ancestor.parentElement;
        failing = failing.filter(node => !ancestor.contains(node));
    }
    return ancestor;
}




/***/ }),

/***/ "./node_modules/@liqvid/react-three/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@liqvid/react-three/dist/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Canvas": () => (/* binding */ Canvas)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime.js */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var _juggle_resize_observer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @juggle/resize-observer */ "./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js");
/* harmony import */ var _react_three_drei_core_useContextBridge_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @react-three/drei/core/useContextBridge.js */ "./node_modules/@react-three/drei/core/useContextBridge.js");
/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @react-three/fiber */ "./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "react");






/** Default affordances: click and arrow keys */
const defaultAffords = "click keys(ArrowUp,ArrowDown,ArrowLeft,ArrowRight)";
/**
 * Liqvid-aware Canvas component @react-three/fiber
 */
function Canvas(props) {
    const ContextBridge = (0,_react_three_drei_core_useContextBridge_js__WEBPACK_IMPORTED_MODULE_4__.useContextBridge)(liqvid__WEBPACK_IMPORTED_MODULE_2__.Player.Context, liqvid__WEBPACK_IMPORTED_MODULE_2__.PlaybackContext, liqvid__WEBPACK_IMPORTED_MODULE_2__.KeymapContext);
    return ((0,react_jsx_runtime_js__WEBPACK_IMPORTED_MODULE_0__.jsx)(_react_three_fiber__WEBPACK_IMPORTED_MODULE_5__.Canvas, { resize: { polyfill: _juggle_resize_observer__WEBPACK_IMPORTED_MODULE_1__.ResizeObserver }, ...props, children: (0,react_jsx_runtime_js__WEBPACK_IMPORTED_MODULE_0__.jsxs)(ContextBridge, { children: [(0,react_jsx_runtime_js__WEBPACK_IMPORTED_MODULE_0__.jsx)(Fixes, { ...props }), props.children] }) }));
}
function Fixes(props) {
    const { gl } = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_5__.useThree)();
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {
        const affords = props["data-affords"] ?? defaultAffords;
        if (affords) {
            gl.domElement.setAttribute("data-affords", affords);
        }
        gl.domElement.style.touchAction = "none";
    }, []);
    return null;
}


/***/ }),

/***/ "./node_modules/@liqvid/xyjax/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@liqvid/xyjax/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "extendXY": () => (/* binding */ extendXY),
/* harmony export */   "fromb52": () => (/* binding */ fromb52),
/* harmony export */   "tob52": () => (/* binding */ tob52),
/* harmony export */   "useAnimateArrows": () => (/* binding */ useAnimateArrows),
/* harmony export */   "xyDecodeColor": () => (/* binding */ xyDecodeColor),
/* harmony export */   "xyEncodeColor": () => (/* binding */ xyEncodeColor)
/* harmony export */ });
/* harmony import */ var _liqvid_utils_misc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @liqvid/utils/misc */ "./node_modules/@liqvid/utils/dist/esm/misc.js");
/* harmony import */ var liqvid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! liqvid */ "liqvid");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "react");




/**
  XyJax shenanigans
*/
/**
 * Animate XyJax arrows
 */
function useAnimateArrows(o, deps) {
    const playback = (0,liqvid__WEBPACK_IMPORTED_MODULE_1__.usePlayback)();
    const tail = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)();
    const init = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)({});
    /* fading function */
    const fadeTail = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((u) => {
        if (!tail.current)
            return;
        const { x1, x2, y1, y2 } = init.current;
        if (u === 0) {
            tail.current.style.opacity = "0";
        }
        else {
            tail.current.style.opacity = "1";
            tail.current.setAttribute("x2", (0,_liqvid_utils_misc__WEBPACK_IMPORTED_MODULE_0__.lerp)(x1, x2, u).toString());
            tail.current.setAttribute("y2", (0,_liqvid_utils_misc__WEBPACK_IMPORTED_MODULE_0__.lerp)(y1, y2, u).toString());
        }
    }, []);
    /* initialize */
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {
        o.ref.current.ready.then(() => {
            /* tail animation */
            tail.current = o.ref.current.domElement.querySelector(o.tail);
            for (const key of ["x1", "y1", "x2", "y2"]) {
                init.current[key] = parseFloat(tail.current.getAttribute(key));
            }
            fadeTail(o.tailFn(playback.currentTime));
            /* head animation */
            const headNodes = Array.from(o.ref.current.domElement.querySelectorAll(o.head));
            for (const head of headNodes) {
                playback.newAnimation([{ opacity: 0 }, { opacity: 1 }], o.headFade)(head);
            }
            /* label animation */
            const labelNodes = Array.from(o.ref.current.domElement.querySelectorAll(o.label));
            for (const label of labelNodes) {
                playback.newAnimation([{ opacity: 0 }, { opacity: 1 }], o.labelFade)(label);
            }
        });
    }, deps);
    // tail animation
    (0,liqvid__WEBPACK_IMPORTED_MODULE_1__.useTime)(fadeTail, o.tailFn, deps);
}
// absolutely bonkers interception
let extended = false;
Object.defineProperty(MathJax, "AST", {
    get() {
        return this.__xypic;
    },
    set(value) {
        this.__xypic = value;
        if (!extended) {
            extendXY();
            extended = true;
        }
        return this.__xypic = value;
    }
});
function extendXY() {
    const AST = MathJax.AST;
    const xypic = MathJax.xypicGlobalContext;
    const { modifierRepository } = xypic.repositories;
    /* inject ourselves into xypic */
    const prototype = AST.Modifier.Shape.Alphabets.prototype;
    const preprocess = prototype.preprocess.bind(prototype);
    prototype.preprocess = function (...args) {
        if (this.alphabets.startsWith("color")) {
            return modifierRepository.get("color").preprocess(...args);
        }
        else if (this.alphabets.startsWith("data")) {
            return modifierRepository.get("data").preprocess(...args);
        }
        return preprocess(...args);
    };
    const modifyShape = prototype.modifyShape.bind(prototype);
    prototype.modifyShape = function (...args) {
        if (this.alphabets.startsWith("color")) {
            const color = this.alphabets.substr("color".length);
            return modifierRepository.get("color").modifyShape(...args, color);
        }
        else if (this.alphabets.startsWith("data")) {
            const data = this.alphabets.substr("data".length);
            return modifierRepository.get("data").modifyShape(...args, data);
        }
        return modifyShape(...args);
    };
    // color
    modifierRepository.put("color", new class extends AST.Modifier.Shape.ChangeColor {
        modifyShape(context, objectShape, restModifiers, color) {
            this.colorName = xyDecodeColor(color);
            return super.modifyShape(context, objectShape, restModifiers);
        }
    });
    class ChangeDataShape {
        data;
        shape;
        constructor(data, shape) {
            this.data = data;
            this.shape = shape;
        }
        draw(svg) {
            const g = svg.createGroup();
            Object.assign(g.drawArea.dataset, JSON.parse("{" + fromb52(this.data) + "}"));
            this.shape.draw(g);
        }
        getBoundingBox() {
            return this.shape.getBoundingBox();
        }
    }
    // data
    modifierRepository.put("data", new class extends AST.Modifier {
        preprocess() { }
        modifyShape(context, objectShape, restModifiers, data) {
            objectShape = this.proceedModifyShape(context, objectShape, restModifiers);
            return new ChangeDataShape(data, objectShape);
        }
    });
}
const MAP = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
function to_b58(B, A) {
    let d = [], s = "", j, c, n;
    for (let i = 0; i < B.length; ++i) {
        j = 0, c = B[i];
        s += c || s.length ^ i ? "" : 1;
        while (j in d || c) {
            n = d[j];
            n = n ? n * 256 + c : c;
            c = n / A.length | 0;
            d[j] = n % A.length;
            j++;
        }
    }
    while (j--)
        s += A[d[j]];
    return s;
}
function from_b58(S, A) {
    let d = [], b = [], j, c, n;
    for (let i = 0; i < S.length; ++i) {
        j = 0, c = A.indexOf(S[i]);
        if (c < 0)
            return undefined;
        c || b.length ^ i ? i : b.push(0);
        while (j in d || c) {
            n = d[j];
            n = n ? n * A.length + c : c;
            c = n >> 8;
            d[j] = n % 256;
            j++;
        }
    }
    while (j--)
        b.push(d[j]);
    return new Uint8Array(b);
}
/**
 * Encode a hex color for XyJax
 */
function xyEncodeColor(color) {
    return color.toUpperCase().replace(/[#0-9]/g, (char) => {
        if (char === "#")
            return "";
        return String.fromCharCode("G".charCodeAt(0) + parseInt(char));
    });
}
/**
 * Decode a hex color for XyJax
 */
function xyDecodeColor(color) {
    return "#" + color.replace(/[G-P]/g, (digit) => {
        return (digit.charCodeAt(0) - "G".charCodeAt(0)).toString();
    });
}
/**
 * Encode an object for XyJax
 */
function tob52(str) {
    const arr = [];
    for (let i = 0; i < str.length; ++i) {
        arr[i] = str.charCodeAt(i);
    }
    return to_b58(new Uint8Array(arr), MAP);
}
/**
 * Decode an object for XyJax
 */
function fromb52(str) {
    const arr = from_b58(str, MAP);
    let ret = "";
    for (let i = 0; i < arr.length; ++i) {
        ret += String.fromCharCode(arr[i]);
    }
    return ret;
}




/***/ }),

/***/ "./node_modules/@liqvid/utils/dist/esm/misc.js":
/*!*****************************************************!*\
  !*** ./node_modules/@liqvid/utils/dist/esm/misc.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "between": () => (/* binding */ between),
/* harmony export */   "bind": () => (/* binding */ bind),
/* harmony export */   "clamp": () => (/* binding */ clamp),
/* harmony export */   "constrain": () => (/* binding */ constrain),
/* harmony export */   "lerp": () => (/* binding */ lerp),
/* harmony export */   "range": () => (/* binding */ range),
/* harmony export */   "wait": () => (/* binding */ wait),
/* harmony export */   "waitFor": () => (/* binding */ waitFor)
/* harmony export */ });
function between(min, val, max) {
    return (min <= val) && (val < max);
}
function bind(o, methods) {
    for (const method of methods)
        o[method] = o[method].bind(o);
}
function lerp(a, b, t) {
    return a + t * (b - a);
}
function clamp(min, val, max) {
    return Math.min(max, Math.max(min, val));
}
function constrain(min, val, max) {
    return clamp(min, val, max);
}
function range(a, b) {
    if (b === void 0) {
        return range(0, a);
    }
    return new Array(b - a).fill(null).map((_, i) => a + i);
}
function wait(time) {
    return new Promise((resolve) => {
        setTimeout(resolve, time);
    });
}
function waitFor(callback, interval = 10) {
    return new Promise((resolve) => {
        const checkCondition = () => {
            if (callback()) {
                resolve();
            }
            else {
                setTimeout(checkCondition, interval);
            }
        };
        checkCondition();
    });
}


/***/ }),

/***/ "./node_modules/@liqvid/utils/dist/esm/react.js":
/*!******************************************************!*\
  !*** ./node_modules/@liqvid/utils/dist/esm/react.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "captureRef": () => (/* binding */ captureRef),
/* harmony export */   "combineRefs": () => (/* binding */ combineRefs),
/* harmony export */   "recursiveMap": () => (/* binding */ recursiveMap),
/* harmony export */   "useForceUpdate": () => (/* binding */ useForceUpdate),
/* harmony export */   "usePromise": () => (/* binding */ usePromise)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

function combineRefs(...args) {
    return (o) => {
        for (const ref of args) {
            if (typeof ref === "function") {
                ref(o);
            }
            else if (ref === null) {
            }
            else if (typeof ref === "object" && ref.hasOwnProperty("current")) {
                ref.current = o;
            }
        }
    };
}
function useForceUpdate() {
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)((c) => c + 1, 0)[1];
}
const captureRef = (callback, innerRef) => (ref) => {
    if (ref !== null) {
        callback(ref);
    }
    if (innerRef === null) {
        return;
    }
    else if (typeof innerRef === "function") {
        innerRef(ref);
    }
    else if (typeof innerRef === "object") {
        innerRef.current = ref;
    }
};
function recursiveMap(children, fn) {
    return react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, (child) => {
        if (!(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(child)) {
            return child;
        }
        if ("children" in child.props) {
            child = (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(child, {
                children: recursiveMap(child.props.children, fn)
            });
        }
        return fn(child);
    });
}
function usePromise(deps = []) {
    const resolve = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
    const reject = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
    const promise = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => new Promise((res, rej) => {
        resolve.current = res;
        reject.current = rej;
    }), deps);
    return [promise, resolve.current, reject.current];
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***********************!*\
  !*** ./src/index.tsx ***!
  \***********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "react-dom");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _FiveD__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FiveD */ "./src/FiveD.tsx");
/* harmony import */ var _Intro__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Intro */ "./src/Intro.tsx");
/* harmony import */ var _KaTeX__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./KaTeX */ "./src/KaTeX.tsx");
/* harmony import */ var _MathJax__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./MathJax */ "./src/MathJax.tsx");
/* harmony import */ var _ThreeD__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ThreeD */ "./src/ThreeD.tsx");
/* harmony import */ var _TwoD__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TwoD */ "./src/TwoD.tsx");
/* harmony import */ var _XyJax__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./XyJax */ "./src/XyJax.tsx");
/* harmony import */ var _env_controls__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @env/controls */ "./src/@development/controls.tsx");
/* harmony import */ var _lib_LoadingScreen__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @lib/LoadingScreen */ "./lib/LoadingScreen.tsx");











function Lesson() {
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_env_controls__WEBPACK_IMPORTED_MODULE_9__.UI, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lib_LoadingScreen__WEBPACK_IMPORTED_MODULE_10__.LoadingScreen, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_Intro__WEBPACK_IMPORTED_MODULE_3__["default"], {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_KaTeX__WEBPACK_IMPORTED_MODULE_4__["default"], {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_MathJax__WEBPACK_IMPORTED_MODULE_5__["default"], {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_XyJax__WEBPACK_IMPORTED_MODULE_8__["default"], {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_TwoD__WEBPACK_IMPORTED_MODULE_7__["default"], {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_ThreeD__WEBPACK_IMPORTED_MODULE_6__["default"], {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_FiveD__WEBPACK_IMPORTED_MODULE_2__["default"], {})] }));
}
react_dom__WEBPACK_IMPORTED_MODULE_1__.render((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Lesson, {}), document.querySelector("main"));

})();

/******/ })()
;